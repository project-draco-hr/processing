{
  if (codecType == 0) {
    System.out.println("No code type specified, using default of RAW");
    codecType=RAW;
  }
  if (codecQuality == 0) {
    System.out.println("No code quality specified, using default of HIGH");
    codecQuality=HIGH;
  }
  try {
    String path=parent.savePath(filename);
    System.out.println("Creating movie file: " + path);
    movFile=new QTFile(new java.io.File(path));
    movie=Movie.createMovieFile(movFile,StdQTConstants.kMoviePlayer,StdQTConstants.createMovieFileDeleteCurFile);
    int timeScale=TIME_SCALE;
    videoTrack=movie.addTrack(width,height,0);
    videoMedia=new VideoMedia(videoTrack,timeScale);
    videoMedia.beginEdits();
    bounds=new QDRect(0,0,width,height);
    int rawImageSize=QTImage.getMaxCompressionSize(gw,bounds,gw.getPixMap().getPixelSize(),codecQuality,codecType,CodecComponent.anyCodec);
    imageHandle=new QTHandle(rawImageSize,true);
    imageHandle.lock();
    compressedImage=RawEncodedImage.fromQTHandle(imageHandle);
    seq=new CSequence(gw,bounds,gw.getPixMap().getPixelSize(),codecType,CodecComponent.bestFidelityCodec,codecQuality,codecQuality,keyFrameRate,null,0);
    imgDesc=seq.getDescription();
    readyForFrames=true;
  }
 catch (  QTException e) {
    if (e.errorCode() == Errors.noCodecErr) {
      temporalSupported=false;
      readyForFrames=true;
    }
 else     if (e.errorCode() == Errors.fBsyErr) {
      System.err.println("Movie file already exists.  " + "Please delete it first. " + "(DS to solve this eventually.)");
    }
 else {
      e.printStackTrace();
    }
  }
}
