{
  if (clear) {
    GLES20.glClearColor(0,0,0,0);
    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
  }
 else {
    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,fbo[0]);
    GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,textures[frontTex],0);
    int status=glCheckFramebufferStatus(PGL.GL_FRAMEBUFFER);
    if (status != PGL.GL_FRAMEBUFFER_COMPLETE) {
      if (status == PGL.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT) {
        throw new RuntimeException("PFramebuffer: GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT (" + Integer.toHexString(status) + ")");
      }
 else       if (status == PGL.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT) {
        throw new RuntimeException("PFramebuffer: GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT (" + Integer.toHexString(status) + ")");
      }
 else       if (status == PGL.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS) {
        throw new RuntimeException("PFramebuffer: GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS (" + Integer.toHexString(status) + ")");
      }
 else       if (status == PGL.GL_FRAMEBUFFER_INCOMPLETE_FORMATS) {
        throw new RuntimeException("PFramebuffer: GL_FRAMEBUFFER_INCOMPLETE_FORMATS (" + Integer.toHexString(status) + ")");
      }
 else       if (status == PGL.GL_FRAMEBUFFER_UNSUPPORTED) {
        throw new RuntimeException("PFramebuffer: GL_FRAMEBUFFER_UNSUPPORTED" + Integer.toHexString(status));
      }
 else {
        throw new RuntimeException("PFramebuffer: unknown framebuffer error (" + Integer.toHexString(status) + ")");
      }
    }
    GLES20.glClearColor(0,0,0,0);
    GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_STENCIL_BUFFER_BIT);
    if (firstOnscreenFrame) {
      GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
      firstOnscreenFrame=false;
    }
 else {
      drawTexture(GLES20.GL_TEXTURE_2D,textures[backTex],texWidth,texHeight,0,0,pg.width,pg.height,0,0,pg.width,pg.height);
    }
  }
}
