{
  debugMenu=new JMenu(Language.text("menu.debug"));
  JMenuItem item;
  enableDebug=Toolkit.newJCheckBoxMenuItem(Language.text("menu.debug.enable"),KeyEvent.VK_D);
  enableDebug.setSelected(false);
  enableDebug.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateDebugToggle();
    }
  }
);
  debugMenu.add(enableDebug);
  debugMenu.addSeparator();
  item=Toolkit.newJMenuItem(Language.text("menu.debug.continue"),KeyEvent.VK_U);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Continue' menu item");
      debugger.continueDebug();
    }
  }
);
  debugMenu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.debug.step"),KeyEvent.VK_J);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Step Over' menu item");
      debugger.stepOver();
    }
  }
);
  debugMenu.add(item);
  item=Toolkit.newJMenuItemShift(Language.text("menu.debug.step_into"),KeyEvent.VK_J);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Step Into' menu item");
      debugger.stepInto();
    }
  }
);
  debugMenu.add(item);
  item=Toolkit.newJMenuItemAlt(Language.text("menu.debug.step_out"),KeyEvent.VK_J);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Step Out' menu item");
      debugger.stepOut();
    }
  }
);
  debugMenu.add(item);
  debugMenu.addSeparator();
  item=Toolkit.newJMenuItem(Language.text("menu.debug.toggle_breakpoint"),KeyEvent.VK_B);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Toggle Breakpoint' menu item");
      debugger.toggleBreakpoint();
    }
  }
);
  debugMenu.add(item);
  item=new JMenuItem(Language.text("menu.debug.list_breakpoints"));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'List Breakpoints' menu item");
      debugger.listBreakpoints();
    }
  }
);
  debugMenu.add(item);
  debugMenu.addSeparator();
  item=new JMenuItem(Language.text("menu.debug.print_stack_trace"));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Stack Trace' menu item");
      debugger.printStackTrace();
    }
  }
);
  debugMenu.add(item);
  item=new JMenuItem(Language.text("menu.debug.print_locals"));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Locals' menu item");
      debugger.printLocals();
    }
  }
);
  debugMenu.add(item);
  item=new JMenuItem(Language.text("menu.debug.print_fields"));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print This' menu item");
      debugger.printThis();
    }
  }
);
  debugMenu.add(item);
  item=new JMenuItem(Language.text("menu.debug.print_source_location"));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Source' menu item");
      debugger.printSource();
    }
  }
);
  debugMenu.add(item);
  item=new JMenuItem(Language.text("menu.debug.print_threads"));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Threads' menu item");
      debugger.printThreads();
    }
  }
);
  debugMenu.add(item);
  debugMenu.addSeparator();
  item=Toolkit.newJMenuItem(Language.text("menu.debug.show_sketch_outline"),KeyEvent.VK_L);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Base.log("Show Sketch Outline:");
      errorCheckerService.getASTGenerator().showSketchOutline();
    }
  }
);
  debugMenu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.debug.show_tabs_list"),KeyEvent.VK_Y);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Base.log("Show Tab Outline:");
      errorCheckerService.getASTGenerator().showTabOutline();
    }
  }
);
  debugMenu.add(item);
  return debugMenu;
}
