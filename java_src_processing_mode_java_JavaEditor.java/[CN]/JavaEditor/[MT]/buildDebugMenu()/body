{
  debugMenu=new JMenu(Language.text("menu.debug"));
  JMenuItem item;
  JCheckBoxMenuItem toggleDebugger=new JCheckBoxMenuItem(Language.text("menu.debug.show_debug_toolbar"));
  toggleDebugger.setSelected(false);
  toggleDebugger.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      switchToolbars();
    }
  }
);
  debugMenu.add(toggleDebugger);
  item=Toolkit.newJMenuItemAlt(Language.text("menu.debug.debug"),KeyEvent.VK_R);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Debug' menu item");
      debugger.startDebug();
    }
  }
);
  debugMenu.add(item);
  continueMenuItem=Toolkit.newJMenuItem(Language.text("menu.debug.continue"),KeyEvent.VK_U);
  continueMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Continue' menu item");
      debugger.continueDebug();
    }
  }
);
  debugMenu.add(continueMenuItem);
  stopMenuItem=new JMenuItem(Language.text("menu.debug.stop"));
  stopMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Stop' menu item");
      debugger.stopDebug();
    }
  }
);
  debugMenu.add(stopMenuItem);
  debugMenu.addSeparator();
  item=Toolkit.newJMenuItem(Language.text("menu.debug.toggle_breakpoint"),KeyEvent.VK_B);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Toggle Breakpoint' menu item");
      debugger.toggleBreakpoint();
    }
  }
);
  debugMenu.add(item);
  listBreakpointsMenuItem=new JMenuItem(Language.text("menu.debug.list_breakpoints"));
  listBreakpointsMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'List Breakpoints' menu item");
      debugger.listBreakpoints();
    }
  }
);
  debugMenu.add(listBreakpointsMenuItem);
  debugMenu.addSeparator();
  stepOverMenuItem=Toolkit.newJMenuItem(Language.text("menu.debug.step"),KeyEvent.VK_J);
  stepOverMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Step Over' menu item");
      debugger.stepOver();
    }
  }
);
  debugMenu.add(stepOverMenuItem);
  stepIntoMenuItem=Toolkit.newJMenuItemShift(Language.text("menu.debug.step_into"),KeyEvent.VK_J);
  stepIntoMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Step Into' menu item");
      debugger.stepInto();
    }
  }
);
  debugMenu.add(stepIntoMenuItem);
  stepOutMenuItem=Toolkit.newJMenuItemAlt(Language.text("menu.debug.step_out"),KeyEvent.VK_J);
  stepOutMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Step Out' menu item");
      debugger.stepOut();
    }
  }
);
  debugMenu.add(stepOutMenuItem);
  debugMenu.addSeparator();
  printStackTraceMenuItem=new JMenuItem(Language.text("menu.debug.print_stack_trace"));
  printStackTraceMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Stack Trace' menu item");
      debugger.printStackTrace();
    }
  }
);
  debugMenu.add(printStackTraceMenuItem);
  printLocalsMenuItem=new JMenuItem(Language.text("menu.debug.print_locals"));
  printLocalsMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Locals' menu item");
      debugger.printLocals();
    }
  }
);
  debugMenu.add(printLocalsMenuItem);
  printThisMenuItem=new JMenuItem(Language.text("menu.debug.print_fields"));
  printThisMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print This' menu item");
      debugger.printThis();
    }
  }
);
  debugMenu.add(printThisMenuItem);
  printSourceMenuItem=new JMenuItem(Language.text("menu.debug.print_source_location"));
  printSourceMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Source' menu item");
      debugger.printSource();
    }
  }
);
  debugMenu.add(printSourceMenuItem);
  printThreads=new JMenuItem(Language.text("menu.debug.print_threads"));
  printThreads.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Print Threads' menu item");
      debugger.printThreads();
    }
  }
);
  debugMenu.add(printThreads);
  debugMenu.addSeparator();
  toggleVariableInspectorMenuItem=Toolkit.newJMenuItem(Language.text("menu.debug.toggle_variable_inspector"),KeyEvent.VK_I);
  toggleVariableInspectorMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Logger.getLogger(JavaEditor.class.getName()).log(Level.INFO,"Invoked 'Toggle Variable Inspector' menu item");
      toggleVariableInspector();
    }
  }
);
  debugMenu.add(toggleVariableInspectorMenuItem);
  showOutline=Toolkit.newJMenuItem(Language.text("menu.debug.show_sketch_outline"),KeyEvent.VK_L);
  showOutline.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Base.log("Show Sketch Outline:");
      errorCheckerService.getASTGenerator().showSketchOutline();
    }
  }
);
  debugMenu.add(showOutline);
  showTabOutline=Toolkit.newJMenuItem(Language.text("menu.debug.show_tabs_list"),KeyEvent.VK_Y);
  showTabOutline.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Base.log("Show Tab Outline:");
      errorCheckerService.getASTGenerator().showTabOutline();
    }
  }
);
  debugMenu.add(showTabOutline);
  return debugMenu;
}
