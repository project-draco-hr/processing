{
  Validator.checkTrue(outfile != null && outfile.getPath().endsWith(".exe"),"outfile",Messages.getString("Config.specify.output.exe"));
  if (dontWrapJar) {
    if (jar != null && !jar.getPath().equals("")) {
      Validator.checkRelativeWinPath(jar.getPath(),"jar",Messages.getString("Config.application.jar.path"));
    }
 else {
      Validator.checkTrue(classPath != null,"classPath",Messages.getString("ClassPath.or.jar"));
    }
  }
 else {
    Validator.checkFile(jar,"jar",Messages.getString("Config.application.jar"));
  }
  if (!Validator.isEmpty(chdir)) {
    Validator.checkRelativeWinPath(chdir,"chdir",Messages.getString("Config.chdir.relative"));
    Validator.checkFalse(chdir.toLowerCase().equals("true") || chdir.toLowerCase().equals("false"),"chdir",Messages.getString("Config.chdir.path"));
  }
  Validator.checkOptFile(manifest,"manifest",Messages.getString("Config.manifest"));
  Validator.checkOptFile(icon,"icon",Messages.getString("Config.icon"));
  Validator.checkOptString(cmdLine,Validator.MAX_BIG_STR,"jarArgs",Messages.getString("Config.jar.arguments"));
  Validator.checkOptString(errTitle,Validator.MAX_STR,"errTitle",Messages.getString("Config.error.title"));
  Validator.checkOptString(downloadUrl,256,"downloadUrl",Messages.getString("Config.download.url"));
  Validator.checkOptString(supportUrl,256,"supportUrl",Messages.getString("Config.support.url"));
  Validator.checkIn(getHeaderType(),HEADER_TYPES,"headerType",Messages.getString("Config.header.type"));
  Validator.checkFalse(getHeaderType().equals(CONSOLE_HEADER) && splash != null,"headerType",Messages.getString("Config.splash.not.impl.by.console.hdr"));
  Validator.checkOptStrings(variables,Validator.MAX_ARGS,Validator.MAX_ARGS,"[^=%\t]+=[^=\t]+","variables",Messages.getString("Config.variables"),Messages.getString("Config.variables.err"));
  Validator.checkIn(getPriority(),PRIORITY_CLASS_NAMES,"priority",Messages.getString("Config.priority"));
  jre.checkInvariants();
}
