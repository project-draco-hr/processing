{
  super();
  setBackground(Color.LIGHT_GRAY);
  this.contributionTab=contributionTab;
  iconLabel=new JLabel();
  label=new JTextPane();
  label.setEditable(false);
  label.setOpaque(false);
  label.setContentType("text/html");
  label.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        if (e.getURL() != null) {
          Base.openURL(e.getURL().toString());
        }
      }
    }
  }
);
  installButton=new JButton("Install",Toolkit.getLibIcon("manager/update.png"));
  installButton.setHorizontalAlignment(SwingConstants.LEFT);
  installButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ContributionPanel currentPanel=contributionTab.contributionListPanel.getSelectedPanel();
      currentPanel.install();
      StatusPanel.this.update(currentPanel);
    }
  }
);
  progressBarPanel=new JPanel();
  progressBarPanel.setLayout(new BorderLayout());
  progressBarPanel.setOpaque(false);
  updateLabel=new JLabel(" ");
  updateButton=new JButton("Update",Toolkit.getLibIcon("manager/update.png"));
  updateButton.setHorizontalAlignment(SwingConstants.LEFT);
  updateButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ContributionPanel currentPanel=contributionTab.contributionListPanel.getSelectedPanel();
      currentPanel.update();
      StatusPanel.this.update(currentPanel);
    }
  }
);
  removeButton=new JButton("Remove",Toolkit.getLibIcon("manager/remove.png"));
  removeButton.setHorizontalAlignment(SwingConstants.LEFT);
  removeButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ContributionPanel currentPanel=contributionTab.contributionListPanel.getSelectedPanel();
      currentPanel.remove();
      StatusPanel.this.update(currentPanel);
    }
  }
);
  int labelWidth=width != 0 ? width * 3 / 4 : GroupLayout.PREFERRED_SIZE;
  layout=new GroupLayout(this);
  this.setLayout(layout);
  layout.setAutoCreateContainerGaps(true);
  layout.setAutoCreateGaps(true);
  layout.setHorizontalGroup(layout.createSequentialGroup().addComponent(iconLabel,50,50,50).addGap(0).addComponent(label,labelWidth,labelWidth,labelWidth).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(installButton,BUTTON_WIDTH,BUTTON_WIDTH,BUTTON_WIDTH).addComponent(progressBarPanel).addComponent(updateLabel).addComponent(updateButton).addComponent(removeButton)));
  layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(iconLabel).addComponent(label).addGroup(layout.createSequentialGroup().addComponent(installButton).addGroup(layout.createParallelGroup().addComponent(progressBarPanel).addComponent(updateLabel)).addComponent(updateButton).addComponent(removeButton)));
  layout.linkSize(SwingConstants.HORIZONTAL,installButton,progressBarPanel,updateButton,removeButton);
  progressBarPanel.setVisible(false);
  updateLabel.setVisible(false);
  installButton.setEnabled(false);
  updateButton.setEnabled(false);
  removeButton.setEnabled(false);
  layout.setHonorsVisibility(updateLabel,false);
  validate();
}
