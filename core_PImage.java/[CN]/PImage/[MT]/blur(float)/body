{
  int radius=(int)(r * 3.5f);
  radius=(radius < 1) ? 1 : ((radius < 248) ? radius : 248);
  if (blurRadius != radius) {
    blurRadius=radius;
    blurKernelSize=1 + radius * 2;
    blurKernel=new int[blurKernelSize];
    blurMult=new int[blurKernelSize][256];
    int sum=0;
    for (int i=1; i < radius; i++) {
      int radiusi=radius - i;
      blurKernel[radius + i]=blurKernel[radiusi]=radiusi * radiusi;
      sum+=blurKernel[radiusi] + blurKernel[radiusi];
      for (int j=0; j < 256; j++) {
        blurMult[radius + i][j]=blurMult[radiusi][j]=blurKernel[radiusi] * j;
      }
    }
    blurKernel[radius]=radius * radius;
    sum+=blurKernel[radius];
    for (int j=0; j < 256; j++) {
      blurMult[radius][j]=blurKernel[radius] * j;
    }
  }
  int sum, cr, cg, cb, k;
  int pixel, read, ri, xl, yl, ym, riw;
  int wh=width * height;
  int r1[]=new int[wh];
  int g1[]=new int[wh];
  int b1[]=new int[wh];
  for (int i=0; i < wh; i++) {
    ri=pixels[i];
    r1[i]=(ri & 0xff0000) >> 16;
    g1[i]=(ri & 0x00ff00) >> 8;
    b1[i]=(ri & 0x0000ff);
  }
  int r2[]=new int[wh];
  int g2[]=new int[wh];
  int b2[]=new int[wh];
  int x=0;
  int y=0;
  int w=width;
  int h=height;
  int yi=y * width;
  for (yl=y; yl < h; yl++) {
    for (xl=x; xl < w; xl++) {
      cb=cg=cr=sum=0;
      ri=xl - blurRadius;
      for (int i=0; i < blurKernelSize; i++) {
        read=ri + i;
        if ((read >= x) && (read < w)) {
          read+=yi;
          cr+=blurMult[i][r1[read]];
          cg+=blurMult[i][g1[read]];
          cb+=blurMult[i][b1[read]];
          sum+=blurKernel[i];
        }
      }
      ri=yi + xl;
      r2[ri]=cr / sum;
      g2[ri]=cg / sum;
      b2[ri]=cb / sum;
    }
    yi+=width;
  }
  yi=y * width;
  for (yl=y; yl < h; yl++) {
    ym=yl - blurRadius;
    riw=ym * width;
    for (xl=x; xl < w; xl++) {
      cb=cg=cr=sum=0;
      ri=ym;
      read=xl + riw;
      for (int i=0; i < blurKernelSize; i++) {
        if ((ri < h) && (ri >= y)) {
          cr+=blurMult[i][r2[read]];
          cg+=blurMult[i][g2[read]];
          cb+=blurMult[i][b2[read]];
          sum+=blurKernel[i];
        }
        ri++;
        read+=width;
      }
      pixels[xl + yi]=0xff000000 | (cr / sum) << 16 | (cg / sum) << 8 | (cb / sum);
    }
    yi+=width;
  }
}
