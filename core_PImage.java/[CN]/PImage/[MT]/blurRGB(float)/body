{
  int sum, cr, cg, cb, k;
  int pixel, read, ri, roff, ym, ymi, riw, bk0;
  int r2[]=new int[pixels.length];
  int g2[]=new int[pixels.length];
  int b2[]=new int[pixels.length];
  int yi=0;
  buildBlurKernel(r);
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      cb=cg=cr=sum=0;
      read=x - blurRadius;
      if (read < 0) {
        bk0=-read;
        read=0;
      }
 else {
        if (read >= width)         break;
        bk0=0;
      }
      for (int i=bk0; i < blurKernelSize; i++) {
        if (read >= width)         break;
        int c=pixels[read + yi];
        int[] bm=blurMult[i];
        cr+=bm[(c & RED_MASK) >> 16];
        cg+=bm[(c & GREEN_MASK) >> 8];
        cb+=bm[c & BLUE_MASK];
        sum+=blurKernel[i];
        read++;
      }
      ri=yi + x;
      r2[ri]=cr / sum;
      g2[ri]=cg / sum;
      b2[ri]=cb / sum;
    }
    yi+=width;
  }
  yi=0;
  ym=-blurRadius;
  ymi=ym * width;
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      cb=cg=cr=sum=0;
      if (ym < 0) {
        bk0=ri=-ym;
        read=x;
      }
 else {
        if (ym >= height)         break;
        bk0=0;
        ri=ym;
        read=x + ymi;
      }
      for (int i=bk0; i < blurKernelSize; i++) {
        if (ri >= height)         break;
        int[] bm=blurMult[i];
        cr+=bm[r2[read]];
        cg+=bm[g2[read]];
        cb+=bm[b2[read]];
        sum+=blurKernel[i];
        ri++;
        read+=width;
      }
      pixels[x + yi]=0xff000000 | (cr / sum) << 16 | (cg / sum) << 8 | (cb / sum);
    }
    yi+=width;
    ymi+=width;
    ym++;
  }
}
