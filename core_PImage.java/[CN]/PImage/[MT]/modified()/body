{
  tindex=-1;
  int width2=(int)Math.pow(2,Math.ceil(Math.log(width) / Math.log(2)));
  int height2=(int)Math.pow(2,Math.ceil(Math.log(height) / Math.log(2)));
  if ((width2 > twidth) || (height2 > theight)) {
    tpixels=null;
  }
  if (tpixels == null) {
    twidth=width2;
    theight=height2;
    tpixels=new int[twidth * theight];
  }
  int p=0;
  int t=0;
  if (System.getProperty("sun.cpu.endian").equals("big")) {
switch (format) {
case ALPHA:
      for (int y=0; y < height; y++) {
        for (int x=0; x < width; x++) {
          tpixels[t++]=0xFFFFFF00 | pixels[p++];
        }
        t+=twidth - width;
      }
    break;
case RGB:
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      int pixel=pixels[p++];
      tpixels[t++]=(pixel << 8) | 0xff;
    }
    t+=twidth - width;
  }
break;
case ARGB:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
  int pixel=pixels[p++];
  tpixels[t++]=(pixel << 8) | ((pixel >> 24) & 0xff);
}
t+=twidth - width;
}
break;
}
}
 else {
switch (format) {
case ALPHA:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
tpixels[t++]=(pixels[p++] << 24) | 0x00FFFFFF;
}
t+=twidth - width;
}
break;
case RGB:
for (int y=0; y < height; y++) {
System.arraycopy(pixels,p,tpixels,t,width);
p+=width;
t+=twidth;
}
break;
case ARGB:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
int pixel=pixels[p++];
tpixels[t++]=((pixel & 0xFF) << 16) | ((pixel & 0xFF0000) >> 16) | (pixel & 0xFF00FF00);
}
t+=twidth - width;
}
break;
}
}
}
