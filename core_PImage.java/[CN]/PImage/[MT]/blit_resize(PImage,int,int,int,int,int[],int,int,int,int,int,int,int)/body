{
  if (srcX1 < 0)   srcX1=0;
  if (srcY1 < 0)   srcY1=0;
  if (srcX2 >= img.width)   srcX2=img.width - 1;
  if (srcY2 >= img.height)   srcY2=img.height - 1;
  int srcW=srcX2 - srcX1;
  int srcH=srcY2 - srcY1;
  int destW=destX2 - destX1;
  int destH=destY2 - destY1;
  if (!smooth) {
    srcW++;
    srcH++;
  }
  if (destW <= 0 || destH <= 0 || srcW <= 0 || srcH <= 0 || destX1 >= screenW || destY1 >= screenH || srcX1 >= img.width || srcY1 >= img.height) {
    return;
  }
  int dx=(int)(srcW / (float)destW * PRECISIONF);
  int dy=(int)(srcH / (float)destH * PRECISIONF);
  srcXOffset=(int)(destX1 < 0 ? -destX1 * dx : srcX1 * PRECISIONF);
  srcYOffset=(int)(destY1 < 0 ? -destY1 * dy : srcY1 * PRECISIONF);
  if (destX1 < 0) {
    destW+=destX1;
    destX1=0;
  }
  if (destY1 < 0) {
    destH+=destY1;
    destY1=0;
  }
  destW=low(destW,screenW - destX1);
  destH=low(destH,screenH - destY1);
  int destOffset=destY1 * screenW + destX1;
  srcBuffer=img.pixels;
  if (smooth) {
    iw=img.width;
    iw1=img.width - 1;
    ih1=img.height - 1;
switch (mode) {
case BLEND:
      for (int y=0; y < destH; y++) {
        filter_new_scanline();
        for (int x=0; x < destW; x++) {
          destPixels[destOffset + x]=blend_multiply(destPixels[destOffset + x],filter_bilinear());
          sX+=dx;
        }
        destOffset+=screenW;
        srcYOffset+=dy;
      }
    break;
case ADD:
  for (int y=0; y < destH; y++) {
    filter_new_scanline();
    for (int x=0; x < destW; x++) {
      destPixels[destOffset + x]=blend_add_pin(destPixels[destOffset + x],filter_bilinear());
      sX+=dx;
    }
    destOffset+=screenW;
    srcYOffset+=dy;
  }
break;
case SUBTRACT:
for (int y=0; y < destH; y++) {
filter_new_scanline();
for (int x=0; x < destW; x++) {
  destPixels[destOffset + x]=blend_sub_pin(destPixels[destOffset + x],filter_bilinear());
  sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case LIGHTEST:
for (int y=0; y < destH; y++) {
filter_new_scanline();
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_lightest(destPixels[destOffset + x],filter_bilinear());
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case DARKEST:
for (int y=0; y < destH; y++) {
filter_new_scanline();
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_darkest(destPixels[destOffset + x],filter_bilinear());
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case REPLACE:
for (int y=0; y < destH; y++) {
filter_new_scanline();
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=filter_bilinear();
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
}
}
 else {
switch (mode) {
case BLEND:
for (int y=0; y < destH; y++) {
sX=srcXOffset;
sY=(srcYOffset >> PRECISIONB) * img.width;
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_multiply(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case ADD:
for (int y=0; y < destH; y++) {
sX=srcXOffset;
sY=(srcYOffset >> PRECISIONB) * img.width;
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_add_pin(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case SUBTRACT:
for (int y=0; y < destH; y++) {
sX=srcXOffset;
sY=(srcYOffset >> PRECISIONB) * img.width;
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_sub_pin(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case LIGHTEST:
for (int y=0; y < destH; y++) {
sX=srcXOffset;
sY=(srcYOffset >> PRECISIONB) * img.width;
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_lightest(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case DARKEST:
for (int y=0; y < destH; y++) {
sX=srcXOffset;
sY=(srcYOffset >> PRECISIONB) * img.width;
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=blend_darkest(destPixels[destOffset + x],srcBuffer[sY + (sX >> PRECISIONB)]);
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
case REPLACE:
for (int y=0; y < destH; y++) {
sX=srcXOffset;
sY=(srcYOffset >> PRECISIONB) * img.width;
for (int x=0; x < destW; x++) {
destPixels[destOffset + x]=srcBuffer[sY + (sX >> PRECISIONB)];
sX+=dx;
}
destOffset+=screenW;
srcYOffset+=dy;
}
break;
}
}
}
