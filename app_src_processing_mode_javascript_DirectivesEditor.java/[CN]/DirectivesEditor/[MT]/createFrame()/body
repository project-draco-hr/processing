{
  int GUI_BIG=13;
  int GUI_BETWEEN=10;
  int GUI_SMALL=6;
  int FIELD_SIZE=30;
  int left=GUI_BIG;
  int top=GUI_BIG;
  int right=0;
  Dimension d;
  frame=new JFrame("Directives Editor");
  Container pane=frame.getContentPane();
  pane.setLayout(null);
  JLabel label=new JLabel("Click here to read about directives.");
  label.addMouseListener(new MouseListener(){
    public void mouseClicked(    MouseEvent e){
      Base.openURL("http://processingjs.org/reference/pjs%20directive");
    }
    public void mouseEntered(    MouseEvent e){
    }
    public void mouseExited(    MouseEvent e){
    }
    public void mousePressed(    MouseEvent e){
    }
    public void mouseReleased(    MouseEvent e){
    }
  }
);
  pane.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN + GUI_BETWEEN;
  crispBox=new JCheckBox("\"crisp\": disable antialiasing for line(), triangle() and rect()");
  pane.add(crispBox);
  d=crispBox.getPreferredSize();
  crispBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  label=new JLabel("\"font\": to load (comma separated)");
  pane.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_SMALL;
  fontField=new JTextField(FIELD_SIZE);
  pane.add(fontField);
  d=fontField.getPreferredSize();
  fontField.setBounds(left,top,d.width,d.height);
  JButton button=new JButton("scan");
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleScanFonts();
    }
  }
);
  pane.add(button);
  Dimension d2=button.getPreferredSize();
  button.setBounds(left + d.width + GUI_SMALL,top,d2.width,d2.height);
  right=Math.max(right,left + d.width + GUI_SMALL+ d2.width);
  top+=d.height + GUI_BETWEEN;
  globalKeyEventsBox=new JCheckBox("\"globalKeyEvents\": receive global key events");
  pane.add(globalKeyEventsBox);
  d=globalKeyEventsBox.getPreferredSize();
  globalKeyEventsBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  pauseOnBlurBox=new JCheckBox("\"pauseOnBlur\": pause if applet loses focus");
  pane.add(pauseOnBlurBox);
  d=pauseOnBlurBox.getPreferredSize();
  pauseOnBlurBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  label=new JLabel("\"preload\": images (comma separated)");
  pane.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_SMALL;
  preloadField=new JTextField(FIELD_SIZE);
  pane.add(preloadField);
  d=preloadField.getPreferredSize();
  preloadField.setBounds(left,top,d.width,d.height);
  button=new JButton("scan");
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleScanImages();
    }
  }
);
  pane.add(button);
  d2=button.getPreferredSize();
  button.setBounds(left + d.width + GUI_SMALL,top,d2.width,d2.height);
  right=Math.max(right,left + d.width + GUI_SMALL+ d2.width);
  top+=d.height + GUI_BETWEEN;
  button=new JButton("OK");
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      applyDirectives();
      hide();
    }
  }
);
  pane.add(button);
  d2=button.getPreferredSize();
  int BUTTON_HEIGHT=d2.height;
  int BUTTON_WIDTH=80;
  int h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  h+=BUTTON_WIDTH + GUI_SMALL;
  button=new JButton("Cancel");
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      hide();
    }
  }
);
  pane.add(button);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  top+=BUTTON_HEIGHT + GUI_BETWEEN;
  frame.pack();
  Insets insets=frame.getInsets();
  frame.setSize(right + GUI_BIG + insets.left+ insets.right,top + GUI_SMALL + insets.top+ insets.bottom);
  frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  frame.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      frame.setVisible(false);
    }
  }
);
  Base.registerWindowCloseKeys(frame.getRootPane(),new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      frame.setVisible(false);
    }
  }
);
  Base.setIcon(frame);
}
