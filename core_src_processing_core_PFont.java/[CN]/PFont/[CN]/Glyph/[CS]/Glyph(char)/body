{
  int mbox3=size * 3;
  lazyGraphics.setColor(Color.white);
  lazyGraphics.fillRect(0,0,mbox3,mbox3);
  lazyGraphics.setColor(Color.black);
  lazyGraphics.drawString(String.valueOf(c),size,size * 2);
  WritableRaster raster=lazyImage.getRaster();
  raster.getDataElements(0,0,mbox3,mbox3,lazySamples);
  int minX=1000, maxX=0;
  int minY=1000, maxY=0;
  boolean pixelFound=false;
  for (int y=0; y < mbox3; y++) {
    for (int x=0; x < mbox3; x++) {
      int sample=lazySamples[y * mbox3 + x] & 0xff;
      if (sample != 255) {
        if (x < minX)         minX=x;
        if (y < minY)         minY=y;
        if (x > maxX)         maxX=x;
        if (y > maxY)         maxY=y;
        pixelFound=true;
      }
    }
  }
  if (!pixelFound) {
    minX=minY=0;
    maxX=maxY=0;
  }
  value=c;
  height=(maxY - minY) + 1;
  width=(maxX - minX) + 1;
  setWidth=lazyMetrics.charWidth(c);
  topExtent=size * 2 - minY;
  leftExtent=minX - size;
  image=new PImage(width,height,ALPHA);
  int[] pixels=image.pixels;
  for (int y=minY; y <= maxY; y++) {
    for (int x=minX; x <= maxX; x++) {
      int val=255 - (lazySamples[y * mbox3 + x] & 0xff);
      int pindex=(y - minY) * width + (x - minX);
      pixels[pindex]=val;
    }
  }
  if (value == 'd') {
    if (ascent == 0)     ascent=topExtent;
  }
  if (value == 'p') {
    if (descent == 0)     descent=-topExtent + height;
  }
}
