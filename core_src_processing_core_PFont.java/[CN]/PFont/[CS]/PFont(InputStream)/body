{
  DataInputStream is=new DataInputStream(input);
  glyphCount=is.readInt();
  int version=is.readInt();
  size=is.readInt();
  is.readInt();
  ascent=is.readInt();
  descent=is.readInt();
  glyphs=new Glyph[glyphCount];
  ascii=new int[128];
  for (int i=0; i < 128; i++)   ascii[i]=-1;
  for (int i=0; i < glyphCount; i++) {
    glyphs[i]=new Glyph();
    Glyph glyph=glyphs[i];
    glyph.value=is.readInt();
    glyph.height=is.readInt();
    glyph.width=is.readInt();
    glyph.setWidth=is.readInt();
    glyph.topExtent=is.readInt();
    glyph.leftExtent=is.readInt();
    is.readInt();
    if (glyph.value < 128)     ascii[glyph.value]=i;
    if (glyph.value == 'd') {
      if (ascent == 0)       ascent=glyph.topExtent;
    }
    if (glyph.value == 'p') {
      if (descent == 0)       descent=-glyph.topExtent + glyph.height;
    }
  }
  if ((ascent == 0) && (descent == 0)) {
    throw new RuntimeException("Please use \"Create Font\" to " + "re-create this font.");
  }
  for (  Glyph glyph : glyphs) {
    glyph.image=new PImage(glyph.width,glyph.height,ALPHA);
    int bitmapSize=glyph.width * glyph.height;
    byte[] temp=new byte[bitmapSize];
    is.readFully(temp);
    int w=glyph.width;
    int h=glyph.height;
    int[] pixels=glyph.image.pixels;
    for (int y=0; y < h; y++) {
      for (int x=0; x < w; x++) {
        int valu=temp[y * w + x] & 0xff;
        pixels[y * glyph.width + x]=valu;
      }
    }
  }
  if (version >= 10) {
    name=is.readUTF();
    psname=is.readUTF();
  }
  if (version == 11) {
    smooth=is.readBoolean();
  }
}
