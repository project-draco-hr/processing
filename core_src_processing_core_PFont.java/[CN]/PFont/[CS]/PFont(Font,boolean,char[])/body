{
  this.font=font;
  this.smooth=smooth;
  name=font.getName();
  psname=font.getPSName();
  size=font.getSize();
  lazy=true;
  int initialCount=10;
  glyphs=new Glyph[initialCount];
  ascii=new int[128];
  Arrays.fill(ascii,-1);
  int mbox3=size * 3;
  lazyImage=new BufferedImage(mbox3,mbox3,BufferedImage.TYPE_INT_RGB);
  lazyGraphics=(Graphics2D)lazyImage.getGraphics();
  lazyGraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,smooth ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);
  lazyGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,smooth ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
  lazyGraphics.setFont(font);
  lazyMetrics=lazyGraphics.getFontMetrics();
  lazySamples=new int[mbox3 * mbox3];
  if (charset != null) {
    Arrays.sort(charset);
    glyphs=new Glyph[charset.length];
    glyphCount=0;
    for (    char c : charset) {
      if (font.canDisplay(c)) {
        glyphs[glyphCount++]=new Glyph(c);
      }
    }
    if (glyphCount != charset.length) {
      glyphs=(Glyph[])PApplet.subset(glyphs,0,glyphCount);
    }
  }
  if (ascent == 0) {
    if (font.canDisplay('d')) {
      new Glyph('d');
    }
 else {
      ascent=lazyMetrics.getAscent();
    }
  }
  if (descent == 0) {
    if (font.canDisplay('p')) {
      new Glyph('p');
    }
 else {
      descent=lazyMetrics.getDescent();
    }
  }
}
