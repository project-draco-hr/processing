{
  Platform.runLater(new Runnable(){
    @Override public void run(){
      WebView view=new WebView();
      engine=view.getEngine();
      engine.titleProperty().addListener(new ChangeListener<String>(){
        @Override public void changed(        ObservableValue<? extends String> observable,        String oldValue,        final String newValue){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              Welcome.this.setTitle(newValue);
            }
          }
);
        }
      }
);
      engine.setOnStatusChanged(new EventHandler<WebEvent<String>>(){
        @Override public void handle(        final WebEvent<String> event){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              lblStatus.setText(event.getData());
            }
          }
);
        }
      }
);
      engine.locationProperty().addListener(new ChangeListener<String>(){
        @Override public void changed(        ObservableValue<? extends String> ov,        String oldValue,        final String newValue){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              txtURL.setText(newValue);
            }
          }
);
        }
      }
);
      engine.getLoadWorker().workDoneProperty().addListener(new ChangeListener<Number>(){
        @Override public void changed(        ObservableValue<? extends Number> observableValue,        Number oldValue,        final Number newValue){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              progressBar.setValue(newValue.intValue());
            }
          }
);
        }
      }
);
      engine.getLoadWorker().exceptionProperty().addListener(new ChangeListener<Throwable>(){
        @Override public void changed(        ObservableValue<? extends Throwable> o,        Throwable old,        final Throwable value){
          if (engine.getLoadWorker().getState() == FAILED) {
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                JOptionPane.showMessageDialog(panel,(value != null) ? engine.getLocation() + "\n" + value.getMessage() : engine.getLocation() + "\nUnexpected error.","Loading error...",JOptionPane.ERROR_MESSAGE);
              }
            }
);
          }
        }
      }
);
      final String EVENT_TYPE_CLICK="click";
      engine.getLoadWorker().stateProperty().addListener(new ChangeListener<State>(){
        @Override public void changed(        ObservableValue ov,        State oldState,        State newState){
          if (newState == Worker.State.SUCCEEDED) {
            EventListener listener=new EventListener(){
              @Override public void handleEvent(              final Event ev){
                String domEventType=ev.getType();
                if (domEventType.equals(EVENT_TYPE_CLICK)) {
                  EventQueue.invokeLater(new Runnable(){
                    public void run(){
                      String href=((Element)ev.getTarget()).getAttribute("href");
                      Base.openURL(href);
                    }
                  }
);
                }
              }
            }
;
            Document doc=engine.getDocument();
            NodeList nodeList=doc.getElementsByTagName("a");
            for (int i=0; i < nodeList.getLength(); i++) {
              ((EventTarget)nodeList.item(i)).addEventListener(EVENT_TYPE_CLICK,listener,false);
            }
          }
        }
      }
);
      jfxPanel.setScene(new Scene(view));
    }
  }
);
}
