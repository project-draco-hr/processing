{
  super(WINDOW_TITLE);
  MRJApplicationUtils.registerAboutHandler(this);
  MRJApplicationUtils.registerPrefsHandler(this);
  MRJApplicationUtils.registerQuitHandler(this);
  MRJApplicationUtils.registerOpenDocumentHandler(this);
  Preferences.init();
  try {
    icon=Base.getImage("icon.gif",this);
    setIconImage(icon);
  }
 catch (  Exception e) {
  }
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      handleQuit();
    }
  }
);
  PdeKeywords keywords=new PdeKeywords();
  sketchbook=new Sketchbook(this);
  JMenuBar menubar=new JMenuBar();
  menubar.add(buildFileMenu());
  menubar.add(buildEditMenu());
  menubar.add(buildSketchMenu());
  menubar.add(buildToolsMenu());
  menubar.add(buildHelpMenu());
  setJMenuBar(menubar);
  find=new FindReplace(Editor.this);
  Container pain=getContentPane();
  pain.setLayout(new BorderLayout());
  Box box=Box.createVerticalBox();
  Box upper=Box.createVerticalBox();
  buttons=new EditorButtons(this);
  upper.add(buttons);
  header=new EditorHeader(this);
  upper.add(header);
  textarea=new JEditTextArea(new PdeTextAreaDefaults());
  textarea.setRightClickPopup(new TextAreaPopup());
  textarea.setHorizontalOffset(6);
  consolePanel=new JPanel();
  consolePanel.setLayout(new BorderLayout());
  status=new EditorStatus(this);
  consolePanel.add(status,BorderLayout.NORTH);
  console=new EditorConsole(this);
  console.setBorder(null);
  consolePanel.add(console,BorderLayout.CENTER);
  lineStatus=new EditorLineStatus(textarea);
  consolePanel.add(lineStatus,BorderLayout.SOUTH);
  upper.add(textarea);
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,upper,consolePanel);
  splitPane.setOneTouchExpandable(true);
  splitPane.setContinuousLayout(true);
  splitPane.setResizeWeight(1D);
  splitPane.setBorder(null);
  int dividerSize=Preferences.getInteger("editor.divider.size");
  if (dividerSize != 0) {
    splitPane.setDividerSize(dividerSize);
  }
  splitPane.setMinimumSize(new Dimension(600,600));
  box.add(splitPane);
  listener=new EditorListener(this,textarea);
  pain.add(box);
  DropTarget dt=new DropTarget(this,new DropTargetListener(){
    public void dragEnter(    DropTargetDragEvent event){
      event.acceptDrag(DnDConstants.ACTION_COPY);
    }
    public void dragExit(    DropTargetEvent event){
    }
    public void dragOver(    DropTargetDragEvent event){
      event.acceptDrag(DnDConstants.ACTION_COPY);
    }
    public void dropActionChanged(    DropTargetDragEvent event){
    }
    public void drop(    DropTargetDropEvent event){
      event.acceptDrop(DnDConstants.ACTION_COPY);
      Transferable transferable=event.getTransferable();
      DataFlavor flavors[]=transferable.getTransferDataFlavors();
      int successful=0;
      for (int i=0; i < flavors.length; i++) {
        try {
          java.util.List list=(java.util.List)transferable.getTransferData(flavors[i]);
          for (int j=0; j < list.size(); j++) {
            Object item=list.get(j);
            if (item instanceof File) {
              File file=(File)item;
              String filename=file.getName();
              if (filename.endsWith(".pde")) {
                String name=filename.substring(0,filename.length() - 4);
                File parent=file.getParentFile();
                if (name.equals(parent.getName())) {
                  handleOpenFile(file);
                  return;
                }
              }
              if (sketch.addFile(file)) {
                successful++;
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (successful == 0) {
        error("No files were added to the sketch.");
      }
 else       if (successful == 1) {
        message("One file added to the sketch.");
      }
 else {
        message(successful + " files added to the sketch.");
      }
    }
  }
);
}
