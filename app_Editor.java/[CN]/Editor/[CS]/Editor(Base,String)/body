{
  super(WINDOW_TITLE);
  this.base=base;
  if (icon == null) {
    try {
      icon=Base.getImage("icon.gif",this);
    }
 catch (    Exception e) {
    }
  }
  if (icon != null) {
    setIconImage(icon);
  }
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      handleQuitInternal();
    }
  }
);
  setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      base.setFrontEditor(this);
    }
  }
);
  PdeKeywords keywords=new PdeKeywords();
  sketchbook=new Sketchbook(this);
  JMenuBar menubar=new JMenuBar();
  menubar.add(buildFileMenu());
  menubar.add(buildEditMenu());
  menubar.add(buildSketchMenu());
  menubar.add(buildToolsMenu());
  menubar.add(buildHelpMenu());
  setJMenuBar(menubar);
  Container contentPain=getContentPane();
  contentPain.setLayout(new BorderLayout());
  JPanel pain=new JPanel();
  pain.setLayout(new BorderLayout());
  contentPain.add(pain,BorderLayout.CENTER);
  Box box=Box.createVerticalBox();
  Box upper=Box.createVerticalBox();
  buttons=new EditorButtons(this);
  upper.add(buttons);
  header=new EditorHeader(this);
  upper.add(header);
  textarea=new JEditTextArea(new PdeTextAreaDefaults());
  textarea.setRightClickPopup(new TextAreaPopup());
  textarea.setHorizontalOffset(6);
  consolePanel=new JPanel();
  consolePanel.setLayout(new BorderLayout());
  status=new EditorStatus(this);
  consolePanel.add(status,BorderLayout.NORTH);
  console=new EditorConsole(this);
  console.setBorder(null);
  consolePanel.add(console,BorderLayout.CENTER);
  lineStatus=new EditorLineStatus(textarea);
  consolePanel.add(lineStatus,BorderLayout.SOUTH);
  upper.add(textarea);
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,upper,consolePanel);
  splitPane.setOneTouchExpandable(true);
  splitPane.setContinuousLayout(true);
  splitPane.setResizeWeight(1D);
  splitPane.setBorder(null);
  int dividerSize=Preferences.getInteger("editor.divider.size");
  if (dividerSize != 0) {
    splitPane.setDividerSize(dividerSize);
  }
  splitPane.setMinimumSize(new Dimension(600,600));
  box.add(splitPane);
  listener=new EditorListener(this,textarea);
  pain.add(box);
  pain.setTransferHandler(new TransferHandler(){
    public boolean canImport(    JComponent dest,    DataFlavor[] flavors){
      return true;
    }
    public boolean importData(    JComponent src,    Transferable transferable){
      DataFlavor[] flavors=transferable.getTransferDataFlavors();
      int successful=0;
      for (int i=0; i < flavors.length; i++) {
        try {
          Object stuff=transferable.getTransferData(flavors[i]);
          if (!(stuff instanceof java.util.List))           continue;
          java.util.List list=(java.util.List)stuff;
          for (int j=0; j < list.size(); j++) {
            Object item=list.get(j);
            if (item instanceof File) {
              File file=(File)item;
              String filename=file.getName();
              if (filename.endsWith(".pde")) {
                String name=filename.substring(0,filename.length() - 4);
                File parent=file.getParentFile();
                if (name.equals(parent.getName())) {
                  Base.handleOpenFile(file);
                  return true;
                }
              }
              if (sketch.addFile(file)) {
                successful++;
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          return false;
        }
      }
      if (successful == 0) {
        error("No files were added to the sketch.");
      }
 else       if (successful == 1) {
        message("One file added to the sketch.");
      }
 else {
        message(successful + " files added to the sketch.");
      }
      return true;
    }
  }
);
  pack();
  restorePreferences();
  handleOpen(path);
  show();
}
