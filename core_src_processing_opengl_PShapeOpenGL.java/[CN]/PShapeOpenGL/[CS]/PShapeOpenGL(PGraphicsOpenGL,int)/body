{
  this.pg=new WeakReference<PGraphicsOpenGL>(pg);
  this.family=family;
  pgl=pg.pgl;
  context=pgl.createEmptyContext();
  bufPolyVertex=null;
  bufPolyColor=null;
  bufPolyNormal=null;
  bufPolyTexcoord=null;
  bufPolyAmbient=null;
  bufPolySpecular=null;
  bufPolyEmissive=null;
  bufPolyShininess=null;
  bufPolyIndex=null;
  bufLineVertex=null;
  bufLineColor=null;
  bufLineAttrib=null;
  bufLineIndex=null;
  bufPointVertex=null;
  bufPointColor=null;
  bufPointAttrib=null;
  bufPointIndex=null;
  this.tessellator=pg.tessellator;
  this.root=this;
  this.parent=null;
  this.tessellated=false;
  if (family == GEOMETRY || family == PRIMITIVE || family == PATH) {
    polyAttribs=PGraphicsOpenGL.newAttributeMap();
    inGeo=PGraphicsOpenGL.newInGeometry(pg,polyAttribs,PGraphicsOpenGL.RETAINED);
  }
  textureMode=pg.textureMode;
  colorMode(pg.colorMode,pg.colorModeX,pg.colorModeY,pg.colorModeZ,pg.colorModeA);
  fill=pg.fill;
  fillColor=pg.fillColor;
  stroke=pg.stroke;
  strokeColor=pg.strokeColor;
  strokeWeight=pg.strokeWeight;
  strokeCap=pg.strokeCap;
  strokeJoin=pg.strokeJoin;
  tint=pg.tint;
  tintColor=pg.tintColor;
  setAmbient=pg.setAmbient;
  ambientColor=pg.ambientColor;
  specularColor=pg.specularColor;
  emissiveColor=pg.emissiveColor;
  shininess=pg.shininess;
  sphereDetailU=pg.sphereDetailU;
  sphereDetailV=pg.sphereDetailV;
  bezierDetail=pg.bezierDetail;
  curveDetail=pg.curveDetail;
  curveTightness=pg.curveTightness;
  rectMode=pg.rectMode;
  ellipseMode=pg.ellipseMode;
  normalX=normalY=0;
  normalZ=1;
  normalMode=NORMAL_MODE_AUTO;
  breakShape=false;
  if (family == GROUP) {
    shapeCreated=true;
  }
  perVertexStyles=true;
}
