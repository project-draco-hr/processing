{
  PGraphics raw=g.getRaw();
  raw.colorMode(RGB);
  raw.noStroke();
  raw.beginShape(TRIANGLES);
  FloatBuffer vertices=tessGeo.polyVertices;
  IntBuffer color=tessGeo.polyColors;
  FloatBuffer uv=tessGeo.polyTexcoords;
  ShortBuffer indices=tessGeo.polyIndices;
  IndexCache cache=tessGeo.polyIndexCache;
  for (int n=firstPolyIndexCache; n <= lastPolyIndexCache; n++) {
    int ioffset=cache.indexOffset[n];
    int icount=cache.indexCount[n];
    int voffset=cache.vertexOffset[n];
    for (int tr=ioffset / 3; tr < (ioffset + icount) / 3; tr++) {
      int i0=voffset + indices.get(3 * tr + 0);
      int i1=voffset + indices.get(3 * tr + 1);
      int i2=voffset + indices.get(3 * tr + 2);
      float[] src0={0,0,0,0};
      float[] src1={0,0,0,0};
      float[] src2={0,0,0,0};
      float[] pt0={0,0,0,0};
      float[] pt1={0,0,0,0};
      float[] pt2={0,0,0,0};
      int argb0=PGL.nativeToJavaARGB(color.get(i0));
      int argb1=PGL.nativeToJavaARGB(color.get(i1));
      int argb2=PGL.nativeToJavaARGB(color.get(i2));
      vertices.position(4 * i0);
      vertices.get(src0,0,4);
      vertices.position(4 * i1);
      vertices.get(src1,0,4);
      vertices.position(4 * i2);
      vertices.get(src2,0,4);
      g.modelview.mult(src0,pt0);
      g.modelview.mult(src1,pt1);
      g.modelview.mult(src2,pt2);
      if (textureImage != null) {
        raw.texture(textureImage);
        float u0=uv.get(2 * i0 + 0);
        float v0=uv.get(2 * i0 + 1);
        float u1=uv.get(2 * i1 + 0);
        float v1=uv.get(2 * i1 + 1);
        float u2=uv.get(2 * i2 + 0);
        float v2=uv.get(2 * i2 + 1);
        if (raw.is3D()) {
          raw.fill(argb0);
          raw.vertex(pt0[X],pt0[Y],pt0[Z],u0,v0);
          raw.fill(argb1);
          raw.vertex(pt1[X],pt1[Y],pt1[Z],u1,v1);
          raw.fill(argb2);
          raw.vertex(pt2[X],pt2[Y],pt2[Z],u2,v2);
        }
 else         if (raw.is2D()) {
          float sx0=g.screenXImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
          float sy0=g.screenYImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
          float sx1=g.screenXImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
          float sy1=g.screenYImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
          float sx2=g.screenXImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
          float sy2=g.screenYImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
          raw.fill(argb0);
          raw.vertex(sx0,sy0,u0,v0);
          raw.fill(argb1);
          raw.vertex(sx1,sy1,u1,v1);
          raw.fill(argb1);
          raw.vertex(sx2,sy2,u2,v2);
        }
      }
 else {
        if (raw.is3D()) {
          raw.fill(argb0);
          raw.vertex(pt0[X],pt0[Y],pt0[Z]);
          raw.fill(argb1);
          raw.vertex(pt1[X],pt1[Y],pt1[Z]);
          raw.fill(argb2);
          raw.vertex(pt2[X],pt2[Y],pt2[Z]);
        }
 else         if (raw.is2D()) {
          float sx0=g.screenXImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
          float sy0=g.screenYImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
          float sx1=g.screenXImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
          float sy1=g.screenYImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
          float sx2=g.screenXImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
          float sy2=g.screenYImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
          raw.fill(argb0);
          raw.vertex(sx0,sy0);
          raw.fill(argb1);
          raw.vertex(sx1,sy1);
          raw.fill(argb2);
          raw.vertex(sx2,sy2);
        }
      }
    }
  }
  raw.endShape();
}
