{
  int size=tessGeo.lineVertexCount;
  int sizef=size * PGL.SIZEOF_FLOAT;
  int sizei=size * PGL.SIZEOF_INT;
  tessGeo.updateLineVerticesBuffer();
  if (glLineVertex == 0)   glLineVertex=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glLineVertex);
  pgl.bufferData(PGL.ARRAY_BUFFER,4 * sizef,tessGeo.lineVerticesBuffer,glUsage);
  tessGeo.updateLineColorsBuffer();
  if (glLineColor == 0)   glLineColor=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glLineColor);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.lineColorsBuffer,glUsage);
  tessGeo.updateLineDirectionsBuffer();
  if (glLineAttrib == 0)   glLineAttrib=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glLineAttrib);
  pgl.bufferData(PGL.ARRAY_BUFFER,4 * sizef,tessGeo.lineDirectionsBuffer,glUsage);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,0);
  tessGeo.updateLineIndicesBuffer();
  if (glLineIndex == 0)   glLineIndex=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,glLineIndex);
  pgl.bufferData(PGL.ELEMENT_ARRAY_BUFFER,tessGeo.lineIndexCount * PGL.SIZEOF_INDEX,tessGeo.lineIndicesBuffer,glUsage);
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,0);
}
