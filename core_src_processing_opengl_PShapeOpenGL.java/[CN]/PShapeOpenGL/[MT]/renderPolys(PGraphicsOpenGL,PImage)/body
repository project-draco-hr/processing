{
  boolean customShader=g.polyShader != null;
  boolean needNormals=customShader ? g.polyShader.accessNormals() : false;
  boolean needTexCoords=customShader ? g.polyShader.accessTexCoords() : false;
  Texture tex=textureImage != null ? g.getTexture(textureImage) : null;
  boolean renderingFill=false, renderingStroke=false;
  PShader shader=null;
  IndexCache cache=tessGeo.polyIndexCache;
  for (int n=firstPolyIndexCache; n <= lastPolyIndexCache; n++) {
    if (is3D() || (tex != null && (firstLineIndexCache == -1 || n < firstLineIndexCache) && (firstPointIndexCache == -1 || n < firstPointIndexCache))) {
      if (!renderingFill) {
        shader=g.getPolyShader(g.lights,tex != null);
        shader.bind();
        renderingFill=true;
      }
    }
 else {
      if (!renderingStroke) {
        if (tex != null) {
          tex.unbind();
          tex=null;
        }
        if (shader != null && shader.bound()) {
          shader.unbind();
        }
        shader=g.getPolyShader(g.lights,false);
        shader.bind();
        renderingFill=false;
        renderingStroke=true;
      }
    }
    int ioffset=cache.indexOffset[n];
    int icount=cache.indexCount[n];
    int voffset=cache.vertexOffset[n];
    shader.setVertexAttribute(root.bufPolyVertex.glId,4,PGL.FLOAT,0,4 * voffset * PGL.SIZEOF_FLOAT);
    shader.setColorAttribute(root.bufPolyColor.glId,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
    if (g.lights) {
      shader.setNormalAttribute(root.bufPolyNormal.glId,3,PGL.FLOAT,0,3 * voffset * PGL.SIZEOF_FLOAT);
      shader.setAmbientAttribute(root.bufPolyAmbient.glId,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setSpecularAttribute(root.bufPolySpecular.glId,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setEmissiveAttribute(root.bufPolyEmissive.glId,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setShininessAttribute(root.bufPolyShininess.glId,1,PGL.FLOAT,0,voffset * PGL.SIZEOF_FLOAT);
    }
    if (g.lights || needNormals) {
      shader.setNormalAttribute(root.bufPolyNormal.glId,3,PGL.FLOAT,0,3 * voffset * PGL.SIZEOF_FLOAT);
    }
    if (tex != null || needTexCoords) {
      shader.setTexcoordAttribute(root.bufPolyTexcoord.glId,2,PGL.FLOAT,0,2 * voffset * PGL.SIZEOF_FLOAT);
      shader.setTexture(tex);
    }
    for (    VertexAttribute attrib : polyAttribs.values()) {
      if (!attrib.active(shader))       continue;
      attrib.bind(pgl);
      shader.setAttributeVBO(attrib.glLoc,attrib.buf.glId,attrib.tessSize,attrib.type,attrib.isColor(),0,attrib.sizeInBytes(voffset));
    }
    shader.draw(root.bufPolyIndex.glId,icount,ioffset);
  }
  for (  VertexAttribute attrib : polyAttribs.values()) {
    if (attrib.active(shader))     attrib.unbind(pgl);
  }
  if (shader != null && shader.bound()) {
    shader.unbind();
  }
}
