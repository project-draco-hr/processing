{
  int size=tessGeo.polyVertexCount;
  int sizef=size * PGL.SIZEOF_FLOAT;
  int sizei=size * PGL.SIZEOF_INT;
  tessGeo.updatePolyVerticesBuffer();
  if (glPolyVertex == 0)   glPolyVertex=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyVertex);
  pgl.bufferData(PGL.ARRAY_BUFFER,4 * sizef,tessGeo.polyVerticesBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolyColorsBuffer();
  if (glPolyColor == 0)   glPolyColor=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyColor);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polyColorsBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolyNormalsBuffer();
  if (glPolyNormal == 0)   glPolyNormal=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyNormal);
  pgl.bufferData(PGL.ARRAY_BUFFER,3 * sizef,tessGeo.polyNormalsBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolyTexCoordsBuffer();
  if (glPolyTexcoord == 0)   glPolyTexcoord=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyTexcoord);
  pgl.bufferData(PGL.ARRAY_BUFFER,2 * sizef,tessGeo.polyTexCoordsBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolyAmbientBuffer();
  if (glPolyAmbient == 0)   glPolyAmbient=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyAmbient);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polyAmbientBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolySpecularBuffer();
  if (glPolySpecular == 0)   glPolySpecular=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolySpecular);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polySpecularBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolyEmissiveBuffer();
  if (glPolyEmissive == 0)   glPolyEmissive=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyEmissive);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polyEmissiveBuffer,PGL.STATIC_DRAW);
  tessGeo.updatePolyShininessBuffer();
  if (glPolyShininess == 0)   glPolyShininess=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyShininess);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizef,tessGeo.polyShininessBuffer,PGL.STATIC_DRAW);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,0);
  tessGeo.updatePolyIndicesBuffer();
  if (glPolyIndex == 0)   glPolyIndex=PGraphicsOpenGL.createVertexBufferObject(context);
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,glPolyIndex);
  pgl.bufferData(PGL.ELEMENT_ARRAY_BUFFER,tessGeo.polyIndexCount * PGL.SIZEOF_INDEX,tessGeo.polyIndicesBuffer,PGL.STATIC_DRAW);
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,0);
}
