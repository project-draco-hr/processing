{
  int size=tessGeo.pointVertexCount;
  int sizef=size * PGL.SIZEOF_FLOAT;
  int sizei=size * PGL.SIZEOF_INT;
  tessGeo.updatePointVerticesBuffer();
  if (glPointVertex == 0)   glPointVertex=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPointVertex);
  pgl.bufferData(PGL.ARRAY_BUFFER,4 * sizef,tessGeo.pointVerticesBuffer,glUsage);
  tessGeo.updatePointColorsBuffer();
  if (glPointColor == 0)   glPointColor=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPointColor);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.pointColorsBuffer,glUsage);
  tessGeo.updatePointOffsetsBuffer();
  if (glPointAttrib == 0)   glPointAttrib=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPointAttrib);
  pgl.bufferData(PGL.ARRAY_BUFFER,2 * sizef,tessGeo.pointOffsetsBuffer,glUsage);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,0);
  tessGeo.updatePointIndicesBuffer();
  if (glPointIndex == 0)   glPointIndex=PGraphicsOpenGL.createVertexBufferObject(context,pgl);
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,glPointIndex);
  pgl.bufferData(PGL.ELEMENT_ARRAY_BUFFER,tessGeo.pointIndexCount * PGL.SIZEOF_INDEX,tessGeo.pointIndicesBuffer,glUsage);
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,0);
}
