{
  updateTessellation();
  FloatBuffer vertices=tessGeo.polyVertices;
  FloatBuffer normals=tessGeo.polyNormals;
  IntBuffer color=tessGeo.polyColors;
  FloatBuffer uv=tessGeo.polyTexcoords;
  ShortBuffer indices=tessGeo.polyIndices;
  PShape tess;
  if (is3D()) {
    tess=PGraphics3D.createShapeImpl(pg.parent,TRIANGLES);
  }
 else   if (is2D()) {
    tess=PGraphics2D.createShapeImpl(pg.parent,TRIANGLES);
  }
 else {
    PGraphics.showWarning("This shape is not either 2D or 3D!");
    return null;
  }
  tess.noStroke();
  IndexCache cache=tessGeo.polyIndexCache;
  for (int n=firstPolyIndexCache; n <= lastPolyIndexCache; n++) {
    int ioffset=cache.indexOffset[n];
    int icount=cache.indexCount[n];
    int voffset=cache.vertexOffset[n];
    for (int tr=ioffset / 3; tr < (ioffset + icount) / 3; tr++) {
      int i0=voffset + indices.get(3 * tr + 0);
      int i1=voffset + indices.get(3 * tr + 1);
      int i2=voffset + indices.get(3 * tr + 2);
      if (is3D()) {
        float x0=vertices.get(4 * i0 + 0);
        float y0=vertices.get(4 * i0 + 1);
        float z0=vertices.get(4 * i0 + 2);
        float x1=vertices.get(4 * i1 + 0);
        float y1=vertices.get(4 * i1 + 1);
        float z1=vertices.get(4 * i1 + 2);
        float x2=vertices.get(4 * i2 + 0);
        float y2=vertices.get(4 * i2 + 1);
        float z2=vertices.get(4 * i2 + 2);
        float nx0=normals.get(3 * i0 + 0);
        float ny0=normals.get(3 * i0 + 1);
        float nz0=normals.get(3 * i0 + 2);
        float nx1=normals.get(3 * i1 + 0);
        float ny1=normals.get(3 * i1 + 1);
        float nz1=normals.get(3 * i1 + 2);
        float nx2=normals.get(3 * i2 + 0);
        float ny2=normals.get(3 * i2 + 1);
        float nz2=normals.get(3 * i2 + 2);
        float u0=uv.get(2 * i0 + 0);
        float v0=uv.get(2 * i0 + 1);
        float u1=uv.get(2 * i1 + 0);
        float v1=uv.get(2 * i1 + 1);
        float u2=uv.get(2 * i2 + 0);
        float v2=uv.get(2 * i2 + 1);
        int argb0=PGL.nativeToJavaARGB(color.get(i0));
        int argb1=PGL.nativeToJavaARGB(color.get(i1));
        int argb2=PGL.nativeToJavaARGB(color.get(i2));
        tess.fill(argb0);
        tess.normal(nx0,ny0,nz0);
        tess.vertex(x0,y0,z0,u0,v0);
        tess.fill(argb1);
        tess.normal(nx1,ny1,nz1);
        tess.vertex(x1,y1,z1,u1,v1);
        tess.fill(argb2);
        tess.normal(nx2,ny2,nz2);
        tess.vertex(x2,y2,z2,u2,v2);
      }
 else       if (is2D()) {
        float x0=vertices.get(4 * i0 + 0), y0=vertices.get(4 * i0 + 1);
        float x1=vertices.get(4 * i1 + 0), y1=vertices.get(4 * i1 + 1);
        float x2=vertices.get(4 * i2 + 0), y2=vertices.get(4 * i2 + 1);
        float u0=uv.get(2 * i0 + 0);
        float v0=uv.get(2 * i0 + 1);
        float u1=uv.get(2 * i1 + 0);
        float v1=uv.get(2 * i1 + 1);
        float u2=uv.get(2 * i2 + 0);
        float v2=uv.get(2 * i2 + 1);
        int argb0=PGL.nativeToJavaARGB(color.get(i0));
        int argb1=PGL.nativeToJavaARGB(color.get(i1));
        int argb2=PGL.nativeToJavaARGB(color.get(i2));
        tess.fill(argb0);
        tess.vertex(x0,y0,u0,v0);
        tess.fill(argb1);
        tess.vertex(x1,y1,u1,v1);
        tess.fill(argb2);
        tess.vertex(x2,y2,u2,v2);
      }
    }
  }
  tess.end();
  return tess;
}
