{
  float xc=25;
  int timeDisplacement=frameCount;
  float calculation1=sin(radians(timeDisplacement * 0.61655617f));
  float calculation2=sin(radians(timeDisplacement * -3.6352262f));
  pg.beginDraw();
  pg.loadPixels();
  for (int x=0; x < pg.width; x++, xc+=pixelSize) {
    float yc=25;
    float s1=128 + 128 * sin(radians(xc) * calculation1);
    for (int y=0; y < pg.height; y++, yc+=pixelSize) {
      float s2=128 + 128 * sin(radians(yc) * calculation2);
      float s3=128 + 128 * sin(radians((xc + yc + timeDisplacement * 5) / 2));
      float s=(s1 + s2 + s3) / 3;
      pg.pixels[x + y * pg.width]=color(s,255 - s / 2.0f,255);
    }
  }
  pg.updatePixels();
  pg.endDraw();
  image(pg,0,0,width,height);
}
