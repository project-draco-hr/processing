{
  this.m00=LinePath.FloatToS15_16(transform.m00);
  this.m01=LinePath.FloatToS15_16(transform.m01);
  this.m10=LinePath.FloatToS15_16(transform.m10);
  this.m11=LinePath.FloatToS15_16(transform.m11);
  this.lineWidth=lineWidth;
  this.lineWidth2=lineWidth >> 1;
  this.scaledLineWidth2=((long)m00 * lineWidth2) >> 16;
  this.capStyle=capStyle;
  this.joinStyle=joinStyle;
  this.miterLimit=miterLimit;
  this.m00_2_m01_2=(double)m00 * m00 + (double)m01 * m01;
  this.m10_2_m11_2=(double)m10 * m10 + (double)m11 * m11;
  this.m00_m10_m01_m11=(double)m00 * m10 + (double)m01 * m11;
  double dm00=m00 / 65536.0;
  double dm01=m01 / 65536.0;
  double dm10=m10 / 65536.0;
  double dm11=m11 / 65536.0;
  double determinant=dm00 * dm11 - dm01 * dm10;
  if (joinStyle == LinePath.JOIN_MITER) {
    double limit=(miterLimit / 65536.0) * (lineWidth2 / 65536.0) * determinant;
    double limitSq=limit * limit;
    this.miterLimitSq=(long)(limitSq * 65536.0 * 65536.0);
  }
  this.numPenSegments=(int)(3.14159f * lineWidth / 65536.0f);
  if (pen_dx == null || pen_dx.length < numPenSegments) {
    this.pen_dx=new int[numPenSegments];
    this.pen_dy=new int[numPenSegments];
    this.penIncluded=new boolean[numPenSegments];
    this.join=new int[2 * numPenSegments];
  }
  for (int i=0; i < numPenSegments; i++) {
    double r=lineWidth / 2.0;
    double theta=(double)i * 2.0 * Math.PI / numPenSegments;
    double cos=Math.cos(theta);
    double sin=Math.sin(theta);
    pen_dx[i]=(int)(r * (dm00 * cos + dm01 * sin));
    pen_dy[i]=(int)(r * (dm10 * cos + dm11 * sin));
  }
  prev=LinePath.SEG_CLOSE;
  rindex=0;
  started=false;
  lineToOrigin=false;
}
