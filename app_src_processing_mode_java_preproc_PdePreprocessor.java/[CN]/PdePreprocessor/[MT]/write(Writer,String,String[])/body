{
  final ArrayList<String> programImports=new ArrayList<String>();
  final ArrayList<String> codeFolderImports=new ArrayList<String>();
  foundMethods=new HashMap<String,Object>();
  if (!program.endsWith("\n")) {
    program+="\n";
  }
  checkForUnterminatedMultilineComment(program);
  if (Preferences.getBoolean("preproc.substitute_unicode")) {
    program=substituteUnicode(program);
  }
  final String importRegexp="((?:^|;)\\s*)(import\\s+)((?:static\\s+)?\\S+)(\\s*;)";
  final Pattern importPattern=Pattern.compile(importRegexp);
  String scrubbed=scrubComments(program);
  Matcher m=null;
  int offset=0;
  boolean found=false;
  do {
    m=importPattern.matcher(scrubbed);
    found=m.find(offset);
    if (found) {
      String before=m.group(1);
      String piece=m.group(2) + m.group(3) + m.group(4);
      if (!ignoreImport(m.group(3))) {
        programImports.add(m.group(3));
      }
      int start=m.start() + before.length();
      int stop=start + piece.length();
      program=program.substring(0,start) + program.substring(stop);
      scrubbed=scrubbed.substring(0,start) + scrubbed.substring(stop);
      offset=m.start();
    }
  }
 while (found);
  if (codeFolderPackages != null) {
    for (    String item : codeFolderPackages) {
      codeFolderImports.add(item + ".*");
    }
  }
  final PrintWriter stream=new PrintWriter(out);
  final int headerOffset=writeImports(stream,programImports,codeFolderImports);
  return new PreprocessorResult(mode,headerOffset + 2,write(program,stream),programImports);
}
