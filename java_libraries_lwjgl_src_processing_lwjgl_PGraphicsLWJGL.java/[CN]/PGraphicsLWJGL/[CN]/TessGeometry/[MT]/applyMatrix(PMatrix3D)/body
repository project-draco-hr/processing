{
  float[] vec0=new float[3];
  float[] vec1=new float[3];
  if (0 < fillVertexCount) {
    for (int i=0; i < fillVertexCount; i++) {
      fillVertices.position(3 * i);
      fillVertices.get(vec0);
      vec1[0]=vec0[0] * tr.m00 + vec0[1] * tr.m01 + vec0[2] * tr.m02 + tr.m03;
      vec1[1]=vec0[0] * tr.m10 + vec0[1] * tr.m11 + vec0[2] * tr.m12 + tr.m13;
      vec1[2]=vec0[0] * tr.m20 + vec0[1] * tr.m21 + vec0[2] * tr.m22 + tr.m23;
      fillVertices.position(3 * i);
      fillVertices.put(vec1);
      fillNormals.position(3 * i);
      fillNormals.get(vec0);
      vec1[0]=vec0[0] * tr.m00 + vec0[1] * tr.m01 + vec0[2] * tr.m02;
      vec1[1]=vec0[0] * tr.m10 + vec0[1] * tr.m11 + vec0[2] * tr.m12;
      vec1[2]=vec0[0] * tr.m20 + vec0[1] * tr.m21 + vec0[2] * tr.m22;
      fillNormals.position(3 * i);
      fillNormals.put(vec1);
    }
  }
  if (0 < lineVertexCount) {
    for (int i=0; i < lineVertexCount; i++) {
      lineVertices.position(3 * i);
      lineVertices.get(vec0);
      vec1[0]=vec0[0] * tr.m00 + vec0[1] * tr.m01 + vec0[2] * tr.m02;
      vec1[1]=vec0[0] * tr.m10 + vec0[1] * tr.m11 + vec0[2] * tr.m12;
      vec1[2]=vec0[0] * tr.m20 + vec0[1] * tr.m21 + vec0[2] * tr.m22;
      lineVertices.position(3 * i);
      lineVertices.put(vec1);
      lineDirWidths.position(4 * i);
      lineDirWidths.get(vec0);
      vec1[0]=vec0[0] * tr.m00 + vec0[1] * tr.m01 + vec0[2] * tr.m02;
      vec1[1]=vec0[0] * tr.m10 + vec0[1] * tr.m11 + vec0[2] * tr.m12;
      vec1[2]=vec0[0] * tr.m20 + vec0[1] * tr.m21 + vec0[2] * tr.m22;
      lineDirWidths.position(4 * i);
      lineDirWidths.put(vec1,0,3);
    }
  }
  if (0 < pointVertexCount) {
    for (int i=0; i < pointVertexCount; i++) {
      pointVertices.position(3 * i);
      pointVertices.get(vec0);
      vec1[0]=vec0[0] * tr.m00 + vec0[1] * tr.m01 + vec0[2] * tr.m02;
      vec1[1]=vec0[0] * tr.m10 + vec0[1] * tr.m11 + vec0[2] * tr.m12;
      vec1[2]=vec0[0] * tr.m20 + vec0[1] * tr.m21 + vec0[2] * tr.m22;
      pointVertices.position(3 * i);
      pointVertices.put(vec1);
    }
  }
}
