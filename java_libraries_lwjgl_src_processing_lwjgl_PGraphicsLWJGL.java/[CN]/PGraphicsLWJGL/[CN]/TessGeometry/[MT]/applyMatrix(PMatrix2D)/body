{
  float[] vert0=new float[2];
  float[] vert1=new float[2];
  if (0 < fillVertexCount) {
    int index;
    for (int i=0; i < fillVertexCount; i++) {
      index=3 * i;
      fillVertices.position(3 * i);
      fillVertices.get(vert0,0,2);
      index=3 * i;
      vert1[0]=vert0[0] * tr.m00 + vert0[1] * tr.m01 + tr.m02;
      vert1[1]=vert0[0] * tr.m10 + vert0[1] * tr.m11 + tr.m12;
      fillVertices.position(3 * i);
      fillVertices.put(vert1,0,2);
      index=3 * i;
      fillNormals.position(3 * i);
      fillNormals.get(vert0,0,2);
      vert1[0]=vert0[0] * tr.m00 + vert0[1] * tr.m01 + tr.m02;
      vert1[1]=vert0[0] * tr.m10 + vert0[1] * tr.m11 + tr.m12;
      index=3 * i;
      fillNormals.position(3 * i);
      fillNormals.put(vert1,0,2);
    }
  }
  if (0 < lineVertexCount) {
    int index;
    for (int i=0; i < lineVertexCount; i++) {
      index=3 * i;
      lineVertices.position(3 * i);
      lineVertices.get(vert0,0,2);
      index=3 * i;
      vert1[0]=vert0[0] * tr.m00 + vert0[1] * tr.m01 + tr.m02;
      vert1[1]=vert0[0] * tr.m10 + vert0[1] * tr.m11 + tr.m12;
      lineVertices.position(3 * i);
      lineVertices.put(vert1,0,2);
      index=4 * i;
      lineDirWidths.position(4 * i);
      lineDirWidths.get(vert0,0,2);
      index=4 * i;
      vert1[0]=vert0[0] * tr.m00 + vert0[1] * tr.m01 + tr.m02;
      vert1[1]=vert0[0] * tr.m10 + vert0[1] * tr.m11 + tr.m12;
      lineDirWidths.position(4 * i);
      lineDirWidths.put(vert1,0,2);
    }
  }
  if (0 < pointVertexCount) {
    int index;
    for (int i=0; i < pointVertexCount; i++) {
      index=3 * i;
      pointVertices.position(3 * i);
      pointVertices.get(vert0,0,2);
      index=3 * i;
      vert1[0]=vert0[0] * tr.m00 + vert0[1] * tr.m01 + tr.m02;
      vert1[1]=vert0[0] * tr.m10 + vert0[1] * tr.m11 + tr.m12;
      pointVertices.position(3 * i);
      pointVertices.put(vert1,0,2);
    }
  }
}
