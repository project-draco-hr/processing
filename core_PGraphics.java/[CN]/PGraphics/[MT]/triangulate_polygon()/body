{
  float area=0.0f;
  for (int p=vertex_end - 1, q=vertex_start; q < vertex_end; p=q++) {
    area+=(vertices[q][X] * vertices[p][Y] - vertices[p][X] * vertices[q][Y]);
  }
  int j=0;
  if (0.0f < area) {
    for (int i=vertex_start; i < vertex_end; i++) {
      j=i - vertex_start;
      vertex_order[j]=i;
    }
  }
 else {
    for (int i=vertex_start; i < vertex_end; i++) {
      j=i - vertex_start;
      vertex_order[j]=(vertex_end - 1) - j;
    }
  }
  int vc=vertex_end - vertex_start;
  int count=2 * vc;
  for (int m=0, v=vc - 1; vc > 2; ) {
    boolean snip=true;
    if (0 >= (count--)) {
      break;
    }
    int u=v;
    if (vc <= u)     u=0;
    v=u + 1;
    if (vc <= v)     v=0;
    int w=v + 1;
    if (vc <= w)     w=0;
    float Ax, Ay, Bx, By, Cx, Cy, Px, Py;
    Ax=-vertices[vertex_order[u]][X];
    Ay=vertices[vertex_order[u]][Y];
    Bx=-vertices[vertex_order[v]][X];
    By=vertices[vertex_order[v]][Y];
    Cx=-vertices[vertex_order[w]][X];
    Cy=vertices[vertex_order[w]][Y];
    if (EPSILON > (((Bx - Ax) * (Cy - Ay)) - ((By - Ay) * (Cx - Ax)))) {
      continue;
    }
    for (int p=0; p < vc; p++) {
      float ax, ay, bx, by, cx, cy, apx, apy, bpx, bpy, cpx, cpy;
      float cCROSSap, bCROSScp, aCROSSbp;
      if ((p == u) || (p == v) || (p == w)) {
        continue;
      }
      Px=-vertices[vertex_order[p]][X];
      Py=vertices[vertex_order[p]][Y];
      ax=Cx - Bx;
      ay=Cy - By;
      bx=Ax - Cx;
      by=Ay - Cy;
      cx=Bx - Ax;
      cy=By - Ay;
      apx=Px - Ax;
      apy=Py - Ay;
      bpx=Px - Bx;
      bpy=Py - By;
      cpx=Px - Cx;
      cpy=Py - Cy;
      aCROSSbp=ax * bpy - ay * bpx;
      cCROSSap=cx * apy - cy * apx;
      bCROSScp=bx * cpy - by * cpx;
      if ((aCROSSbp >= 0.0f) && (bCROSScp >= 0.0f) && (cCROSSap >= 0.0f)) {
        snip=false;
      }
    }
    if (snip) {
      int a, b, c, s, t;
      a=vertex_order[u];
      b=vertex_order[v];
      c=vertex_order[w];
      addTriangle(a,b,c);
      m++;
      for (s=v, t=v + 1; t < vc; s++, t++) {
        vertex_order[s]=vertex_order[t];
      }
      vc--;
      count=2 * vc;
    }
  }
}
