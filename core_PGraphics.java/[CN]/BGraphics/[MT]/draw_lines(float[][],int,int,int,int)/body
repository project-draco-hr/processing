{
  if (strokeWeight < 2) {
    for (int i=0; i < max; i+=increment) {
      if ((skip != 0) && (((i + offset) % skip) == 0))       continue;
      float a[]=vertices[i];
      float b[]=vertices[i + offset];
      line.reset();
      line.setIntensities(a[SR],a[SG],a[SB],a[SA],b[SR],b[SG],b[SB],b[SA]);
      line.setVertices(a[X],a[Y],a[Z],b[X],b[Y],b[Z]);
      line.draw();
    }
  }
 else {
    if ((dimensions != 3) && unchangedZ) {
      if ((strokeWeight < TWO) && !lighting && !strokeChanged) {
        for (int i=0; i < max; i+=increment) {
          if ((skip != 0) && (((i + offset) % skip) == 0))           continue;
          thin_flat_line((int)vertices[i][X],(int)vertices[i][Y],(int)vertices[i + offset][X],(int)vertices[i + offset][Y]);
        }
      }
 else {
        for (int i=0; i < max; i+=increment) {
          if ((skip != 0) && (((i + offset) % skip) == 0))           continue;
          float v1[]=vertices[i];
          float v2[]=vertices[i + offset];
          thick_flat_line(v1[X],v1[Y],v1[SR],v1[SG],v1[SB],v1[SA],v2[X],v2[Y],v2[SR],v2[SG],v2[SB],v2[SA]);
        }
      }
    }
 else {
      for (int i=0; i < max; i+=increment) {
        if ((skip != 0) && (((i + offset) % skip) == 0))         continue;
        float v1[]=vertices[i];
        float v2[]=vertices[i + offset];
        spatial_line(v1[X],v1[Y],v1[Z],v1[SR],v1[SG],v1[SB],v2[X],v2[Y],v2[Z],v2[SR],v2[SG],v2[SB]);
      }
    }
  }
}
