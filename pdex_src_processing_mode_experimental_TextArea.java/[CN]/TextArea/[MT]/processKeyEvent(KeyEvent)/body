{
  if (Base.isMacOS() && evt.isControlDown())   System.out.println("Ctrl down: " + evt);
  if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
    if (suggestion != null) {
      if (suggestion.isVisible()) {
        log("esc key");
        hideSuggestion();
        evt.consume();
        return;
      }
    }
  }
 else   if (evt.getKeyCode() == KeyEvent.VK_ENTER && evt.getID() == KeyEvent.KEY_PRESSED) {
    if (suggestion != null) {
      if (suggestion.isVisible()) {
        if (suggestion.insertSelection()) {
          evt.consume();
          if (suggestion.isVisible())           prepareSuggestions(evt);
          return;
        }
      }
    }
  }
  if (evt.getID() == KeyEvent.KEY_PRESSED) {
switch (evt.getKeyCode()) {
case KeyEvent.VK_DOWN:
      if (suggestion != null)       if (suggestion.isVisible()) {
        suggestion.moveDown();
        return;
      }
    break;
case KeyEvent.VK_UP:
  if (suggestion != null)   if (suggestion.isVisible()) {
    suggestion.moveUp();
    return;
  }
break;
case KeyEvent.VK_BACK_SPACE:
log("BK Key");
break;
case KeyEvent.VK_SPACE:
if (suggestion != null) if (suggestion.isVisible()) {
log("Space bar, hide completion list");
suggestion.hide();
}
break;
default :
break;
}
}
super.processKeyEvent(evt);
if (editor.hasJavaTabs) return;
if (evt.getID() == KeyEvent.KEY_TYPED) {
char keyChar=evt.getKeyChar();
if (keyChar == KeyEvent.VK_ENTER || keyChar == KeyEvent.VK_ESCAPE || keyChar == KeyEvent.VK_TAB || keyChar == KeyEvent.CHAR_UNDEFINED) {
return;
}
 else if (keyChar == ')') {
hideSuggestion();
return;
}
final KeyEvent evt2=evt;
if (keyChar == ' ') {
if (ExperimentalMode.ccTriggerEnabled && (evt.isControlDown() || evt.isMetaDown())) {
SwingWorker<Object,Object> worker=new SwingWorker<Object,Object>(){
protected Object doInBackground() throws Exception {
if (ExperimentalMode.codeCompletionsEnabled && ExperimentalMode.ccTriggerEnabled) {
getDocument().remove(getCaretPosition() - 1,1);
log("[KeyEvent]" + evt2.getKeyChar() + "  |Prediction started");
log("Typing: " + fetchPhrase(evt2));
}
return null;
}
}
;
worker.execute();
}
 else {
hideSuggestion();
}
return;
}
prepareSuggestions(evt2);
}
}
