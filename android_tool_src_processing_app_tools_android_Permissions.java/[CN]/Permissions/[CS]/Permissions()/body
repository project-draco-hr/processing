{
  super("Android Permissions Selector");
  permissionList=new CheckBoxList();
  permissionList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting() == false) {
        int index=permissionList.getSelectedIndex();
        if (index == -1) {
          descriptionLabel.setText("");
        }
 else {
          descriptionLabel.setText("<html>" + description[index] + "</html>");
        }
      }
    }
  }
);
  permissionList.setFixedCellHeight(20);
  permissionList.setBorder(new EmptyBorder(BORDER_VERT,BORDER_HORIZ,BORDER_VERT,BORDER_HORIZ));
  DefaultListModel model=new DefaultListModel();
  permissionList.setModel(model);
  for (  String item : title) {
    model.addElement(new JCheckBox(item));
  }
  permissionScroller=new JScrollPane(permissionList,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  permissionList.setVisibleRowCount(12);
  permissionList.addKeyListener(new KeyAdapter(){
    public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == ' ') {
        int index=permissionList.getSelectedIndex();
        JCheckBox checkbox=(JCheckBox)permissionList.getModel().getElementAt(index);
        checkbox.setSelected(!checkbox.isSelected());
        permissionList.repaint();
      }
    }
  }
);
  Container outer=getContentPane();
  Box pain=Box.createVerticalBox();
  pain.setBorder(new EmptyBorder(13,13,13,13));
  outer.add(pain);
  String labelText="<html>" + "Android applications must specifically ask for permission\n" + "to do things like connect to the internet, write a file,\n"+ "or make phone calls. When installing your application,\n"+ "users will be asked whether they want to allow such access.\n"+ "More about permissions can be found "+ "<a href=\"" + GUIDE_URL + "\">here</a>.</body></html>";
  JLabel textarea=new JLabel(labelText);
  textarea.setPreferredSize(new Dimension(400,100));
  textarea.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      Base.openURL(GUIDE_URL);
    }
  }
);
  textarea.setAlignmentX(LEFT_ALIGNMENT);
  pain.add(textarea);
  permissionScroller.setAlignmentX(LEFT_ALIGNMENT);
  pain.add(permissionScroller);
  pain.add(Box.createVerticalStrut(8));
  descriptionLabel=new JLabel();
  descriptionLabel.setPreferredSize(new Dimension(400,50));
  descriptionLabel.setVerticalAlignment(JLabel.TOP);
  descriptionLabel.setAlignmentX(LEFT_ALIGNMENT);
  pain.add(descriptionLabel);
  pain.add(Box.createVerticalStrut(8));
  JPanel buttons=new JPanel();
  buttons.setAlignmentX(LEFT_ALIGNMENT);
  JButton okButton=new JButton("OK");
  Dimension dim=new Dimension(Preferences.BUTTON_WIDTH,okButton.getPreferredSize().height);
  okButton.setPreferredSize(dim);
  okButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      saveSelections();
      setVisible(false);
    }
  }
);
  okButton.setEnabled(true);
  JButton cancelButton=new JButton("Cancel");
  cancelButton.setPreferredSize(dim);
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setVisible(false);
    }
  }
);
  cancelButton.setEnabled(true);
  if (Base.isMacOS()) {
    buttons.add(cancelButton);
    buttons.add(okButton);
  }
 else {
    buttons.add(okButton);
    buttons.add(cancelButton);
  }
  pain.add(buttons);
  JRootPane root=getRootPane();
  root.setDefaultButton(okButton);
  ActionListener disposer=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      setVisible(false);
    }
  }
;
  Base.registerWindowCloseKeys(root,disposer);
  Base.setIcon(this);
  pack();
  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension windowSize=getSize();
  setLocation((screen.width - windowSize.width) / 2,(screen.height - windowSize.height) / 2);
}
