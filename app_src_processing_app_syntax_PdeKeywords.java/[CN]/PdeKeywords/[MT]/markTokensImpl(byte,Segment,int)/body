{
  char[] array=line.array;
  int offset=line.offset;
  MarkerState ms=new MarkerState(offset);
  int mlength=offset + line.count;
  boolean backslash=false;
  loop:   for (int i=offset; i < mlength; i++) {
    int i1=(i + 1);
    char c=array[i];
    if (c == '\\') {
      backslash=!backslash;
      continue;
    }
switch (token) {
case Token.NULL:
switch (c) {
case '#':
        if (backslash)         backslash=false;
      break;
case '"':
    doKeyword(ms,line,i,c);
  if (backslash)   backslash=false;
 else {
    addToken(i - ms.lastOffset,token);
    token=Token.LITERAL1;
    ms.lastOffset=ms.lastKeyword=i;
  }
break;
case '\'':
doKeyword(ms,line,i,c);
if (backslash) backslash=false;
 else {
addToken(i - ms.lastOffset,token);
token=Token.LITERAL2;
ms.lastOffset=ms.lastKeyword=i;
}
break;
case ':':
if (ms.lastKeyword == offset) {
if (doKeyword(ms,line,i,c)) break;
backslash=false;
addToken(i1 - ms.lastOffset,Token.LABEL);
ms.lastOffset=ms.lastKeyword=i1;
}
 else if (doKeyword(ms,line,i,c)) break;
break;
case '/':
backslash=false;
doKeyword(ms,line,i,c);
if (mlength - i > 1) {
switch (array[i1]) {
case '*':
addToken(i - ms.lastOffset,token);
ms.lastOffset=ms.lastKeyword=i;
if (mlength - i > 2 && array[i + 2] == '*') token=Token.COMMENT2;
 else token=Token.COMMENT1;
break;
case '/':
addToken(i - ms.lastOffset,token);
addToken(mlength - i,Token.COMMENT1);
ms.lastOffset=ms.lastKeyword=mlength;
break loop;
}
if (array[i1] != ' ') {
i++;
}
}
break;
default :
backslash=false;
if (!Character.isLetterOrDigit(c) && c != '_') {
doKeyword(ms,line,i,c);
}
break;
}
break;
case Token.COMMENT1:
case Token.COMMENT2:
backslash=false;
if (c == '*' && mlength - i > 1) {
if (array[i1] == '/') {
i++;
addToken((i + 1) - ms.lastOffset,token);
token=Token.NULL;
ms.lastOffset=ms.lastKeyword=i + 1;
}
}
break;
case Token.LITERAL1:
if (backslash) backslash=false;
 else if (c == '"') {
addToken(i1 - ms.lastOffset,token);
token=Token.NULL;
ms.lastOffset=ms.lastKeyword=i1;
}
break;
case Token.LITERAL2:
if (backslash) backslash=false;
 else if (c == '\'') {
addToken(i1 - ms.lastOffset,Token.LITERAL1);
token=Token.NULL;
ms.lastOffset=ms.lastKeyword=i1;
}
break;
default :
throw new InternalError("Invalid state: " + token);
}
}
if (token == Token.NULL) {
doKeyword(ms,line,mlength,'\0');
}
switch (token) {
case Token.LITERAL1:
case Token.LITERAL2:
addToken(mlength - ms.lastOffset,Token.INVALID);
token=Token.NULL;
break;
case Token.KEYWORD2:
addToken(mlength - ms.lastOffset,token);
if (!backslash) token=Token.NULL;
addToken(mlength - ms.lastOffset,token);
break;
default :
addToken(mlength - ms.lastOffset,token);
break;
}
return token;
}
