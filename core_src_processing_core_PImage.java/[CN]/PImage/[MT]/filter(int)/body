{
  loadPixels();
switch (kind) {
case BLUR:
    filter(BLUR,1);
  break;
case GRAY:
for (int i=0; i < pixels.length; i++) {
  int col=pixels[i];
  int lum=(77 * (col >> 16 & 0xff) + 151 * (col >> 8 & 0xff) + 28 * (col & 0xff)) >> 8;
  pixels[i]=(col & ALPHA_MASK) | lum << 16 | lum << 8 | lum;
}
break;
case INVERT:
for (int i=0; i < pixels.length; i++) {
pixels[i]^=0xffffff;
}
break;
case POSTERIZE:
throw new RuntimeException("Use filter(POSTERIZE, int levels) " + "instead of filter(POSTERIZE)");
case RGB:
for (int i=0; i < pixels.length; i++) {
pixels[i]|=0xff000000;
}
format=RGB;
break;
case THRESHOLD:
filter(THRESHOLD,0.5f);
break;
case ERODE:
dilate(true);
break;
case DILATE:
dilate(false);
break;
}
updatePixels();
}
