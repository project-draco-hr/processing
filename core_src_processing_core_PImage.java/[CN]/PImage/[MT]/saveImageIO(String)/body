{
  try {
    Class bufferedImageClass=Class.forName("java.awt.image.BufferedImage");
    Constructor bufferedImageConstructor=bufferedImageClass.getConstructor(new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE});
    Field typeIntRgbField=bufferedImageClass.getField("TYPE_INT_RGB");
    int typeIntRgb=typeIntRgbField.getInt(typeIntRgbField);
    Field typeIntArgbField=bufferedImageClass.getField("TYPE_INT_ARGB");
    int typeIntArgb=typeIntArgbField.getInt(typeIntArgbField);
    Object bimage=bufferedImageConstructor.newInstance(new Object[]{new Integer(width),new Integer(height),new Integer((format == ARGB) ? typeIntArgb : typeIntRgb)});
    Method setRgbMethod=bufferedImageClass.getMethod("setRGB",new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE,Integer.TYPE,pixels.getClass(),Integer.TYPE,Integer.TYPE});
    setRgbMethod.invoke(bimage,new Object[]{new Integer(0),new Integer(0),new Integer(width),new Integer(height),pixels,new Integer(0),new Integer(width)});
    File file=new File(path);
    String extension=path.substring(path.lastIndexOf('.') + 1);
    Class renderedImageClass=Class.forName("java.awt.image.RenderedImage");
    Class ioClass=Class.forName("javax.imageio.ImageIO");
    Method writeMethod=ioClass.getMethod("write",new Class[]{renderedImageClass,String.class,File.class});
    writeMethod.invoke(null,new Object[]{bimage,extension,file});
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException("image save failed.");
  }
}
