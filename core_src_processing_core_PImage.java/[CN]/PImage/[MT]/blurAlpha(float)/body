{
  int sum, cb;
  int read, ri, ym, ymi, bk0;
  int b2[]=new int[pixels.length];
  int yi=0;
  buildBlurKernel(r);
  for (int y=0; y < pixelHeight; y++) {
    for (int x=0; x < pixelWidth; x++) {
      cb=sum=0;
      read=x - blurRadius;
      if (read < 0) {
        bk0=-read;
        read=0;
      }
 else {
        if (read >= pixelWidth)         break;
        bk0=0;
      }
      for (int i=bk0; i < blurKernelSize; i++) {
        if (read >= pixelWidth)         break;
        int c=pixels[read + yi];
        int[] bm=blurMult[i];
        cb+=bm[c & BLUE_MASK];
        sum+=blurKernel[i];
        read++;
      }
      ri=yi + x;
      b2[ri]=cb / sum;
    }
    yi+=pixelWidth;
  }
  yi=0;
  ym=-blurRadius;
  ymi=ym * pixelWidth;
  for (int y=0; y < pixelHeight; y++) {
    for (int x=0; x < pixelWidth; x++) {
      cb=sum=0;
      if (ym < 0) {
        bk0=ri=-ym;
        read=x;
      }
 else {
        if (ym >= pixelHeight)         break;
        bk0=0;
        ri=ym;
        read=x + ymi;
      }
      for (int i=bk0; i < blurKernelSize; i++) {
        if (ri >= pixelHeight)         break;
        int[] bm=blurMult[i];
        cb+=bm[b2[read]];
        sum+=blurKernel[i];
        ri++;
        read+=pixelWidth;
      }
      pixels[x + yi]=(cb / sum);
    }
    yi+=pixelWidth;
    ymi+=pixelWidth;
    ym++;
  }
}
