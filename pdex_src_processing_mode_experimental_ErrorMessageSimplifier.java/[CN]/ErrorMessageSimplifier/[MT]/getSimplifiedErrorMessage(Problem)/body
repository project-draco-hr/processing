{
  if (problem == null)   return null;
  IProblem iprob=problem.getIProblem();
  String args[]=iprob.getArguments();
  log("Simplifying message: " + problem.getMessage() + " ID: "+ getIDName(iprob.getID()));
  log("Arg count: " + args.length);
  for (int i=0; i < args.length; i++) {
    log("Arg " + args[i]);
  }
  String result=null;
switch (iprob.getID()) {
case IProblem.ParsingError:
    if (args.length > 0) {
      if (problem.getMessage().endsWith("expected")) {
        result="Probably a \"" + args[args.length - 1] + "\" should go here";
      }
 else {
        result="Problem with code syntax: Consider removing \"" + args[0] + "\"";
      }
    }
  break;
case IProblem.ParsingErrorInsertToComplete:
if (args.length > 0) {
  if (args[0].length() == 1) {
    result=getErrorMessageForBracket(args[0].charAt(0));
  }
 else {
    result="Consider adding a \"" + args[0] + "\"";
  }
}
break;
case IProblem.ParsingErrorInsertTokenAfter:
if (args.length > 0) {
if (args[1].length() == 1) {
result=getErrorMessageForBracket(args[1].charAt(0));
}
 else {
result="Consider adding a \"" + args[1] + "\"";
}
}
break;
case IProblem.UndefinedMethod:
if (args.length > 2) {
result="I don't know the function \"" + args[args.length - 2] + "\"";
}
break;
case IProblem.ParameterMismatch:
if (args.length > 3) {
if (args[2].trim().length() == 0) {
result="The method \"" + args[1] + "\" doesn't expect any parameters";
}
 else {
result="The method \"" + args[1] + "\" expects parameters ("+ getSimpleName(args[2])+ ")";
}
}
break;
case IProblem.UndefinedField:
if (args.length > 0) {
result="I don't know the global variable \"" + args[0] + "\"";
}
break;
case IProblem.UndefinedType:
if (args.length > 0) {
result="I don't know the class \"" + args[0] + "\"";
}
break;
case IProblem.UnresolvedVariable:
if (args.length > 0) {
result="I can't recognize the variable \"" + args[0] + "\"";
}
break;
case IProblem.UndefinedName:
if (args.length > 0) {
result="I don't recognize the name \"" + args[0] + "\"";
}
break;
}
log("Simplified Error Msg: " + result);
if (result == null) return problem.getMessage();
return result;
}
