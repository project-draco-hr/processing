{
  report("render_triangles in");
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);
  float uscale=0;
  float vscale=0;
  for (int i=start; i < stop; i++) {
    float a[]=vertices[triangles[i][VERTEX1]];
    float b[]=vertices[triangles[i][VERTEX2]];
    float c[]=vertices[triangles[i][VERTEX3]];
    float ar=clamp(triangleColors[i][0][TRI_DIFFUSE_R] + triangleColors[i][0][TRI_SPECULAR_R]);
    float ag=clamp(triangleColors[i][0][TRI_DIFFUSE_G] + triangleColors[i][0][TRI_SPECULAR_G]);
    float ab=clamp(triangleColors[i][0][TRI_DIFFUSE_B] + triangleColors[i][0][TRI_SPECULAR_B]);
    float br=clamp(triangleColors[i][1][TRI_DIFFUSE_R] + triangleColors[i][1][TRI_SPECULAR_R]);
    float bg=clamp(triangleColors[i][1][TRI_DIFFUSE_G] + triangleColors[i][1][TRI_SPECULAR_G]);
    float bb=clamp(triangleColors[i][1][TRI_DIFFUSE_B] + triangleColors[i][1][TRI_SPECULAR_B]);
    float cr=clamp(triangleColors[i][2][TRI_DIFFUSE_R] + triangleColors[i][2][TRI_SPECULAR_R]);
    float cg=clamp(triangleColors[i][2][TRI_DIFFUSE_G] + triangleColors[i][2][TRI_SPECULAR_G]);
    float cb=clamp(triangleColors[i][2][TRI_DIFFUSE_B] + triangleColors[i][2][TRI_SPECULAR_B]);
    int textureIndex=triangles[i][TEXTURE_INDEX];
    if (textureIndex != -1) {
      report("before enable");
      gl.glEnable(GL10.GL_TEXTURE_2D);
      report("after enable");
      report("before bind");
      PImage texture=textures[textureIndex];
      bindTexture(texture);
      report("after bind");
      ImageCache cash=(ImageCache)texture.getCache(this);
      uscale=(float)texture.width / (float)cash.twidth;
      vscale=(float)texture.height / (float)cash.theight;
      gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
    }
    vertexBuffer.rewind();
    colorBuffer.rewind();
    normalBuffer.rewind();
    if (textureIndex != -1) {
      textureBuffer.rewind();
    }
    colorBuffer.put(toFixed16(ar));
    colorBuffer.put(toFixed16(ag));
    colorBuffer.put(toFixed16(ab));
    colorBuffer.put(toFixed16(a[A]));
    if (textureIndex != -1) {
      textureBuffer.put(toFixed32(a[U] * uscale));
      textureBuffer.put(toFixed32(a[V] * vscale));
    }
    normalBuffer.put(toFixed32(a[NX]));
    normalBuffer.put(toFixed32(a[NY]));
    normalBuffer.put(toFixed32(a[NZ]));
    vertexBuffer.put(toFixed32(a[VX]));
    vertexBuffer.put(toFixed32(a[VY]));
    vertexBuffer.put(toFixed32(a[VZ]));
    colorBuffer.put(toFixed16(br));
    colorBuffer.put(toFixed16(bg));
    colorBuffer.put(toFixed16(bb));
    colorBuffer.put(toFixed16(b[A]));
    if (textureIndex != -1) {
      textureBuffer.put(toFixed32(b[U] * uscale));
      textureBuffer.put(toFixed32(b[V] * vscale));
    }
    normalBuffer.put(toFixed32(b[NX]));
    normalBuffer.put(toFixed32(b[NY]));
    normalBuffer.put(toFixed32(b[NZ]));
    vertexBuffer.put(toFixed32(b[VX]));
    vertexBuffer.put(toFixed32(b[VY]));
    vertexBuffer.put(toFixed32(b[VZ]));
    colorBuffer.put(toFixed16(cr));
    colorBuffer.put(toFixed16(cg));
    colorBuffer.put(toFixed16(cb));
    colorBuffer.put(toFixed16(c[A]));
    if (textureIndex != -1) {
      textureBuffer.put(toFixed32(c[U] * uscale));
      textureBuffer.put(toFixed32(c[V] * vscale));
    }
    normalBuffer.put(toFixed32(c[NX]));
    normalBuffer.put(toFixed32(c[NY]));
    normalBuffer.put(toFixed32(c[NZ]));
    vertexBuffer.put(toFixed32(c[VX]));
    vertexBuffer.put(toFixed32(c[VY]));
    vertexBuffer.put(toFixed32(c[VZ]));
    gl.glVertexPointer(3,GL10.GL_FIXED,0,vertexBuffer);
    gl.glColorPointer(4,GL10.GL_FIXED,0,colorBuffer);
    gl.glNormalPointer(GL10.GL_FIXED,3,normalBuffer);
    gl.glDrawArrays(GL10.GL_TRIANGLES,0,3);
    report("non-binding 6");
    if (textureIndex != -1) {
      gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
      gl.glDisable(GL10.GL_TEXTURE_2D);
    }
  }
  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
  gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);
  triangleCount=0;
  report("render_triangles out");
}
