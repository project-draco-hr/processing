{
  int newSize=triangleCount << 1;
  int oldVertSize=vertexBuffer.capacity();
  int oldColorSize=colorBuffer.capacity();
  int oldTexSize=textureBuffer.capacity();
  int oldNormalSize=normalBuffer.capacity();
  int[] tmpVertData=new int[newSize * 3];
  int[] tmpColorData=new int[newSize * 4];
  int[] tmpTexData=new int[newSize * 2];
  int[] tmpNormalData=new int[newSize * 3];
  vertexBuffer.rewind();
  vertexBuffer.get(tmpVertData,0,vertexBuffer.capacity() * SIZEOF_INT);
  colorBuffer.rewind();
  colorBuffer.get(tmpColorData,0,colorBuffer.capacity() * SIZEOF_INT);
  textureBuffer.rewind();
  textureBuffer.get(tmpTexData,0,textureBuffer.capacity() * SIZEOF_INT);
  normalBuffer.rewind();
  normalBuffer.get(tmpNormalData,0,normalBuffer.capacity() * SIZEOF_INT);
  ByteBuffer vbb=ByteBuffer.allocateDirect(newSize * 3);
  vbb.order(ByteOrder.nativeOrder());
  vertexBuffer=vbb.asIntBuffer();
  vertexBuffer.put(tmpVertData);
  vertexBuffer.position(oldVertSize);
  ByteBuffer cbb=ByteBuffer.allocateDirect(newSize * 4 * SIZEOF_INT);
  cbb.order(ByteOrder.nativeOrder());
  colorBuffer=cbb.asIntBuffer();
  colorBuffer.put(tmpColorData);
  colorBuffer.position(oldColorSize);
  ByteBuffer tbb=ByteBuffer.allocateDirect(newSize * 2 * SIZEOF_INT);
  tbb.order(ByteOrder.nativeOrder());
  textureBuffer=tbb.asIntBuffer();
  textureBuffer.put(tmpTexData);
  textureBuffer.position(oldTexSize);
  ByteBuffer nbb=ByteBuffer.allocateDirect(newSize * 3 * SIZEOF_INT);
  nbb.order(ByteOrder.nativeOrder());
  normalBuffer=nbb.asIntBuffer();
  normalBuffer.put(tmpNormalData);
  normalBuffer.position(oldNormalSize);
}
