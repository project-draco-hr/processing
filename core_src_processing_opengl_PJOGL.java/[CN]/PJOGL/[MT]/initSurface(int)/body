{
  if (profile == null) {
    if (PROFILE == 2) {
      try {
        profile=GLProfile.getGL2ES1();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxFixedFunc(true);
      }
    }
 else     if (PROFILE == 3) {
      try {
        profile=GLProfile.getGL2GL3();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxProgrammable(true);
      }
      if (!profile.isGL3()) {
        PGraphics.showWarning("Requested profile GL3 but is not available, got: " + profile);
      }
    }
 else     if (PROFILE == 4) {
      try {
        profile=GLProfile.getGL4ES3();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxProgrammable(true);
      }
      if (!profile.isGL4()) {
        PGraphics.showWarning("Requested profile GL4 but is not available, got: " + profile);
      }
    }
 else     throw new RuntimeException(UNSUPPORTED_GLPROF_ERROR);
    if (2 < PROFILE) {
      texVertShaderSource=convertVertexSource(texVertShaderSource,120,150);
      tex2DFragShaderSource=convertFragmentSource(tex2DFragShaderSource,120,150);
      texRectFragShaderSource=convertFragmentSource(texRectFragShaderSource,120,150);
    }
  }
  if (canvasAWT != null || canvasNEWT != null) {
    if (canvasAWT != null) {
      canvasAWT.removeGLEventListener(listener);
      pg.parent.removeListeners(canvasAWT);
      pg.parent.remove(canvasAWT);
    }
 else     if (canvasNEWT != null) {
      windowNEWT.removeGLEventListener(listener);
      pg.parent.remove(canvasNEWT);
    }
    sinkFBO=backFBO=frontFBO=null;
  }
  GLCapabilities caps=new GLCapabilities(profile);
  caps.setAlphaBits(REQUESTED_ALPHA_BITS);
  caps.setDepthBits(REQUESTED_DEPTH_BITS);
  caps.setStencilBits(REQUESTED_STENCIL_BITS);
  caps.setBackgroundOpaque(true);
  caps.setOnscreen(true);
  if (USE_FBOLAYER_BY_DEFAULT) {
    if (USE_JOGL_FBOLAYER) {
      caps.setPBuffer(false);
      caps.setFBO(true);
      if (1 < antialias) {
        caps.setSampleBuffers(true);
        caps.setNumSamples(antialias);
      }
 else {
        caps.setSampleBuffers(false);
      }
      fboLayerRequested=false;
    }
 else {
      caps.setPBuffer(false);
      caps.setFBO(false);
      caps.setSampleBuffers(false);
      fboLayerRequested=1 < antialias;
    }
  }
 else {
    if (1 < antialias) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(antialias);
    }
 else {
      caps.setSampleBuffers(false);
    }
    fboLayerRequested=false;
  }
  caps.setDepthBits(REQUESTED_DEPTH_BITS);
  caps.setStencilBits(REQUESTED_STENCIL_BITS);
  caps.setAlphaBits(REQUESTED_ALPHA_BITS);
  reqNumSamples=qualityToSamples(antialias);
  if (WINDOW_TOOLKIT == AWT) {
    canvasAWT=new GLCanvas(caps);
    canvasAWT.setBounds(0,0,pg.width,pg.height);
    canvasAWT.setBackground(new Color(pg.backgroundColor,true));
    canvasAWT.setFocusable(true);
    pg.parent.setLayout(new BorderLayout());
    pg.parent.add(canvasAWT,BorderLayout.CENTER);
    canvasAWT.requestFocusInWindow();
    canvas=canvasAWT;
    canvasNEWT=null;
  }
 else   if (WINDOW_TOOLKIT == NEWT) {
    windowNEWT=GLWindow.create(caps);
    canvasNEWT=new NewtCanvasAWT(windowNEWT);
    canvasNEWT.setBounds(0,0,pg.width,pg.height);
    canvasNEWT.setBackground(new Color(pg.backgroundColor,true));
    canvasNEWT.setFocusable(true);
    pg.parent.setLayout(new BorderLayout());
    pg.parent.add(canvasNEWT,BorderLayout.CENTER);
    canvasNEWT.requestFocusInWindow();
    canvas=canvasNEWT;
    canvasAWT=null;
  }
  pg.parent.defaultSize=false;
  registerListeners();
  fboLayerCreated=false;
  fboLayerInUse=false;
  firstFrame=true;
  setFps=false;
}
