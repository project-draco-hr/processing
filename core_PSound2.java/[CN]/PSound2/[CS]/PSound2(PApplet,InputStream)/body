{
  this.parent=iparent;
  try {
    AudioInputStream ais=AudioSystem.getAudioInputStream(input);
    AudioFormat format=ais.getFormat();
    if (format.getEncoding() != AudioFormat.Encoding.PCM_SIGNED) {
      format=new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,format.getSampleRate(),format.getSampleSizeInBits() * 2,format.getChannels(),format.getFrameSize() * 2,format.getFrameRate(),true);
      ais=AudioSystem.getAudioInputStream(format,ais);
    }
    int frameLength=(int)ais.getFrameLength();
    int frameSize=format.getFrameSize();
    DataLine.Info info=new DataLine.Info(Clip.class,ais.getFormat(),frameLength * frameSize);
    clip=(Clip)AudioSystem.getLine(info);
    try {
      gainControl=(FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
    }
 catch (    Exception e) {
      System.err.println("Couldn't get gain control for this .wav file");
      e.printStackTrace();
    }
    clip.open(ais);
    parent.registerDispose(this);
    try {
      soundEventMethod=parent.getClass().getMethod("soundEvent",new Class[]{PSound.class});
      clip.addLineListener(new LineListener(){
        public void update(        LineEvent event){
          if (event.getType() == LineEvent.Type.STOP) {
            if (!stopCalled) {
              if (clip.isActive()) {
                clip.stop();
                clip.setFramePosition(0);
              }
 else {
                clip.stop();
              }
            }
            stopCalled=false;
            try {
              soundEventMethod.invoke(parent,new Object[]{PSound2.this});
            }
 catch (            Exception e) {
              System.err.println("error, disabling soundEvent()");
              e.printStackTrace();
              soundEventMethod=null;
            }
          }
        }
      }
);
    }
 catch (    Exception e) {
    }
  }
 catch (  Exception e) {
    error("<init>",e);
  }
}
