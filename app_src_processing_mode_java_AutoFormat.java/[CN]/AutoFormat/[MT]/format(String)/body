{
  final String normalizedText=source.replaceAll("\r","");
  final String cleanText=normalizedText + (normalizedText.endsWith("\n") ? "" : "\n");
  result.setLength(0);
  indentValue=Preferences.getInteger("editor.tabs.size");
  boolean forFlag=if_flg=false;
  s_flag=true;
  int forParenthLevel=0;
  conditionalLevel=parenLevel=curlyLvl=if_lev=level=0;
  tabs=0;
  jdoc_flag=continuationFlag=inStatementFlag=false;
  char cc;
  int[] s_level=new int[10];
  sp_flg=new int[20][10];
  s_ind=new int[20][10];
  int[] s_if_lev=new int[10];
  boolean[] s_if_flg=new boolean[10];
  ind=new int[10];
  p_flg=new int[10];
  s_tabs=new int[20][10];
  pos=-1;
  chars=cleanText.toCharArray();
  EOF=false;
  while (!EOF) {
    char c=nextChar();
switch (c) {
default :
      inStatementFlag=true;
    buf.append(c);
  break;
case ',':
trimRight(buf);
buf.append(c);
buf.append(' ');
advanceToNonSpace();
break;
case ' ':
case '\t':
elseFlag=lookup("else");
if (elseFlag) {
gotElse();
if ((!s_flag) || buf.length() > 0) {
buf.append(c);
}
writeIndentedLine();
s_flag=false;
break;
}
if ((!s_flag) || buf.length() > 0) {
buf.append(c);
}
break;
case '\n':
if (EOF) {
writeIndentedLine();
break;
}
elseFlag=lookup("else");
if (elseFlag) gotElse();
if (lookup_com("//")) {
if (buf.charAt(buf.length() - 1) == '\n') {
buf.setLength(buf.length() - 1);
}
}
writeIndentedLine();
result.append("\n");
s_flag=true;
if (elseFlag) {
p_flg[level]++;
tabs++;
}
continuationFlag=inStatementFlag;
break;
case '{':
inStatementFlag=false;
elseFlag=lookup("else");
if (elseFlag) gotElse();
if (s_if_lev.length == curlyLvl) {
s_if_lev=PApplet.expand(s_if_lev);
s_if_flg=PApplet.expand(s_if_flg);
}
s_if_lev[curlyLvl]=if_lev;
s_if_flg[curlyLvl]=if_flg;
if_lev=0;
if_flg=false;
curlyLvl++;
if (s_flag && p_flg[level] != 0) {
p_flg[level]--;
tabs--;
}
trimRight(buf);
if (buf.length() > 0 || (result.length() > 0 && !Character.isWhitespace(result.charAt(result.length() - 1)))) buf.append(" ");
buf.append(c);
writeIndentedLine();
readForNewLine();
writeIndentedLine();
result.append("\n");
tabs++;
s_flag=true;
if (p_flg[level] > 0) {
ind[level]=1;
level++;
s_level[level]=curlyLvl;
}
break;
case '}':
inStatementFlag=false;
curlyLvl--;
if (curlyLvl < 0) {
curlyLvl=0;
buf.append(c);
writeIndentedLine();
}
 else {
if_lev=s_if_lev[curlyLvl] - 1;
if (if_lev < 0) {
if_lev=0;
}
if_flg=s_if_flg[curlyLvl];
trimRight(buf);
writeIndentedLine();
tabs--;
trimRight(result);
result.append("\n");
printIndentation();
result.append(c);
if (peek() == ';') {
result.append(nextChar());
}
readForNewLine();
writeIndentedLine();
result.append('\n');
s_flag=true;
if (curlyLvl < s_level[level]) {
if (level > 0) {
level--;
}
}
if (ind[level] != 0) {
tabs-=p_flg[level];
p_flg[level]=0;
ind[level]=0;
}
}
break;
case '"':
case '\'':
inStatementFlag=true;
buf.append(c);
cc=nextChar();
while (!EOF && cc != c) {
buf.append(cc);
if (cc == '\\') {
buf.append(cc=nextChar());
}
if (cc == '\n') {
writeIndentedLine();
s_flag=true;
}
cc=nextChar();
}
buf.append(cc);
if (readForNewLine()) {
chars[pos--]='\n';
}
break;
case ';':
if (forFlag) {
trimRight(buf);
buf.append("; ");
advanceToNonSpace();
break;
}
inStatementFlag=false;
buf.append(c);
writeIndentedLine();
if (p_flg[level] > 0 && ind[level] == 0) {
tabs-=p_flg[level];
p_flg[level]=0;
}
readForNewLine();
writeIndentedLine();
result.append("\n");
s_flag=true;
if (if_lev > 0) {
if (if_flg) {
if_lev--;
if_flg=false;
}
 else {
if_lev=0;
}
}
break;
case '\\':
buf.append(c);
buf.append(nextChar());
break;
case '?':
conditionalLevel++;
buf.append(c);
break;
case ':':
if (peek() == ':') {
result.append(c).append(nextChar());
break;
}
 else if (conditionalLevel > 0) {
conditionalLevel--;
buf.append(c);
break;
}
 else if (forFlag) {
trimRight(buf);
buf.append(" : ");
advanceToNonSpace();
break;
}
buf.append(c);
if (!lookup("default") && !lookup("case")) {
s_flag=false;
writeIndentedLine();
}
 else {
tabs--;
writeIndentedLine();
tabs++;
}
if (peek() == ';') {
result.append(nextChar());
}
readForNewLine();
writeIndentedLine();
result.append('\n');
s_flag=true;
break;
case '/':
final char next=peek();
if (next == '/') {
buf.append(c).append(nextChar());
handleSingleLineComment();
result.append("\n");
}
 else if (next == '*') {
if (buf.length() > 0) {
writeIndentedLine();
}
buf.append(c).append(nextChar());
handleMultiLineComment();
}
 else {
buf.append(c);
}
break;
case ')':
final boolean isCast=castFlags.isEmpty() ? false : castFlags.pop();
parenLevel--;
if (forFlag && forParenthLevel > parenLevel) forFlag=false;
if (parenLevel < 0) parenLevel=0;
buf.append(c);
writeIndentedLine();
if (readForNewLine()) {
chars[pos--]='\n';
if (parenLevel == 0 && tabs > 0 && !isCast) {
p_flg[level]++;
tabs++;
ind[level]=0;
}
}
break;
case '(':
castFlags.push(Pattern.matches("^.*?(?:int|color|float)\\s*$",buf));
final boolean isFor=lookup("for");
final boolean isIf=lookup("if");
if (isFor || isIf || lookup("while")) {
if (!Character.isWhitespace(buf.charAt(buf.length() - 1))) {
buf.append(' ');
}
}
buf.append(c);
parenLevel++;
if (isFor && !forFlag) {
forParenthLevel=parenLevel;
forFlag=true;
}
 else if (isIf) {
writeIndentedLine();
s_tabs[curlyLvl][if_lev]=tabs;
sp_flg[curlyLvl][if_lev]=p_flg[level];
s_ind[curlyLvl][if_lev]=ind[level];
if_lev++;
if_flg=true;
}
}
}
if (buf.length() > 0) writeIndentedLine();
final String formatted=result.toString();
return formatted.equals(cleanText) ? source : formatted;
}
