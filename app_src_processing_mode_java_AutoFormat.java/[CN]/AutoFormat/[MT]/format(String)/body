{
  final String normalizedText=source.replaceAll("\r","");
  final String cleanText=normalizedText + (normalizedText.endsWith("\n") ? "" : "\n");
  result.setLength(0);
  indentValue=Preferences.getInteger("editor.tabs.size");
  boolean forFlag=if_flg=false;
  startFlag=true;
  int forParenthLevel=0;
  conditionalLevel=parenLevel=curlyLvl=if_lev=level=0;
  tabs=0;
  jdoc_flag=inStatementFlag=overflowFlag=false;
  pos=arrayLevel=-1;
  int[] s_level=new int[10];
  sp_flg=new int[20][10];
  s_ind=new boolean[20][10];
  int[] s_if_lev=new int[10];
  boolean[] s_if_flg=new boolean[10];
  ind=new boolean[10];
  p_flg=new int[10];
  s_tabs=new int[20][10];
  doWhileFlags=new Stack<Boolean>();
  ifWhileForFlags=new Stack<Boolean>();
  chars=cleanText.toCharArray();
  EOF=false;
  while (!EOF) {
    char c=nextChar();
switch (c) {
default :
      inStatementFlag=true;
    buf.append(c);
  break;
case ',':
inStatementFlag=true;
trimRight(buf);
buf.append(", ");
advanceToNonSpace(false);
break;
case ' ':
case '\t':
elseFlag=bufEnds("else");
if (elseFlag) {
gotElse();
if (!startFlag || buf.length() > 0) {
buf.append(c);
}
writeIndentedLine();
startFlag=false;
break;
}
if (!startFlag || buf.length() > 0) buf.append(c);
break;
case '\n':
if (EOF) break;
elseFlag=bufEnds("else");
if (elseFlag) gotElse();
if (lookup_com("//")) {
if (buf.charAt(buf.length() - 1) == '\n') {
buf.setLength(buf.length() - 1);
}
}
if (elseFlag) {
writeIndentedLine();
result.append("\n");
p_flg[level]++;
tabs++;
}
 else {
writeIndentedLine();
result.append("\n");
}
startFlag=true;
break;
case '{':
elseFlag=bufEnds("else");
if (elseFlag) gotElse();
doWhileFlags.push(Boolean.valueOf(bufEnds("do")));
char prevChar=prevNonWhitespace();
if (arrayLevel >= 0 || prevChar == '=' || prevChar == ']') {
arrayLevel++;
buf.append(c);
break;
}
inStatementFlag=false;
if (s_if_lev.length == curlyLvl) {
s_if_lev=PApplet.expand(s_if_lev);
s_if_flg=PApplet.expand(s_if_flg);
}
s_if_lev[curlyLvl]=if_lev;
s_if_flg[curlyLvl]=if_flg;
if_lev=0;
if_flg=false;
curlyLvl++;
if (startFlag && p_flg[level] != 0) {
p_flg[level]--;
tabs--;
}
trimRight(buf);
if (buf.length() > 0 || (result.length() > 0 && !Character.isWhitespace(result.charAt(result.length() - 1)))) {
buf.append(" ");
}
buf.append(c);
writeIndentedLine();
readForNewLine();
writeIndentedLine();
result.append('\n');
tabs++;
startFlag=true;
if (p_flg[level] > 0) {
ind[level]=true;
level++;
s_level[level]=curlyLvl;
}
break;
case '}':
if (arrayLevel >= 0) {
if (arrayLevel > 0) arrayLevel--;
if (arrayIndent > arrayLevel) arrayIndent=arrayLevel;
buf.append(c);
break;
}
inStatementFlag=false;
curlyLvl--;
if (curlyLvl < 0) {
curlyLvl=0;
buf.append(c);
writeIndentedLine();
}
 else {
if_lev=s_if_lev[curlyLvl] - 1;
if (if_lev < 0) if_lev=0;
if_levSafe();
if_flg=s_if_flg[curlyLvl];
trimRight(buf);
writeIndentedLine();
tabs--;
trimRight(result);
result.append('\n');
printIndentation();
result.append(c);
if (peek() == ';') result.append(nextChar());
if (doWhileFlags.empty() || !doWhileFlags.pop().booleanValue() || !new String(chars,pos + 1,chars.length - pos - 1).trim().startsWith("while")) {
readForNewLine();
writeIndentedLine();
result.append('\n');
startFlag=true;
}
 else {
result.append(' ');
advanceToNonSpace(true);
startFlag=false;
}
if (curlyLvl < s_level[level] && level > 0) level--;
if (ind[level]) {
tabs-=p_flg[level];
p_flg[level]=0;
ind[level]=false;
}
}
break;
case '"':
case '\'':
inStatementFlag=true;
buf.append(c);
char cc=nextChar();
while (!EOF && cc != c) {
buf.append(cc);
if (cc == '\\') {
buf.append(cc=nextChar());
}
if (cc == '\n') {
writeIndentedLine();
startFlag=true;
}
cc=nextChar();
}
buf.append(cc);
if (readForNewLine()) {
chars[pos--]='\n';
}
break;
case ';':
if (forFlag) {
trimRight(buf);
buf.append("; ");
advanceToNonSpace(false);
break;
}
buf.append(c);
inStatementFlag=false;
writeIndentedLine();
if (p_flg[level] > 0 && !ind[level]) {
tabs-=p_flg[level];
p_flg[level]=0;
}
readForNewLine();
writeIndentedLine();
result.append("\n");
startFlag=true;
arrayLevel=-1;
if (if_lev > 0) {
if (if_flg) {
if_lev--;
if_flg=false;
}
 else {
if_lev=0;
}
}
break;
case '\\':
buf.append(c);
buf.append(nextChar());
break;
case '?':
conditionalLevel++;
buf.append(c);
break;
case ':':
if (peek() == ':') {
result.append(c).append(nextChar());
break;
}
 else if (conditionalLevel > 0) {
conditionalLevel--;
buf.append(c);
break;
}
 else if (forFlag) {
trimRight(buf);
buf.append(" : ");
advanceToNonSpace(false);
break;
}
buf.append(c);
inStatementFlag=false;
arrayLevel=-1;
tabs--;
writeIndentedLine();
tabs++;
readForNewLine();
writeIndentedLine();
result.append('\n');
startFlag=true;
break;
case '/':
final char next=peek();
if (next == '/') {
buf.append(c).append(nextChar());
handleSingleLineComment();
result.append("\n");
}
 else if (next == '*') {
if (buf.length() > 0) {
writeIndentedLine();
}
buf.append(c).append(nextChar());
handleMultiLineComment();
}
 else {
buf.append(c);
}
break;
case ')':
parenLevel--;
if (forFlag && forParenthLevel > parenLevel) forFlag=false;
if (parenLevel < 0) parenLevel=0;
buf.append(c);
boolean wasIfEtc=!ifWhileForFlags.empty() && ifWhileForFlags.pop().booleanValue();
if (wasIfEtc) {
inStatementFlag=false;
arrayLevel=-1;
}
writeIndentedLine();
if (wasIfEtc && readForNewLine()) {
chars[pos]='\n';
pos--;
if (parenLevel == 0) {
p_flg[level]++;
tabs++;
ind[level]=false;
}
}
break;
case '(':
final boolean isFor=bufEnds("for");
final boolean isIf=bufEnds("if");
if (isFor || isIf || bufEnds("while")) {
if (!Character.isWhitespace(buf.charAt(buf.length() - 1))) {
buf.append(' ');
}
ifWhileForFlags.push(true);
}
 else {
ifWhileForFlags.push(false);
}
buf.append(c);
parenLevel++;
if (isFor && !forFlag) {
forParenthLevel=parenLevel;
forFlag=true;
}
 else if (isIf) {
writeIndentedLine();
s_tabs[curlyLvl][if_lev]=tabs;
sp_flg[curlyLvl][if_lev]=p_flg[level];
s_ind[curlyLvl][if_lev]=ind[level];
if_lev++;
if_levSafe();
if_flg=true;
}
}
}
if (buf.length() > 0) writeIndentedLine();
final String formatted=result.toString();
return formatted.equals(cleanText) ? source : formatted;
}
