{
  final String normalizedText=source.replaceAll("\r","");
  final String cleanText=normalizedText + (normalizedText.endsWith("\n") ? "" : "\n");
  result.setLength(0);
  indentValue=Preferences.getInteger("editor.tabs.size");
  boolean forFlag=false;
  startFlag=true;
  int forParenthLevel=0;
  conditionalLevel=parenLevel=curlyLvl=0;
  tabs=0;
  jdoc_flag=inStatementFlag=false;
  char cc;
  pos=arrayLevel=-1;
  chars=cleanText.toCharArray();
  EOF=false;
  while (!EOF) {
    char c=nextChar();
switch (c) {
default :
      inStatementFlag=true;
    buf.append(c);
  break;
case ',':
inStatementFlag=true;
trimRight(buf);
buf.append(", ");
advanceToNonSpace();
break;
case ' ':
case '\t':
if (!startFlag || buf.length() > 0) buf.append(c);
break;
case '\n':
if (EOF) break;
if (lookup_com("//")) {
if (buf.charAt(buf.length() - 1) == '\n') {
buf.setLength(buf.length() - 1);
}
}
writeIndentedLine();
result.append("\n");
startFlag=true;
break;
case '{':
char prevChar=prevNonWhitespace();
if (arrayLevel >= 0 || prevChar == '=' || prevChar == ']') {
arrayLevel++;
buf.append(c);
break;
}
 else inStatementFlag=false;
curlyLvl++;
trimRight(buf);
if (buf.length() > 0 || (result.length() > 0 && !Character.isWhitespace(result.charAt(result.length() - 1)))) {
buf.append(" ");
}
buf.append(c);
writeIndentedLine();
readForNewLine();
writeIndentedLine();
result.append('\n');
tabs++;
startFlag=true;
break;
case '}':
if (arrayLevel >= 0) {
if (arrayLevel > 0) arrayLevel--;
if (arrayIndent > arrayLevel) arrayIndent=arrayLevel;
buf.append(c);
break;
}
 else inStatementFlag=false;
curlyLvl--;
if (curlyLvl < 0) {
curlyLvl=0;
buf.append(c);
writeIndentedLine();
}
 else {
trimRight(buf);
writeIndentedLine();
tabs--;
trimRight(result);
result.append('\n');
printIndentation();
result.append(c);
if (peek() == ';') result.append(nextChar());
readForNewLine();
writeIndentedLine();
result.append('\n');
startFlag=true;
}
break;
case '"':
case '\'':
inStatementFlag=true;
buf.append(c);
cc=nextChar();
while (!EOF && cc != c) {
buf.append(cc);
if (cc == '\\') {
buf.append(cc=nextChar());
}
if (cc == '\n') {
writeIndentedLine();
startFlag=true;
}
cc=nextChar();
}
buf.append(cc);
if (readForNewLine()) {
chars[pos--]='\n';
}
break;
case ';':
if (forFlag) {
trimRight(buf);
buf.append("; ");
advanceToNonSpace();
break;
}
buf.append(c);
inStatementFlag=false;
writeIndentedLine();
readForNewLine();
writeIndentedLine();
result.append("\n");
startFlag=true;
arrayLevel=-1;
break;
case '\\':
buf.append(c);
buf.append(nextChar());
break;
case '?':
conditionalLevel++;
buf.append(c);
break;
case ':':
if (peek() == ':') {
result.append(c).append(nextChar());
break;
}
 else if (conditionalLevel > 0) {
conditionalLevel--;
buf.append(c);
break;
}
 else if (forFlag) {
trimRight(buf);
buf.append(" : ");
advanceToNonSpace();
break;
}
buf.append(c);
inStatementFlag=false;
if (bufEnds("default") || bufEnds("case")) {
tabs--;
writeIndentedLine();
tabs++;
}
 else {
startFlag=false;
writeIndentedLine();
}
if (peek() == ';') result.append(nextChar());
readForNewLine();
writeIndentedLine();
result.append('\n');
startFlag=true;
break;
case '/':
final char next=peek();
if (next == '/') {
buf.append(c).append(nextChar());
handleSingleLineComment();
result.append("\n");
}
 else if (next == '*') {
if (buf.length() > 0) {
writeIndentedLine();
}
buf.append(c).append(nextChar());
handleMultiLineComment();
}
 else {
buf.append(c);
}
break;
case ')':
parenLevel--;
if (forFlag && forParenthLevel > parenLevel) forFlag=false;
if (parenLevel < 0) parenLevel=0;
buf.append(c);
break;
case '(':
final boolean isFor=bufEnds("for");
final boolean isIf=bufEnds("if");
if (isFor || isIf || bufEnds("while")) {
if (!Character.isWhitespace(buf.charAt(buf.length() - 1))) {
buf.append(' ');
}
}
buf.append(c);
parenLevel++;
if (isFor && !forFlag) {
forParenthLevel=parenLevel;
forFlag=true;
}
}
}
if (buf.length() > 0) writeIndentedLine();
final String formatted=result.toString();
return formatted.equals(cleanText) ? source : formatted;
}
