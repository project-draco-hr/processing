{
  Writer out=new BufferedWriter(new FileWriter(file));
  XMLOutputFactory output=XMLOutputFactory.newInstance();
  try {
    XMLStreamWriter xout=output.createXMLStreamWriter(out);
    xout.writeStartDocument();
    xout.writeCharacters("\n");
    xout.writeDTD(PLIST_DTD);
    xout.writeCharacters("\n");
    xout.writeStartElement(PLIST_TAG);
    xout.writeAttribute(PLIST_VERSION_ATTRIBUTE,"1.0");
    xout.writeCharacters("\n");
    xout.writeStartElement(DICT_TAG);
    xout.writeCharacters("\n");
    writeProperty(xout,"CFBundleDevelopmentRegion","English");
    writeProperty(xout,"CFBundleExecutable",executableName);
    writeProperty(xout,"CFBundleIconFile",(icon == null) ? DEFAULT_ICON_NAME : icon.getName());
    writeProperty(xout,"CFBundleIdentifier",identifier);
    writeProperty(xout,"CFBundleDisplayName",displayName);
    writeProperty(xout,"CFBundleInfoDictionaryVersion","6.0");
    writeProperty(xout,"CFBundleName",name);
    writeProperty(xout,"CFBundlePackageType",OS_TYPE_CODE);
    writeProperty(xout,"CFBundleShortVersionString",shortVersion);
    writeProperty(xout,"CFBundleVersion",version);
    writeProperty(xout,"CFBundleSignature",signature);
    writeProperty(xout,"NSHumanReadableCopyright",copyright);
    if (applicationCategory != null) {
      writeProperty(xout,"LSApplicationCategoryType",applicationCategory);
    }
    if (highResolutionCapable) {
      writeKey(xout,"NSHighResolutionCapable");
      writeBoolean(xout,true);
      xout.writeCharacters("\n");
    }
    if (runtime != null) {
      writeProperty(xout,"JVMRuntime",runtime.getDir().getParentFile().getParentFile().getName());
    }
    if (privileged != null) {
      writeProperty(xout,"JVMRunPrivileged",privileged);
    }
    if (workingDirectory != null) {
      writeProperty(xout,"WorkingDirectory",workingDirectory);
    }
    writeProperty(xout,"JVMMainClassName",mainClassName);
    writeKey(xout,"CFBundleDocumentTypes");
    xout.writeStartElement(ARRAY_TAG);
    xout.writeCharacters("\n");
    for (    BundleDocument bundleDocument : bundleDocuments) {
      xout.writeStartElement(DICT_TAG);
      xout.writeCharacters("\n");
      writeKey(xout,"CFBundleTypeExtensions");
      xout.writeStartElement(ARRAY_TAG);
      xout.writeCharacters("\n");
      for (      String extension : bundleDocument.getExtensions()) {
        writeString(xout,extension);
      }
      xout.writeEndElement();
      xout.writeCharacters("\n");
      if (bundleDocument.hasIcon()) {
        writeKey(xout,"CFBundleTypeIconFile");
        writeString(xout,bundleDocument.getIcon());
      }
      writeKey(xout,"CFBundleTypeName");
      writeString(xout,bundleDocument.getName());
      writeKey(xout,"CFBundleTypeRole");
      writeString(xout,bundleDocument.getRole());
      writeKey(xout,"LSTypeIsPackage");
      writeBoolean(xout,bundleDocument.isPackage());
      xout.writeEndElement();
      xout.writeCharacters("\n");
    }
    xout.writeEndElement();
    xout.writeCharacters("\n");
    writeKey(xout,"LSArchitecturePriority");
    xout.writeStartElement(ARRAY_TAG);
    xout.writeCharacters("\n");
    for (    String architecture : architectures) {
      writeString(xout,architecture);
    }
    xout.writeEndElement();
    xout.writeCharacters("\n");
    writeKey(xout,"LSEnvironment");
    xout.writeStartElement(DICT_TAG);
    xout.writeCharacters("\n");
    writeKey(xout,"LC_CTYPE");
    writeString(xout,"UTF-8");
    xout.writeEndElement();
    xout.writeCharacters("\n");
    writeKey(xout,"JVMOptions");
    xout.writeStartElement(ARRAY_TAG);
    xout.writeCharacters("\n");
    for (    String option : options) {
      writeString(xout,option);
    }
    xout.writeEndElement();
    xout.writeCharacters("\n");
    writeKey(xout,"JVMArguments");
    xout.writeStartElement(ARRAY_TAG);
    xout.writeCharacters("\n");
    for (    String argument : arguments) {
      writeString(xout,argument);
    }
    xout.writeEndElement();
    xout.writeCharacters("\n");
    xout.writeEndElement();
    xout.writeCharacters("\n");
    xout.writeEndElement();
    xout.writeCharacters("\n");
    xout.writeEndDocument();
    xout.writeCharacters("\n");
    out.flush();
  }
 catch (  XMLStreamException exception) {
    throw new IOException(exception);
  }
 finally {
    out.close();
  }
}
