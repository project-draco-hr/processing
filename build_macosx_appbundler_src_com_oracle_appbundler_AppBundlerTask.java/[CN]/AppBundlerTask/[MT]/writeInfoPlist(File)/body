{
  FileOutputStream output=new FileOutputStream(file);
  PropertyLister xout=new PropertyLister(output);
  xout.writeStartDocument();
  xout.println(PLIST_DTD);
  xout.writeStartElement(PLIST_TAG,PLIST_VERSION_ATTRIBUTE,"1.0");
  xout.writeStartElement(DICT_TAG);
  xout.writeProperty("CFBundleDevelopmentRegion","English");
  xout.writeProperty("CFBundleExecutable",executableName);
  xout.writeProperty("CFBundleIconFile",(icon == null) ? DEFAULT_ICON_NAME : icon.getName());
  xout.writeProperty("CFBundleIdentifier",identifier);
  xout.writeProperty("CFBundleDisplayName",displayName);
  xout.writeProperty("CFBundleInfoDictionaryVersion","6.0");
  xout.writeProperty("CFBundleName",name);
  xout.writeProperty("CFBundlePackageType",OS_TYPE_CODE);
  xout.writeProperty("CFBundleShortVersionString",shortVersion);
  xout.writeProperty("CFBundleVersion",version);
  xout.writeProperty("CFBundleSignature",signature);
  xout.writeProperty("NSHumanReadableCopyright",copyright);
  if (applicationCategory != null) {
    xout.writeProperty("LSApplicationCategoryType",applicationCategory);
  }
  if (highResolutionCapable) {
    xout.writeKey("NSHighResolutionCapable");
    xout.writeBoolean(true);
  }
  if (runtime != null) {
    xout.writeProperty("JVMRuntime",runtime.getDir().getParentFile().getParentFile().getName());
  }
  if (privileged != null) {
    xout.writeProperty("JVMRunPrivileged",privileged);
  }
  if (workingDirectory != null) {
    xout.writeProperty("WorkingDirectory",workingDirectory);
  }
  xout.writeProperty("JVMMainClassName",mainClassName);
  xout.writeKey("CFBundleDocumentTypes");
  xout.writeStartElement(ARRAY_TAG);
  for (  BundleDocument bundleDocument : bundleDocuments) {
    xout.writeStartElement(DICT_TAG);
    xout.writeKey("CFBundleTypeExtensions");
    xout.writeStartElement(ARRAY_TAG);
    for (    String extension : bundleDocument.getExtensions()) {
      xout.writeString(extension);
    }
    xout.writeEndElement();
    if (bundleDocument.hasIcon()) {
      xout.writeKey("CFBundleTypeIconFile");
      xout.writeString(bundleDocument.getIcon());
    }
    xout.writeKey("CFBundleTypeName");
    xout.writeString(bundleDocument.getName());
    xout.writeKey("CFBundleTypeRole");
    xout.writeString(bundleDocument.getRole());
    xout.writeKey("LSTypeIsPackage");
    xout.writeBoolean(bundleDocument.isPackage());
    xout.writeEndElement();
  }
  xout.writeEndElement();
  xout.writeKey("LSArchitecturePriority");
  xout.writeStartElement(ARRAY_TAG);
  for (  String architecture : architectures) {
    xout.writeString(architecture);
  }
  xout.writeEndElement();
  xout.writeKey("LSEnvironment");
  xout.writeStartElement(DICT_TAG);
  xout.writeKey("LC_CTYPE");
  xout.writeString("UTF-8");
  xout.writeEndElement();
  xout.writeKey("JVMOptions");
  xout.writeStartElement(ARRAY_TAG);
  for (  String option : options) {
    xout.writeString(option);
  }
  xout.writeEndElement();
  xout.writeKey("JVMArguments");
  xout.writeStartElement(ARRAY_TAG);
  for (  String argument : arguments) {
    xout.writeString(argument);
  }
  xout.writeEndElement();
  xout.writeEndElement();
  xout.writeEndElement();
  xout.writeEndDocument();
}
