{
  this();
  try {
    ResultSetMetaData rsmd=rs.getMetaData();
    int columnCount=rsmd.getColumnCount();
    setColumnCount(columnCount);
    for (int col=0; col < columnCount; col++) {
      setColumnTitle(col,rsmd.getColumnName(col + 1));
      int type=rsmd.getColumnType(col + 1);
switch (type) {
case Types.INTEGER:
case Types.TINYINT:
case Types.SMALLINT:
        setColumnType(col,INT);
      break;
case Types.BIGINT:
    setColumnType(col,LONG);
  break;
case Types.FLOAT:
setColumnType(col,FLOAT);
break;
case Types.DECIMAL:
case Types.DOUBLE:
case Types.REAL:
setColumnType(col,DOUBLE);
break;
}
}
int row=0;
while (rs.next()) {
for (int col=0; col < columnCount; col++) {
switch (columnTypes[col]) {
case STRING:
setString(row,col,rs.getString(col + 1));
break;
case INT:
setInt(row,col,rs.getInt(col + 1));
break;
case LONG:
setLong(row,col,rs.getLong(col + 1));
break;
case FLOAT:
setFloat(row,col,rs.getFloat(col + 1));
break;
case DOUBLE:
setDouble(row,col,rs.getDouble(col + 1));
break;
default :
throw new IllegalArgumentException("column type " + columnTypes[col] + " not supported.");
}
}
row++;
}
}
 catch (SQLException s) {
throw new RuntimeException(s);
}
}
