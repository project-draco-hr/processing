{
  if (suggestionRunning) {
    suggestionRequested=true;
    return;
  }
  suggestionRunning=true;
  suggestionRequested=false;
  final String text;
  final int caretLineIndex;
  final int caretLinePosition;
{
    int caretPosition=getCaretPosition();
    if (caretPosition < 0) {
      suggestionRunning=false;
      return;
    }
    caretLineIndex=getCaretLine();
    if (caretLineIndex < 0) {
      suggestionRunning=false;
      return;
    }
    String lineText=getLineText(caretLineIndex);
    if (lineText == null) {
      suggestionRunning=false;
      return;
    }
    caretLinePosition=getCaretPosition() - getLineStartOffset(caretLineIndex);
    if (caretLinePosition <= 0) {
      suggestionRunning=false;
      return;
    }
    if (caretLinePosition > lineText.length()) {
      suggestionRunning=false;
      return;
    }
    text=lineText.substring(0,caretLinePosition);
  }
  suggestionWorker=new SwingWorker<Void,Void>(){
    String phrase=null;
    DefaultListModel<CompletionCandidate> defListModel=null;
    @Override protected Void doInBackground() throws Exception {
      Messages.log("phrase parse start");
      phrase=parsePhrase(text,caretLinePosition);
      Messages.log("phrase: " + phrase);
      if (phrase == null)       return null;
      List<CompletionCandidate> candidates=null;
      ASTGenerator astGenerator=editor.getErrorChecker().getASTGenerator();
synchronized (astGenerator) {
        int lineOffset=caretLineIndex + editor.getErrorChecker().mainClassOffset;
        candidates=astGenerator.preparePredictions(phrase,lineOffset);
      }
      if (suggestionRequested)       return null;
      boolean showSuggestions=astGenerator.sketchOutline == null || !astGenerator.sketchOutline.isVisible();
      if (showSuggestions && phrase != null && candidates != null && !candidates.isEmpty()) {
        Collections.sort(candidates);
        defListModel=ASTGenerator.filterPredictions(candidates);
        Messages.log("Got: " + candidates.size() + " candidates, "+ defListModel.size()+ " filtered");
      }
      return null;
    }
    @Override protected void done(){
      try {
        get();
      }
 catch (      ExecutionException e) {
        Messages.loge("error while preparing suggestions",e.getCause());
      }
catch (      InterruptedException e) {
      }
      suggestionRunning=false;
      if (suggestionRequested) {
        Messages.log("completion invalidated");
        hideSuggestion();
        fetchPhrase();
        return;
      }
      Messages.log("completion finishing");
      if (defListModel != null) {
        showSuggestion(defListModel,phrase);
      }
 else {
        hideSuggestion();
      }
    }
  }
;
  suggestionWorker.execute();
}
