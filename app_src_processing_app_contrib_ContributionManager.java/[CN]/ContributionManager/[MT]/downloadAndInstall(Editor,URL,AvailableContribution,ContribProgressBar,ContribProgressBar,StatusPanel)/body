{
  new Thread(new Runnable(){
    public void run(){
      String filename=url.getFile();
      filename=filename.substring(filename.lastIndexOf('/') + 1);
      try {
        File contribZip=File.createTempFile("download",filename);
        contribZip.setWritable(true);
        try {
          download(url,contribZip,downloadProgress);
          if (!downloadProgress.isCanceled() && !downloadProgress.isError()) {
            installProgress.startTask(Language.text("contrib.progress.installing"),ContribProgressMonitor.UNKNOWN);
            LocalContribution contribution=ad.install(editor.getBase(),contribZip,false,status);
            if (contribution != null) {
              contribListing.replaceContribution(ad,contribution);
              if (contribution.getType() == ContributionType.MODE) {
                List<ModeContribution> contribModes=editor.getBase().getModeContribs();
                if (!contribModes.contains(contribution)) {
                  contribModes.add((ModeContribution)contribution);
                }
              }
              refreshInstalled(editor);
            }
            installProgress.finished();
          }
 else {
            if (downloadProgress.exception instanceof SocketTimeoutException) {
              status.setErrorMessage(Language.interpolate("contrib.errors.contrib_download.timeout",ad.getName()));
            }
 else {
              status.setErrorMessage(Language.interpolate("contrib.errors.download_and_install",ad.getName()));
            }
          }
          contribZip.delete();
        }
 catch (        Exception e) {
          status.setErrorMessage(Language.interpolate("contrib.errors.download_and_install",ad.getName()));
          downloadProgress.cancel();
          installProgress.cancel();
        }
      }
 catch (      IOException e) {
        status.setErrorMessage(Language.text("contrib.errors.temporary_directory"));
        downloadProgress.cancel();
        installProgress.cancel();
      }
    }
  }
,"Contribution Installer").start();
}
