{
  File[] markedForUpdate=root.listFiles(new FileFilter(){
    public boolean accept(    File folder){
      return (folder.isDirectory() && LocalContribution.isUpdateFlagged(folder));
    }
  }
);
  ArrayList<String> updateContribsNames=new ArrayList<String>();
  LinkedList<AvailableContribution> updateContribsList=new LinkedList<AvailableContribution>();
  String type=root.getName().substring(root.getName().lastIndexOf('/') + 1);
  String propFileName=null;
  if (type.equalsIgnoreCase("tools"))   propFileName="tool.properties";
 else   if (type.equalsIgnoreCase("modes"))   propFileName="mode.properties";
 else   if (type.equalsIgnoreCase("libraries"))   propFileName="libraries.properties";
  for (  File folder : markedForUpdate) {
    HashMap<String,String> properties=Base.readSettings(new File(folder,propFileName));
    updateContribsNames.add(properties.get("name"));
    Base.removeDir(folder);
  }
  for (  AvailableContribution availableContribs : contribListing.advertisedContributions) {
    if (updateContribsNames.contains(availableContribs.getName())) {
      updateContribsList.add(availableContribs);
    }
  }
  for (  AvailableContribution contribToUpdate : updateContribsList) {
    installOnStartUp(base,contribToUpdate);
    contribListing.replaceContribution(contribToUpdate,contribToUpdate);
  }
}
