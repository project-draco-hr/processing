{
  new Thread(new Runnable(){
    public void run(){
      String filename=url.getFile();
      filename=filename.substring(filename.lastIndexOf('/') + 1);
      try {
        File contribZip=File.createTempFile("download",filename);
        contribZip.setWritable(true);
        try {
          download(url,null,contribZip,downloadProgress);
          if (!downloadProgress.isCanceled() && !downloadProgress.isError()) {
            installProgress.startTask(Language.text("contrib.progress.installing"),ContribProgressMonitor.UNKNOWN);
            final LocalContribution contribution=ad.install(base,contribZip,false,status);
            if (contribution != null) {
              try {
                EventQueue.invokeAndWait(new Runnable(){
                  @Override public void run(){
                    listing.replaceContribution(ad,contribution);
                    base.setUpdatesAvailable(listing.countUpdates(base));
                  }
                }
);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
catch (              InvocationTargetException e) {
                throw (Exception)e.getCause();
              }
              base.refreshContribs(contribution.getType());
            }
            installProgress.finished();
          }
 else {
            if (downloadProgress.exception instanceof SocketTimeoutException) {
              status.setErrorMessage(Language.interpolate("contrib.errors.contrib_download.timeout",ad.getName()));
            }
 else {
              status.setErrorMessage(Language.interpolate("contrib.errors.download_and_install",ad.getName()));
            }
          }
          contribZip.delete();
        }
 catch (        Exception e) {
          String msg=null;
          if (e instanceof RuntimeException) {
            Throwable cause=((RuntimeException)e).getCause();
            if (cause instanceof NoClassDefFoundError || cause instanceof NoSuchMethodError) {
              msg="This item is not compatible with this version of Processing";
            }
 else             if (cause instanceof UnsupportedClassVersionError) {
              msg="This item needs to be recompiled for Java " + PApplet.javaPlatform;
            }
          }
          if (msg == null) {
            msg=Language.interpolate("contrib.errors.download_and_install",ad.getName());
          }
          status.setErrorMessage(msg);
          downloadProgress.cancel();
          installProgress.cancel();
        }
      }
 catch (      IOException e) {
        status.setErrorMessage(Language.text("contrib.errors.temporary_directory"));
        downloadProgress.cancel();
        installProgress.cancel();
      }
    }
  }
,"Contribution Installer").start();
}
