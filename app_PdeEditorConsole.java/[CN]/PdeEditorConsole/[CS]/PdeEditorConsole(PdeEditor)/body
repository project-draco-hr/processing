{
  this.editor=editor;
  consoleTextPane=new JTextPane();
  consoleTextPane.setEditable(false);
  consoleDoc=consoleTextPane.getStyledDocument();
  MutableAttributeSet standard=new SimpleAttributeSet();
  StyleConstants.setAlignment(standard,StyleConstants.ALIGN_LEFT);
  consoleDoc.setParagraphAttributes(0,0,standard,true);
  Color bgColor=PdePreferences.getColor("console.color");
  Color fgColorOut=PdePreferences.getColor("console.output.color");
  Color fgColorErr=PdePreferences.getColor("console.error.color");
  Font font=PdePreferences.getFont("console.font");
  stdStyle=new SimpleAttributeSet();
  StyleConstants.setForeground(stdStyle,fgColorOut);
  StyleConstants.setBackground(stdStyle,bgColor);
  StyleConstants.setFontSize(stdStyle,font.getSize());
  StyleConstants.setFontFamily(stdStyle,font.getFamily());
  StyleConstants.setBold(stdStyle,font.isBold());
  StyleConstants.setItalic(stdStyle,font.isItalic());
  errStyle=new SimpleAttributeSet();
  StyleConstants.setForeground(errStyle,fgColorErr);
  StyleConstants.setBackground(errStyle,bgColor);
  StyleConstants.setFontSize(errStyle,font.getSize());
  StyleConstants.setFontFamily(errStyle,font.getFamily());
  StyleConstants.setBold(errStyle,font.isBold());
  StyleConstants.setItalic(errStyle,font.isItalic());
  consoleTextPane.setBackground(bgColor);
  this.setViewportView(consoleTextPane);
  System.out.println("BLRHUHG");
  FontMetrics metrics=this.getFontMetrics(font);
  int height=metrics.getAscent() + metrics.getDescent();
  int lines=PdePreferences.getInteger("console.lines");
  int sizeFudge=6;
  setPreferredSize(new Dimension(1024,(height * lines) + sizeFudge));
  setMinimumSize(new Dimension(1024,(height * 4) + sizeFudge));
  System.out.println("BLRHUHG 2");
  if (systemOut == null) {
    systemOut=System.out;
    systemErr=System.err;
    try {
      String outFileName=PdePreferences.get("console.output.file");
      if (outFileName != null) {
        stdoutFile=new FileOutputStream(outFileName);
      }
      String errFileName=PdePreferences.get("console.error.file");
      if (errFileName != null) {
        stderrFile=new FileOutputStream(outFileName);
      }
    }
 catch (    IOException e) {
      PdeBase.showWarning("Console Error","A problem occurred while trying to open the\n" + "files used to store the console output.",e);
    }
    System.out.println("BLRHUHG 2b ");
    consoleOut=new PrintStream(new PdeEditorConsoleStream(this,false,stdoutFile));
    System.out.println("BLRHUHG 2c " + consoleOut);
    consoleErr=new PrintStream(new PdeEditorConsoleStream(this,true,stderrFile));
    System.out.println("BLRHUHG 2d " + consoleErr);
    if (PdePreferences.getBoolean("console")) {
      System.out.println("BLRHUHG 2e " + consoleOut);
      try {
        System.setOut(consoleOut);
        System.out.println("BLRHUHG 2f " + consoleErr);
        System.setErr(consoleErr);
        System.out.println("BLRHUHG 2g " + consoleErr);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  System.out.println("BLRHUHG 3");
  if (PdeBase.platform == PdeBase.MACOSX) {
    setBorder(null);
  }
  System.out.println("BLRHUHG 4");
}
