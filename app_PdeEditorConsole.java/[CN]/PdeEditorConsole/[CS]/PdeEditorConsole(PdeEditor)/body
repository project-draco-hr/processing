{
  this.editor=editor;
  lineCount=PdeBase.getInteger("editor.console.lines",6);
  if (systemOut == null) {
    systemOut=System.out;
    systemErr=System.err;
    boolean tod=((PdeBase.platform != PdeBase.MACOSX) && (PdeBase.platform != PdeBase.MACOS9));
    if (PdeBase.getBoolean("editor.console.out.enabled",tod)) {
      String outFileName=PdeBase.get("editor.console.out.file","lib/stdout.txt");
      try {
        stdoutFile=new FileOutputStream(outFileName);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (PdeBase.getBoolean("editor.console.err.enabled",tod)) {
      String errFileName=PdeBase.get("editor.console.err.file","lib/stderr.txt");
      try {
        stderrFile=new FileOutputStream(errFileName);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    consoleOut=new PrintStream(new PdeEditorConsoleStream(this,false,stdoutFile));
    consoleErr=new PrintStream(new PdeEditorConsoleStream(this,true,stderrFile));
    System.setOut(consoleOut);
    System.setErr(consoleErr);
  }
  maxLineCount=1000;
  lines=new String[maxLineCount];
  isError=new boolean[maxLineCount];
  for (int i=0; i < maxLineCount; i++) {
    lines[i]="";
    isError[i]=false;
  }
  firstLine=0;
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      int x=e.getX();
      int y=e.getY();
      if (!((x > scrollLeft) && (x < scrollRight)))       return;
      if ((y > scrollUpTop) && (y < scrollUpBottom)) {
        scrollOffset-=lineCount;
        update();
      }
 else       if ((y > scrollDownTop) && (y < scrollDownBottom)) {
        scrollOffset+=lineCount;
        if (scrollOffset > 0)         scrollOffset=0;
        update();
      }
    }
  }
);
}
