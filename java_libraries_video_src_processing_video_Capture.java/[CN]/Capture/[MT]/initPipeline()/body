{
  String fpsStr="";
  if (!frameRateString.equals("")) {
    fpsStr=", framerate=" + frameRateString;
  }
  if (bufferSink != null || (Video.useGLBufferSink && parent.g.isGL())) {
    useBufferSink=true;
    if (bufferSink != null) {
      getSinkMethods();
    }
    if (copyMask == null || copyMask.equals("")) {
      initCopyMask();
    }
    String caps="width=" + reqWidth + ", height="+ reqHeight+ fpsStr+ ", "+ copyMask;
    natSink=new BufferDataAppSink("nat",caps,new BufferDataAppSink.Listener(){
      public void bufferFrame(      int w,      int h,      Buffer buffer){
        invokeEvent(w,h,buffer);
      }
    }
);
    natSink.setAutoDisposeBuffer(false);
    pipeline.addMany(sourceElement,natSink);
    Element.linkMany(sourceElement,natSink);
  }
 else {
    Element conv=ElementFactory.make("ffmpegcolorspace","ColorConverter");
    Element videofilter=ElementFactory.make("capsfilter","ColorFilter");
    videofilter.setCaps(new Caps("video/x-raw-rgb, width=" + reqWidth + ", height="+ reqHeight+ ", bpp=32, depth=24"+ fpsStr));
    rgbSink=new RGBDataAppSink("rgb",new RGBDataAppSink.Listener(){
      public void rgbFrame(      int w,      int h,      IntBuffer buffer){
        invokeEvent(w,h,buffer);
      }
    }
);
    rgbSink.setPassDirectBuffer(Video.passDirectBuffer);
    pipeline.addMany(sourceElement,conv,videofilter,rgbSink);
    Element.linkMany(sourceElement,conv,videofilter,rgbSink);
  }
  pipelineReady=true;
  newFrame=false;
}
