{
  String fpsStr="";
  if (!fps.equals("")) {
    fpsStr=", framerate=" + fps;
  }
  if (copyHandler != null) {
    try {
      copyBufferMethod=copyHandler.getClass().getMethod("addPixelsToBuffer",new Class[]{Object.class,IntBuffer.class,int.class,int.class});
      copyBufferMode=true;
    }
 catch (    Exception e) {
      copyBufferMode=false;
    }
    if (copyBufferMode) {
      try {
        Method meth=copyHandler.getClass().getMethod("setPixelSource",new Class[]{Object.class});
        meth.invoke(copyHandler,new Object[]{this});
      }
 catch (      Exception e) {
        copyBufferMode=false;
      }
      if (copyBufferMode) {
        String caps="width=" + reqWidth + ", height="+ reqHeight+ ", "+ copyMask;
        natSink=new BufferDataAppSink("nat",caps,new BufferDataAppSink.Listener(){
          public void bufferFrame(          int w,          int h,          Buffer buffer){
            invokeEvent(w,h,buffer);
          }
        }
);
        natSink.setAutoDisposeBuffer(false);
        gpipeline.addMany(gsource,natSink);
        Element.linkMany(gsource,natSink);
      }
    }
  }
  if (!copyBufferMode) {
    Element conv=ElementFactory.make("ffmpegcolorspace","ColorConverter");
    Element videofilter=ElementFactory.make("capsfilter","ColorFilter");
    videofilter.setCaps(new Caps("video/x-raw-rgb, width=" + reqWidth + ", height="+ reqHeight+ ", bpp=32, depth=24"+ fpsStr));
    rgbSink=new RGBDataAppSink("rgb",new RGBDataAppSink.Listener(){
      public void rgbFrame(      int w,      int h,      IntBuffer buffer){
        invokeEvent(w,h,buffer);
      }
    }
);
    rgbSink.setPassDirectBuffer(GSVideo.passDirectBuffer);
    gpipeline.addMany(gsource,conv,videofilter,rgbSink);
    Element.linkMany(gsource,conv,videofilter,rgbSink);
  }
  pipelineReady=true;
}
