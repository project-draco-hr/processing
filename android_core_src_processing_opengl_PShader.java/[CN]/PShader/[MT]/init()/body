{
  if (glProgram == 0 || contextIsOutdated()) {
    context=pgl.getCurrentContext();
    glProgram=pgMain.createGLSLProgramObject(context.code());
    boolean hasVert=false;
    if (vertexFilename != null) {
      hasVert=loadVertexShader(vertexFilename);
    }
 else     if (vertexURL != null) {
      hasVert=loadVertexShader(vertexURL);
    }
 else {
      PGraphics.showException("Vertex shader filenames and URLs are both null!");
    }
    boolean hasFrag=false;
    if (fragmentFilename != null) {
      hasFrag=loadFragmentShader(fragmentFilename);
    }
 else     if (fragmentURL != null) {
      hasFrag=loadFragmentShader(fragmentURL);
    }
 else {
      PGraphics.showException("Fragment shader filenames and URLs are both null!");
    }
    boolean vertRes=true;
    if (hasVert) {
      vertRes=compileVertexShader();
    }
    boolean fragRes=true;
    if (hasFrag) {
      fragRes=compileFragmentShader();
    }
    if (vertRes && fragRes) {
      if (hasVert) {
        pgl.glAttachShader(glProgram,glVertex);
      }
      if (hasFrag) {
        pgl.glAttachShader(glProgram,glFragment);
      }
      pgl.glLinkProgram(glProgram);
      int[] linked=new int[1];
      pgl.glGetProgramiv(glProgram,PGL.GL_LINK_STATUS,linked,0);
      if (linked[0] == PGL.GL_FALSE) {
        PGraphics.showException("Cannot link shader program:\n" + pgl.glGetProgramInfoLog(glProgram));
      }
      pgl.glValidateProgram(glProgram);
      int[] validated=new int[1];
      pgl.glGetProgramiv(glProgram,PGL.GL_VALIDATE_STATUS,validated,0);
      if (validated[0] == PGL.GL_FALSE) {
        PGraphics.showException("Cannot validate shader program:\n" + pgl.glGetProgramInfoLog(glProgram));
      }
    }
  }
}
