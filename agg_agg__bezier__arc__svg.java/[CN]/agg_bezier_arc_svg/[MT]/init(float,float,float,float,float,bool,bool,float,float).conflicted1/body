{
  m_radii_ok=true;
  if (rx < 0.0)   rx=-rx;
  if (ry < 0.0)   ry=-rx;
  float dx2=(x0 - x2) / 2.0;
  float dy2=(y0 - y2) / 2.0;
  float cos_a=cos(angle);
  float sin_a=sin(angle);
  float x1=cos_a * dx2 + sin_a * dy2;
  float y1=-sin_a * dx2 + cos_a * dy2;
  float prx=rx * rx;
  float pry=ry * ry;
  float px1=x1 * x1;
  float py1=y1 * y1;
  float radii_check=px1 / prx + py1 / pry;
  if (radii_check > 1.0) {
    rx=sqrt(radii_check) * rx;
    ry=sqrt(radii_check) * ry;
    prx=rx * rx;
    pry=ry * ry;
    if (radii_check > 10.0)     m_radii_ok=false;
  }
  float sign=(large_arc_flag == sweep_flag) ? -1.0 : 1.0;
  float sq=(prx * pry - prx * py1 - pry * px1) / (prx * py1 + pry * px1);
  float coef=sign * sqrt((sq < 0) ? 0 : sq);
  float cx1=coef * ((rx * y1) / ry);
  float cy1=coef * -((ry * x1) / rx);
  float sx2=(x0 + x2) / 2.0;
  float sy2=(y0 + y2) / 2.0;
  float cx=sx2 + (cos_a * cx1 - sin_a * cy1);
  float cy=sy2 + (sin_a * cx1 + cos_a * cy1);
  float ux=(x1 - cx1) / rx;
  float uy=(y1 - cy1) / ry;
  float vx=(-x1 - cx1) / rx;
  float vy=(-y1 - cy1) / ry;
  float p, n;
  n=sqrt(ux * ux + uy * uy);
  p=ux;
  sign=(uy < 0) ? -1.0 : 1.0;
  float v=p / n;
  if (v < -1.0)   v=-1.0;
  if (v > 1.0)   v=1.0;
  float start_angle=sign * acos(v);
  n=sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));
  p=ux * vx + uy * vy;
  sign=(ux * vy - uy * vx < 0) ? -1.0 : 1.0;
  v=p / n;
  if (v < -1.0)   v=-1.0;
  if (v > 1.0)   v=1.0;
  float sweep_angle=sign * acos(v);
  if (!sweep_flag && sweep_angle > 0) {
    sweep_angle-=pi * 2.0;
  }
 else   if (sweep_flag && sweep_angle < 0) {
    sweep_angle+=pi * 2.0;
  }
  m_arc.init(0.0,0.0,rx,ry,start_angle,sweep_angle);
  trans_affine mtx=trans_affine_rotation(angle);
  mtx*=trans_affine_translation(cx,cy);
  for (unsigned i=2; i < m_arc.num_vertices() - 2; i+=2) {
    mtx.transform(m_arc.vertices() + i,m_arc.vertices() + i + 1);
  }
  m_arc.vertices()[0]=x0;
  m_arc.vertices()[1]=y0;
  if (m_arc.num_vertices() > 2) {
    m_arc.vertices()[m_arc.num_vertices() - 2]=x2;
    m_arc.vertices()[m_arc.num_vertices() - 1]=y2;
  }
}
