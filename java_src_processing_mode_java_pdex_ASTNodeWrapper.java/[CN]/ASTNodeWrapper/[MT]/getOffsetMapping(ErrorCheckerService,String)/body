{
  Base.log("Src:" + source);
  String sourceAlt=new String(source);
  String sourceJava=ecs.astGenerator.getJavaSourceCodeLine(lineNumber);
  TreeMap<Integer,Integer> offsetmap=new TreeMap<Integer,Integer>();
  if (sourceJava.trim().startsWith("public") && !source.startsWith("public")) {
    offsetmap.put(0,6);
  }
  final String webColorRegexp="#{1}[A-F|a-f|0-9]{6}\\W";
  Pattern webPattern=Pattern.compile(webColorRegexp);
  Matcher webMatcher=webPattern.matcher(sourceAlt);
  while (webMatcher.find()) {
    offsetmap.put(webMatcher.end() - 1,3);
  }
  final String colorTypeRegex="color(?![a-zA-Z0-9_])(?=\\[*)(?!(\\s*\\())";
  Pattern colorPattern=Pattern.compile(colorTypeRegex);
  Matcher colorMatcher=colorPattern.matcher(sourceAlt);
  while (colorMatcher.find()) {
    offsetmap.put(colorMatcher.end() - 1,-2);
  }
  String dataTypeFunc[]={"int","char","float","boolean","byte"};
  for (  String dataType : dataTypeFunc) {
    String dataTypeRegexp="\\b" + dataType + "\\s*\\(";
    Pattern pattern=Pattern.compile(dataTypeRegexp);
    Matcher matcher=pattern.matcher(sourceAlt);
    while (matcher.find()) {
      offsetmap.put(matcher.end() - 1,("PApplet.parse").length());
    }
    matcher.reset();
    sourceAlt=matcher.replaceAll("PApplet.parse" + Character.toUpperCase(dataType.charAt(0)) + dataType.substring(1)+ "(");
  }
  if (offsetmap.isEmpty()) {
    Base.log("No offset matching needed.");
    return null;
  }
  webMatcher=webPattern.matcher(sourceAlt);
  while (webMatcher.find()) {
    String found=sourceAlt.substring(webMatcher.start(),webMatcher.end());
    sourceAlt=webMatcher.replaceFirst("0xff" + found.substring(1));
    webMatcher=webPattern.matcher(sourceAlt);
  }
  colorMatcher=colorPattern.matcher(sourceAlt);
  sourceAlt=colorMatcher.replaceAll("int");
  Base.log("From direct source: ");
  Base.log(sourceAlt);
  int javaCodeMap[]=new int[source.length() * 2];
  int pdeCodeMap[]=new int[source.length() * 2];
  int pi=1, pj=1;
  int keySum=0;
  for (  Integer key : offsetmap.keySet()) {
    for (; pi < key + keySum; pi++) {
      javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
    }
    for (; pj < key; pj++) {
      pdeCodeMap[pj]=pdeCodeMap[pj - 1] + 1;
    }
    Base.log(key + ":" + offsetmap.get(key));
    int kval=offsetmap.get(key);
    if (kval > 0) {
      pi--;
      pj--;
      for (int i=0; i < kval; i++, pi++, pj++) {
        if (pi > 1 && pj > 1) {
          javaCodeMap[pi]=javaCodeMap[pi - 1];
          pdeCodeMap[pj]=pdeCodeMap[pj - 1] + 1;
        }
      }
    }
 else {
      pi--;
      pj--;
      for (int i=0; i < -kval; i++, pi++, pj++) {
        if (pi > 1 && pj > 1) {
          javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
          pdeCodeMap[pj]=pdeCodeMap[pj - 1];
        }
      }
    }
    keySum+=kval;
  }
  javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
  pdeCodeMap[pj]=pdeCodeMap[pj - 1] + 1;
  while (pi < sourceAlt.length()) {
    javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
    pi++;
  }
  while (pj < source.length()) {
    pdeCodeMap[pj]=pdeCodeMap[pj - 1] + 1;
    pj++;
  }
  if (Base.DEBUG) {
    for (int i=0; i < pdeCodeMap.length; i++) {
      if (pdeCodeMap[i] > 0 || javaCodeMap[i] > 0 || i == 0) {
        if (i < source.length())         System.out.print(source.charAt(i));
        System.out.print(pdeCodeMap[i] + " - " + javaCodeMap[i]);
        if (i < sourceAlt.length())         System.out.print(sourceAlt.charAt(i));
        System.out.print(" <-[" + i + "]");
        System.out.println();
      }
    }
    System.out.println();
  }
  return new int[][]{javaCodeMap,pdeCodeMap};
}
