{
  if (!(node instanceof SimpleName)) {
    return false;
  }
  SimpleName nodeName=(SimpleName)node;
  try {
    int javaLineNumber=getLineNumber(nodeName);
    int pdeOffs[]=editor.getErrorChecker().calculateTabIndexAndLineNumber(javaLineNumber);
    PlainDocument javaSource=new PlainDocument();
    javaSource.insertString(0,editor.getErrorChecker().lastCodeCheckResult.sourceCode,null);
    Element lineElement=javaSource.getDefaultRootElement().getElement(javaLineNumber - 1);
    if (lineElement == null) {
      Messages.log(lineNumber + " line element null while highlighting " + nodeName);
      return false;
    }
    String javaLine=javaSource.getText(lineElement.getStartOffset(),lineElement.getEndOffset() - lineElement.getStartOffset());
    editor.getSketch().setCurrentCode(pdeOffs[0]);
    String pdeLine=editor.getLineText(pdeOffs[1]);
    String lookingFor=nodeName.toString();
    Messages.log(lookingFor + ", " + nodeName.getStartPosition());
    Messages.log(javaLineNumber + " JL " + javaLine+ " LSO "+ lineElement.getStartOffset()+ ","+ lineElement.getEndOffset());
    Messages.log(pdeOffs[1] + " PL " + pdeLine);
    if (!javaLine.contains(lookingFor) || !pdeLine.contains(lookingFor)) {
      Messages.loge("Logical error in highLightNode(). Please file a bug report.");
      return false;
    }
    OffsetMatcher ofm=new OffsetMatcher(pdeLine,javaLine);
    int highlightStart=ofm.getPdeOffForJavaOff(nodeName.getStartPosition() - lineElement.getStartOffset(),nodeName.getLength());
    if (highlightStart == -1) {
      Messages.loge("Logical error in highLightNode() during offset matching. " + "Please file a bug report.");
      return false;
    }
    int lso=editor.getTextArea().getLineStartOffset(pdeOffs[1]);
    highlightStart+=lso;
    editor.setSelection(highlightStart,highlightStart + nodeName.getLength());
    return true;
  }
 catch (  BadLocationException e) {
    Messages.loge("BLE in highLightNode() for " + nodeName);
    e.printStackTrace();
  }
  return false;
}
