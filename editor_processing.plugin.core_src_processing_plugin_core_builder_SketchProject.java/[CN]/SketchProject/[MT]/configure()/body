{
  if (!project.isOpen())   return;
  IFolder codeFolder=project.getFolder("code");
  IFolder dataFolder=project.getFolder("data");
  IFolder buildFolder=project.getFolder("bin");
  IFolder appletFolder=project.getFolder("applet");
  IFolder javaBuildFolder=buildFolder.getFolder("compile");
  if (!codeFolder.exists())   buildFolder.create(IResource.NONE,true,null);
  if (!dataFolder.exists())   dataFolder.create(IResource.NONE,true,null);
  if (!buildFolder.exists())   buildFolder.create(IResource.NONE,true,null);
  if (!appletFolder.exists())   appletFolder.create(IResource.NONE,true,null);
  if (!javaBuildFolder.exists())   javaBuildFolder.create(IResource.NONE,true,null);
  IJavaProject jproject=JavaCore.create(project);
  jproject.setOutputLocation(javaBuildFolder.getFullPath(),new NullProgressMonitor());
  IProjectDescription description=this.project.getDescription();
  List<ICommand> newCmds=new ArrayList<ICommand>();
  newCmds.addAll(Arrays.asList(description.getBuildSpec()));
  int ploc=-1;
  for (int i=0; i < newCmds.size(); i++) {
    if (newCmds.get(i).getBuilderName().equals(SketchBuilder.BUILDER_ID))     ploc=i;
  }
  if (ploc == 0)   return;
  if (ploc > 0)   newCmds.remove(ploc);
  ICommand command=description.newCommand();
  command.setBuilderName(SketchBuilder.BUILDER_ID);
  newCmds.add(0,command);
  description.setBuildSpec((ICommand[])newCmds.toArray(new ICommand[newCmds.size()]));
  project.setDescription(description,null);
  project.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
}
