{
  IJavaProject jproject=this.getJavaProject();
  IPath containerPath=new Path(JavaRuntime.JRE_CONTAINER);
  IVMInstall vm=JavaRuntime.getDefaultVMInstall();
  IPath vmPath=containerPath.append(vm.getVMInstallType().getId()).append(vm.getName());
  HashSet<IClasspathEntry> entries=new HashSet<IClasspathEntry>();
  entries.add(JavaCore.newContainerEntry(vmPath.makeAbsolute()));
  IPath plibs=new Path(ProcessingCore.getProcessingCore().getCoreJarFile().getAbsolutePath());
  entries.add(JavaCore.newLibraryEntry(plibs,null,null,false));
  if (srcFolderPathList != null) {
    for (    IPath p : srcFolderPathList) {
      if (p != null)       entries.add(JavaCore.newSourceEntry(p.makeAbsolute()));
    }
  }
  if (libraryJarPathList != null) {
    for (    IPath p : libraryJarPathList) {
      if (p != null) {
        entries.add(JavaCore.newLibraryEntry(p.makeAbsolute(),null,null,false));
      }
    }
  }
  IClasspathEntry[] classpathEntries=new IClasspathEntry[entries.size()];
  int i=0;
  for (  IClasspathEntry cpe : entries) {
    classpathEntries[i++]=cpe;
  }
  try {
    jproject.setOutputLocation(getJavaBuildFolder().getFullPath(),null);
    jproject.setRawClasspath(classpathEntries,null);
  }
 catch (  Exception e) {
    ProcessingLog.logError("There was a problem setting the compiler class path.",e);
  }
  Hashtable options=JavaCore.getOptions();
  options.put(JavaCore.COMPILER_PB_ANNOTATION_SUPER_INTERFACE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_AUTOBOXING,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_DEPRECATION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_EMPTY_STATEMENT,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_ENUM_IDENTIFIER,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_FALLTHROUGH_CASE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_FIELD_HIDING,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_FINAL_PARAMETER_BOUND,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_HIDDEN_CATCH_BLOCK,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_INDIRECT_STATIC_ACCESS,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_INVALID_JAVADOC,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_INVALID_JAVADOC_TAGS,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_INVALID_JAVADOC_TAGS__DEPRECATED_REF,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_MISSING_DEPRECATED_ANNOTATION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS_VISIBILITY,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_MISSING_OVERRIDE_ANNOTATION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_MISSING_SERIAL_VERSION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_NO_EFFECT_ASSIGNMENT,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_NULL_REFERENCE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_PARAMETER_ASSIGNMENT,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_POSSIBLE_ACCIDENTAL_BOOLEAN_ASSIGNMENT,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_SPECIAL_PARAMETER_HIDING_FIELD,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_STATIC_ACCESS_RECEIVER,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_SUPPRESS_WARNINGS,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_SYNTHETIC_ACCESS_EMULATION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_TYPE_PARAMETER_HIDING,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNDOCUMENTED_EMPTY_BLOCK,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNHANDLED_WARNING_TOKEN,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNNECESSARY_ELSE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNNECESSARY_TYPE_CHECK,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNQUALIFIED_FIELD_ACCESS,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_LABEL,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_IMPORT,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_LOCAL,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_PARAMETER,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_PARAMETER_WHEN_IMPLEMENTING_ABSTRACT,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_PARAMETER_WHEN_OVERRIDING_CONCRETE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_PARAMETER_INCLUDE_DOC_COMMENT_REFERENCE,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER,JavaCore.IGNORE);
  options.put(JavaCore.COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST,JavaCore.IGNORE);
  JavaCore.setOptions(options);
}
