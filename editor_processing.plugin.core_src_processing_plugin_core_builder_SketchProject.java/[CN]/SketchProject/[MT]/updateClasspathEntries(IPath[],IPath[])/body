{
  IJavaProject jproject=this.getJavaProject();
  IPath containerPath=new Path(JavaRuntime.JRE_CONTAINER);
  IVMInstall vm=JavaRuntime.getDefaultVMInstall();
  IPath vmPath=containerPath.append(vm.getVMInstallType().getId()).append(vm.getName());
  HashSet<IClasspathEntry> entries=new HashSet<IClasspathEntry>();
  entries.add(JavaCore.newContainerEntry(vmPath.makeAbsolute()));
  IPath plibs=new Path(ProcessingCore.getProcessingCore().getCoreJarFile().getAbsolutePath());
  entries.add(JavaCore.newLibraryEntry(plibs,null,null,false));
  if (srcFolderPathList != null) {
    for (    IPath p : srcFolderPathList) {
      if (p != null) {
        entries.add(JavaCore.newSourceEntry(p.makeAbsolute()));
      }
    }
  }
  if (libraryJarPathList != null) {
    for (    IPath p : libraryJarPathList) {
      if (p != null) {
        entries.add(JavaCore.newLibraryEntry(p.makeAbsolute(),null,null,false));
      }
    }
  }
  IClasspathEntry[] classpathEntries=new IClasspathEntry[entries.size()];
  int i=0;
  for (  IClasspathEntry cpe : entries) {
    classpathEntries[i++]=cpe;
  }
  jproject.setOutputLocation(getJavaBuildFolder().getFullPath(),null);
  jproject.setRawClasspath(classpathEntries,null);
  ignoreWarnings();
}
