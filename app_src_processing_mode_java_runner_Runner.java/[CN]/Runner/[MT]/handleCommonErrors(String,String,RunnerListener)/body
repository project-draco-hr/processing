{
  if (exceptionClass.equals("java.lang.OutOfMemoryError")) {
    if (message.contains("exceeds VM budget")) {
      listener.statusError("OutOfMemoryError: This code attempts to use more memory than available.");
      System.err.println("An OutOfMemoryError means that your code is either using up too much memory");
      System.err.println("because of a bug (e.g. creating an array that's too large, or unintentionally");
      System.err.println("loading thousands of images), or simply that it's trying to use more memory");
      System.err.println("than what is supported by the current device.");
    }
 else {
      listener.statusError("OutOfMemoryError: You may need to increase the memory setting in Preferences.");
      System.err.println("An OutOfMemoryError means that your code is either using up too much memory");
      System.err.println("because of a bug (e.g. creating an array that's too large, or unintentionally");
      System.err.println("loading thousands of images), or that your sketch may need more memory to run.");
      System.err.println("If your sketch uses a lot of memory (for instance if it loads a lot of data files)");
      System.err.println("you can increase the memory available to your sketch using the Preferences window.");
    }
  }
 else   if (exceptionClass.equals("java.lang.UnsatisfiedLinkError")) {
    listener.statusError("A library used by this sketch is not installed properly.");
    System.err.println("A library relies on native code that's not available.");
    System.err.println("Or only works properly when the sketch is run as a " + ((Base.getNativeBits() == 32) ? "64-bit " : "32-bit ") + " application.");
  }
 else   if (exceptionClass.equals("java.lang.StackOverflowError")) {
    listener.statusError("StackOverflowError: This sketch is attempting too much recursion.");
    System.err.println("A StackOverflowError means that you have a bug that's causing a function");
    System.err.println("to be called recursively (it's calling itself and going in circles),");
    System.err.println("or you're intentionally calling a recursive function too much,");
    System.err.println("and your code should be rewritten in a more efficient manner.");
  }
 else   if (exceptionClass.equals("java.lang.UnsupportedClassVersionError")) {
    listener.statusError("UnsupportedClassVersionError: A library is using code compiled with an unsupported version of Java.");
    System.err.println("This version of Processing only supports libraries and JAR files compiled for Java 1.6 or earlier.");
    System.err.println("A library used by this sketch was compiled for Java 1.7 or later, ");
    System.err.println("and needs to be recompiled to be compatible with Java 1.6.");
  }
 else   if (exceptionClass.equals("java.lang.NoSuchMethodError") || exceptionClass.equals("java.lang.NoSuchFieldError")) {
    listener.statusError(exceptionClass.substring(10) + ": " + "You may be using a library that's incompatible "+ "with this version of Processing.");
  }
 else {
    return false;
  }
  return true;
}
