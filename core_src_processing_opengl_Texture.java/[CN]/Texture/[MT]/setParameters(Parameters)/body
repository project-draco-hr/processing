{
  if (params.target == TEX2D) {
    glTarget=PGL.TEXTURE_2D;
  }
 else {
    throw new RuntimeException("Unknown texture target");
  }
  if (params.format == RGB) {
    glFormat=PGL.RGB;
  }
 else   if (params.format == ARGB) {
    glFormat=PGL.RGBA;
  }
 else   if (params.format == ALPHA) {
    glFormat=PGL.ALPHA;
  }
 else {
    throw new RuntimeException("Unknown texture format");
  }
  boolean mipmaps=params.mipmaps && PGL.MIPMAPS_ENABLED;
  if (mipmaps && !PGraphicsOpenGL.autoMipmapGenSupported) {
    PGraphics.showWarning("Mipmaps were requested but automatic mipmap " + "generation is not supported and manual " + "generation still not implemented, so mipmaps "+ "will be disabled.");
    mipmaps=false;
  }
  if (params.sampling == POINT) {
    glMagFilter=PGL.NEAREST;
    glMinFilter=PGL.NEAREST;
  }
 else   if (params.sampling == LINEAR) {
    glMagFilter=PGL.NEAREST;
    glMinFilter=mipmaps ? PGL.LINEAR_MIPMAP_NEAREST : PGL.LINEAR;
  }
 else   if (params.sampling == BILINEAR) {
    glMagFilter=PGL.LINEAR;
    glMinFilter=mipmaps ? PGL.LINEAR_MIPMAP_NEAREST : PGL.LINEAR;
  }
 else   if (params.sampling == TRILINEAR) {
    glMagFilter=PGL.LINEAR;
    glMinFilter=mipmaps ? PGL.LINEAR_MIPMAP_LINEAR : PGL.LINEAR;
  }
 else {
    throw new RuntimeException("Unknown texture filtering mode");
  }
  if (params.wrapU == CLAMP) {
    glWrapS=PGL.CLAMP_TO_EDGE;
  }
 else   if (params.wrapU == REPEAT) {
    glWrapS=PGL.REPEAT;
  }
 else {
    throw new RuntimeException("Unknown wrapping mode");
  }
  if (params.wrapV == CLAMP) {
    glWrapT=PGL.CLAMP_TO_EDGE;
  }
 else   if (params.wrapV == REPEAT) {
    glWrapT=PGL.REPEAT;
  }
 else {
    throw new RuntimeException("Unknown wrapping mode");
  }
  usingMipmaps=glMinFilter == PGL.LINEAR_MIPMAP_NEAREST || glMinFilter == PGL.LINEAR_MIPMAP_LINEAR;
  usingRepeat=glWrapS == PGL.REPEAT || glWrapT == PGL.REPEAT;
  invertedX=false;
  invertedY=false;
}
