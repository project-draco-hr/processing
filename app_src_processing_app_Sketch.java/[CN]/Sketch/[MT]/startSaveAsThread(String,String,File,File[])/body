{
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      final JFrame frame=new JFrame("Saving \u201C" + newName + "\u201C...");
      frame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
      Box box=Box.createVerticalBox();
      box.setBorder(new EmptyBorder(16,16,16,16));
      if (Platform.isMacOS()) {
        frame.setBackground(Color.WHITE);
      }
      JLabel label=new JLabel("Saving additional files from the sketch folder...");
      box.add(label);
      box.add(Box.createVerticalStrut(8));
      final JProgressBar progressBar=new JProgressBar(0,100);
      progressBar.setValue(0);
      progressBar.setStringPainted(true);
      box.add(progressBar);
      frame.getContentPane().add(box);
      frame.pack();
      frame.setLocationRelativeTo(editor);
      Toolkit.setIcon(frame);
      frame.setVisible(true);
      new SwingWorker<Void,Void>(){
        @Override protected Void doInBackground() throws Exception {
          addPropertyChangeListener(new PropertyChangeListener(){
            public void propertyChange(            PropertyChangeEvent evt){
              if ("progress".equals(evt.getPropertyName())) {
                progressBar.setValue((Integer)evt.getNewValue());
              }
            }
          }
);
          long totalSize=0;
          for (          File copyable : copyItems) {
            totalSize+=Util.calcSize(copyable);
          }
          long progress=0;
          setProgress(0);
          for (          File copyable : copyItems) {
            if (copyable.isDirectory()) {
              copyDir(copyable,new File(newFolder,copyable.getName()),progress,totalSize);
              progress+=Util.calcSize(copyable);
            }
 else {
              copyFile(copyable,new File(newFolder,copyable.getName()),progress,totalSize);
              if (Util.calcSize(copyable) < 512 * 1024) {
                progress+=Util.calcSize(copyable);
                setProgress((int)(progress * 100L / totalSize));
              }
            }
          }
          return null;
        }
        /** 
 * Overloaded copyFile that is called whenever a Save As is being done,
 * so that the ProgressBar is updated for very large files as well.
 */
        void copyFile(        File sourceFile,        File targetFile,        long progress,        long totalSize) throws IOException {
          BufferedInputStream from=new BufferedInputStream(new FileInputStream(sourceFile));
          BufferedOutputStream to=new BufferedOutputStream(new FileOutputStream(targetFile));
          byte[] buffer=new byte[16 * 1024];
          int bytesRead;
          int progRead=0;
          while ((bytesRead=from.read(buffer)) != -1) {
            to.write(buffer,0,bytesRead);
            progRead+=bytesRead;
            if (progRead >= 512 * 1024) {
              progress+=progRead;
              setProgress((int)(100L * progress / totalSize));
              progRead=0;
            }
          }
          setProgress((int)(100L * progress / totalSize));
          from.close();
          from=null;
          to.flush();
          to.close();
          to=null;
          targetFile.setLastModified(sourceFile.lastModified());
          targetFile.setExecutable(sourceFile.canExecute());
        }
        long copyDir(        File sourceDir,        File targetDir,        long progress,        long totalSize) throws IOException {
          if (sourceDir.equals(targetDir)) {
            final String urDum="source and target directories are identical";
            throw new IllegalArgumentException(urDum);
          }
          targetDir.mkdirs();
          String files[]=sourceDir.list();
          for (          String filename : files) {
            if (filename.charAt(0) == '.') {
              continue;
            }
            File source=new File(sourceDir,filename);
            File target=new File(targetDir,filename);
            if (source.isDirectory()) {
              progress=copyDir(source,target,progress,totalSize);
              setProgress((int)(100L * progress / totalSize));
              target.setLastModified(source.lastModified());
            }
 else {
              copyFile(source,target,progress,totalSize);
              progress+=source.length();
              setProgress((int)(100L * progress / totalSize));
            }
          }
          return progress;
        }
        @Override public void done(){
          frame.dispose();
          editor.statusNotice(Language.text("editor.status.saving.done"));
        }
      }
.execute();
    }
  }
);
}
