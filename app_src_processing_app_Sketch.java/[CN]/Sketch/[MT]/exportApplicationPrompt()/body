{
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
  panel.add(Box.createVerticalStrut(6));
  String line1="Export to Application creates double-clickable,";
  String line2="standalone applications for the selected plaforms.";
  JLabel label1=new JLabel(line1,SwingConstants.CENTER);
  JLabel label2=new JLabel(line2,SwingConstants.CENTER);
  label1.setAlignmentX(Component.LEFT_ALIGNMENT);
  label2.setAlignmentX(Component.LEFT_ALIGNMENT);
  panel.add(label1);
  panel.add(label2);
  int wide=label2.getPreferredSize().width;
  panel.add(Box.createVerticalStrut(12));
  final JCheckBox windowsButton=new JCheckBox("Windows");
  windowsButton.setSelected(Preferences.getBoolean("export.application.platform.windows"));
  windowsButton.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Preferences.setBoolean("export.application.platform.windows",windowsButton.isSelected());
    }
  }
);
  final JCheckBox macosxButton=new JCheckBox("Mac OS X");
  macosxButton.setSelected(Preferences.getBoolean("export.application.platform.macosx"));
  macosxButton.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Preferences.setBoolean("export.application.platform.macosx",macosxButton.isSelected());
    }
  }
);
  final JCheckBox linuxButton=new JCheckBox("Linux");
  linuxButton.setSelected(Preferences.getBoolean("export.application.platform.linux"));
  linuxButton.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Preferences.setBoolean("export.application.platform.linux",linuxButton.isSelected());
    }
  }
);
  JPanel platformPanel=new JPanel();
  platformPanel.add(windowsButton);
  platformPanel.add(Box.createHorizontalStrut(6));
  platformPanel.add(macosxButton);
  platformPanel.add(Box.createHorizontalStrut(6));
  platformPanel.add(linuxButton);
  platformPanel.setBorder(new TitledBorder("Platforms"));
  wide=Math.max(wide,platformPanel.getPreferredSize().width);
  platformPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  panel.add(platformPanel);
  final JCheckBox showStopButton=new JCheckBox("Show a Stop button");
  showStopButton.setSelected(Preferences.getBoolean("export.application.stop"));
  showStopButton.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Preferences.setBoolean("export.application.stop",showStopButton.isSelected());
    }
  }
);
  showStopButton.setBorder(new EmptyBorder(3,13,6,13));
  final JCheckBox fullScreenButton=new JCheckBox("Full Screen (Present mode)");
  fullScreenButton.setSelected(Preferences.getBoolean("export.application.fullscreen"));
  fullScreenButton.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      boolean sal=fullScreenButton.isSelected();
      Preferences.setBoolean("export.application.fullscreen",sal);
      showStopButton.setEnabled(sal);
    }
  }
);
  fullScreenButton.setBorder(new EmptyBorder(3,13,3,13));
  JPanel optionPanel=new JPanel();
  optionPanel.setLayout(new BoxLayout(optionPanel,BoxLayout.Y_AXIS));
  optionPanel.add(fullScreenButton);
  optionPanel.add(showStopButton);
  optionPanel.setBorder(new TitledBorder("Options"));
  wide=Math.max(wide,platformPanel.getPreferredSize().width);
  optionPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  panel.add(optionPanel);
  Dimension good;
  good=new Dimension(wide,label1.getPreferredSize().height);
  label1.setMaximumSize(good);
  good=new Dimension(wide,label2.getPreferredSize().height);
  label2.setMaximumSize(good);
  good=new Dimension(wide,platformPanel.getPreferredSize().height);
  platformPanel.setMaximumSize(good);
  good=new Dimension(wide,optionPanel.getPreferredSize().height);
  optionPanel.setMaximumSize(good);
  String[] options={"Export","Cancel"};
  final JOptionPane optionPane=new JOptionPane(panel,JOptionPane.PLAIN_MESSAGE,JOptionPane.YES_NO_OPTION,null,options,options[0]);
  final JDialog dialog=new JDialog(editor,"Export Options",true);
  dialog.setContentPane(optionPane);
  optionPane.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      String prop=e.getPropertyName();
      if (dialog.isVisible() && (e.getSource() == optionPane) && (prop.equals(JOptionPane.VALUE_PROPERTY))) {
        dialog.setVisible(false);
      }
    }
  }
);
  dialog.pack();
  dialog.setResizable(false);
  Rectangle bounds=editor.getBounds();
  dialog.setLocation(bounds.x + (bounds.width - dialog.getSize().width) / 2,bounds.y + (bounds.height - dialog.getSize().height) / 2);
  dialog.setVisible(true);
  Object value=optionPane.getValue();
  if (value.equals(options[0])) {
    return exportApplication();
  }
 else   if (value.equals(options[1]) || value.equals(new Integer(-1))) {
    editor.statusNotice("Export to Application canceled.");
  }
  return false;
}
