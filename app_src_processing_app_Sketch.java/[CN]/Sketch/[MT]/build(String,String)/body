{
  ensureExistence();
  String codeFolderPackages[]=null;
  classPath=buildPath;
  if (codeFolder.exists()) {
    libraryPath=codeFolder.getAbsolutePath();
    String codeFolderClassPath=Compiler.contentsToClassPath(codeFolder);
    classPath+=File.pathSeparator + codeFolderClassPath;
    codeFolderPackages=Compiler.packageListFromClassPath(codeFolderClassPath);
  }
 else {
    libraryPath="";
  }
  StringBuffer bigCode=new StringBuffer(code[0].program);
  int bigCount=countLines(code[0].program);
  for (int i=1; i < codeCount; i++) {
    if (code[i].isExtension("pde")) {
      code[i].preprocOffset=++bigCount;
      bigCode.append('\n');
      bigCode.append(code[i].program);
      bigCount+=countLines(code[i].program);
      code[i].preprocName=null;
    }
  }
  String primaryClassName=null;
  PdePreprocessor preprocessor=new PdePreprocessor();
  try {
    String className=preprocessor.write(bigCode.toString(),buildPath,suggestedClassName,codeFolderPackages,false);
    if (className == null) {
      throw new RunnerException("Could not find main class");
    }
 else {
      code[0].preprocName=className + ".java";
    }
    primaryClassName=className;
  }
 catch (  antlr.RecognitionException re) {
    int errorFile=0;
    int errorLine=re.getLine() - 1;
    for (int i=1; i < codeCount; i++) {
      if (code[i].isExtension("pde") && (code[i].preprocOffset < errorLine)) {
        errorFile=i;
      }
    }
    errorLine-=code[errorFile].preprocOffset;
    String msg=re.getMessage();
    if (msg.equals("expecting RCURLY, found 'null'")) {
      throw new RunnerException("Found one too many { characters " + "without a } to match it.",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("expecting RBRACK") != -1) {
      System.err.println(msg);
      throw new RunnerException("Syntax error, " + "maybe a missing ] character?",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("expecting SEMI") != -1) {
      System.err.println(msg);
      throw new RunnerException("Syntax error, " + "maybe a missing semicolon?",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("expecting RPAREN") != -1) {
      System.err.println(msg);
      throw new RunnerException("Syntax error, " + "maybe a missing right parenthesis?",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("preproc.web_colors") != -1) {
      throw new RunnerException("A web color (such as #ffcc00) " + "must be six digits.",errorFile,errorLine,re.getColumn(),false);
    }
    throw new RunnerException(msg,errorFile,errorLine,re.getColumn());
  }
catch (  antlr.TokenStreamRecognitionException tsre) {
    String mess="^line (\\d+):(\\d+):\\s";
    String[] matches=PApplet.match(tsre.toString(),mess);
    if (matches != null) {
      int errorLine=Integer.parseInt(matches[0]) - 1;
      int errorColumn=Integer.parseInt(matches[1]);
      int errorFile=0;
      for (int i=1; i < codeCount; i++) {
        if (code[i].isExtension("pde") && (code[i].preprocOffset < errorLine)) {
          errorFile=i;
        }
      }
      errorLine-=code[errorFile].preprocOffset;
      throw new RunnerException(tsre.getMessage(),errorFile,errorLine,errorColumn);
    }
 else {
      String msg=tsre.toString();
      throw new RunnerException(msg,0,-1,-1);
    }
  }
catch (  RunnerException pe) {
    throw pe;
  }
catch (  Exception ex) {
    System.err.println("Uncaught exception type:" + ex.getClass());
    ex.printStackTrace();
    throw new RunnerException(ex.toString());
  }
  importedLibraries=new Vector();
  String imports[]=preprocessor.extraImports;
  for (int i=0; i < imports.length; i++) {
    String entry=imports[i].substring(0,imports[i].lastIndexOf('.'));
    File libFolder=(File)Base.importToLibraryTable.get(entry);
    if (libFolder == null) {
      continue;
    }
    importedLibraries.add(libFolder);
    classPath+=Compiler.contentsToClassPath(libFolder);
    libraryPath+=File.pathSeparator + libFolder.getAbsolutePath();
  }
  String javaClassPath=System.getProperty("java.class.path");
  if (javaClassPath.startsWith("\"") && javaClassPath.endsWith("\"")) {
    javaClassPath=javaClassPath.substring(1,javaClassPath.length() - 1);
  }
  classPath+=File.pathSeparator + javaClassPath;
  for (int i=0; i < codeCount; i++) {
    if (code[i].isExtension("java")) {
      String filename=code[i].getFileName();
      try {
        Base.saveFile(code[i].program,new File(buildPath,filename));
      }
 catch (      IOException e) {
        e.printStackTrace();
        throw new RunnerException("Problem moving " + filename + " to the build folder");
      }
      code[i].preprocName=filename;
    }
  }
  Compiler compiler=new Compiler();
  boolean success=compiler.compile(this,buildPath);
  return success ? primaryClassName : null;
}
