{
  String newParentDir=null;
  String newName=null;
  final String oldName2=folder.getName();
  final String PROMPT="Save sketch folder as...";
  if (Preferences.getBoolean("chooser.files.native")) {
    FileDialog fd=new FileDialog(editor,PROMPT,FileDialog.SAVE);
    if (isReadOnly() || isUntitled()) {
      fd.setDirectory(Preferences.get("sketchbook.path"));
    }
 else {
      fd.setDirectory(folder.getParent());
    }
    String oldName=folder.getName();
    fd.setFile(oldName);
    fd.setVisible(true);
    newParentDir=fd.getDirectory();
    newName=fd.getFile();
  }
 else {
    JFileChooser fc=new JFileChooser();
    fc.setDialogTitle(PROMPT);
    if (isReadOnly() || isUntitled()) {
      fc.setCurrentDirectory(new File(Preferences.get("sketchbook.path")));
    }
 else {
      fc.setCurrentDirectory(folder.getParentFile());
    }
    int result=fc.showSaveDialog(editor);
    if (result == JFileChooser.APPROVE_OPTION) {
      File selection=fc.getSelectedFile();
      newParentDir=selection.getParent();
      newName=selection.getName();
    }
  }
  if (newName == null)   return false;
  String sanitaryName=Sketch.checkName(newName);
  File newFolder=new File(newParentDir,sanitaryName);
  if (!sanitaryName.equals(newName) && newFolder.exists()) {
    Base.showMessage("Cannot Save","A sketch with the cleaned name\n" + "???" + sanitaryName + "??? already exists.");
    return false;
  }
  newName=sanitaryName;
  for (int i=1; i < codeCount; i++) {
    if (newName.equalsIgnoreCase(code[i].getPrettyName())) {
      Base.showMessage("Nope","You can't save the sketch as \"" + newName + "\"\n"+ "because the sketch already has a tab with that name.");
      return false;
    }
  }
  if (newFolder.equals(folder)) {
    return save();
  }
  try {
    String newPath=newFolder.getCanonicalPath() + File.separator;
    String oldPath=folder.getCanonicalPath() + File.separator;
    if (newPath.indexOf(oldPath) == 0) {
      Base.showWarning("How very Borges of you","You cannot save the sketch into a folder\n" + "inside itself. This would go on forever.",null);
      return false;
    }
  }
 catch (  IOException e) {
  }
  if (newFolder.exists()) {
    Base.removeDir(newFolder);
  }
  newFolder.mkdirs();
  if (current.isModified()) {
    current.setProgram(editor.getText());
  }
  File[] copyItems=folder.listFiles(new FileFilter(){
    public boolean accept(    File file){
      String name=file.getName();
      if (name.equals(".") || name.equals("..")) {
        return false;
      }
      for (      String ignorable : mode.getIgnorable()) {
        if (name.equals(ignorable)) {
          return false;
        }
      }
      for (      String ext : mode.getExtensions()) {
        if (name.endsWith(ext)) {
          return false;
        }
      }
      if (name.startsWith("screen-")) {
        return false;
      }
      return true;
    }
  }
);
  final File newFolder2=newFolder;
  final File[] copyItems2=copyItems;
  final String newName2=newName;
  javax.swing.SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      new ProgressFrame(copyItems2,newFolder2,oldName2,newName2,editor);
    }
  }
);
  for (int i=1; i < codeCount; i++) {
    File newFile=new File(newFolder,code[i].getFileName());
    code[i].saveAs(newFile);
  }
  if (!isUntitled()) {
    editor.removeRecent();
  }
  File newFile=new File(newFolder,newName + "." + mode.getDefaultExtension());
  code[0].saveAs(newFile);
  updateInternal(newName,newFolder);
  setUntitled(false);
  editor.addRecent();
  return true;
}
