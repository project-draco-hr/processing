{
  ensureExistence();
  if (Preferences.getBoolean("editor.external")) {
    load();
  }
  File appletFolder=new File(appletPath);
  if (Preferences.getBoolean("export.delete_target_folder")) {
    Base.removeDir(appletFolder);
  }
  appletFolder.mkdirs();
  Hashtable zipFileContents=new Hashtable();
  String foundName=build(appletFolder.getPath());
  if (foundName == null)   return false;
  if (!name.equals(foundName)) {
    Base.showWarning("Error during export","Sketch name is " + name + " but the sketch\n"+ "name in the code was "+ foundName,null);
    return false;
  }
  int wide=PApplet.DEFAULT_WIDTH;
  int high=PApplet.DEFAULT_HEIGHT;
  String renderer="";
  String sizeRegex="(?:^|\\s|;)size\\s*\\(\\s*(\\S+)\\s*,\\s*(\\d+),?\\s*([^\\)]*)\\s*\\)";
  String scrubbed=scrubComments(code[0].getProgram());
  String[] matches=PApplet.match(scrubbed,sizeRegex);
  if (matches != null) {
    try {
      wide=Integer.parseInt(matches[0]);
      high=Integer.parseInt(matches[1]);
      if (matches.length == 3)       renderer=matches[2].trim();
    }
 catch (    NumberFormatException e) {
      final String message="The size of this applet could not automatically be\n" + "determined from your code. You'll have to edit the\n" + "HTML file to set the size of the applet.";
      Base.showWarning("Could not find applet size",message,null);
    }
  }
  StringBuffer dbuffer=new StringBuffer();
  String lines[]=PApplet.split(code[0].getProgram(),'\n');
  for (int i=0; i < lines.length; i++) {
    if (lines[i].trim().startsWith("/**")) {
      for (int j=i + 1; j < lines.length; j++) {
        if (lines[j].trim().endsWith("*/")) {
          break;
        }
        int offset=0;
        while ((offset < lines[j].length()) && ((lines[j].charAt(offset) == '*') || (lines[j].charAt(offset) == ' '))) {
          offset++;
        }
        dbuffer.append(lines[j].substring(offset) + "\n");
      }
    }
  }
  String description=dbuffer.toString();
  StringBuffer sources=new StringBuffer();
  for (int i=0; i < codeCount; i++) {
    sources.append("<a href=\"" + code[i].getFileName() + "\">"+ code[i].getPrettyName()+ "</a> ");
  }
  for (int i=0; i < codeCount; i++) {
    try {
      File exportedSource=new File(appletFolder,code[i].getFileName());
      code[i].copyTo(exportedSource);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  boolean separateJar=Preferences.getBoolean("export.applet.separate_jar_files") || codeFolder.exists() || (libraryPath.length() != 0);
  String LOADING_IMAGE="loading.gif";
  File loadingImage=new File(folder,LOADING_IMAGE);
  if (!loadingImage.exists()) {
    loadingImage=new File("lib",LOADING_IMAGE);
  }
  Base.copyFile(loadingImage,new File(appletFolder,LOADING_IMAGE));
  FileOutputStream zipOutputFile=new FileOutputStream(new File(appletFolder,name + ".jar"));
  ZipOutputStream zos=new ZipOutputStream(zipOutputFile);
  ZipEntry entry;
  StringBuffer archives=new StringBuffer();
  archives.append(name + ".jar");
  addManifest(zos);
  if (codeFolder.exists()) {
    String includes=Compiler.contentsToClassPath(codeFolder);
    System.out.println(includes);
    String codeList[]=PApplet.split(includes,File.separatorChar);
    String cp="";
    for (int i=0; i < codeList.length; i++) {
      if (codeList[i].toLowerCase().endsWith(".jar") || codeList[i].toLowerCase().endsWith(".zip")) {
        if (separateJar) {
          File exportFile=new File(codeFolder,codeList[i]);
          String exportFilename=exportFile.getName();
          Base.copyFile(exportFile,new File(appletFolder,exportFilename));
        }
 else {
          cp+=codeList[i] + File.pathSeparatorChar;
        }
      }
    }
    if (!separateJar) {
      packClassPathIntoZipFile(cp,zos,zipFileContents);
    }
  }
  for (  File libraryFolder : importedLibraries) {
    File exportSettings=new File(libraryFolder,"export.txt");
    Hashtable exportTable=readSettings(exportSettings);
    String appletList=(String)exportTable.get("applet");
    String exportList[]=null;
    if (appletList != null) {
      exportList=PApplet.splitTokens(appletList,", ");
    }
 else {
      exportList=libraryFolder.list();
    }
    for (int i=0; i < exportList.length; i++) {
      if (exportList[i].equals(".") || exportList[i].equals(".."))       continue;
      exportList[i]=PApplet.trim(exportList[i]);
      if (exportList[i].equals(""))       continue;
      File exportFile=new File(libraryFolder,exportList[i]);
      if (!exportFile.exists()) {
        System.err.println("File " + exportList[i] + " does not exist");
      }
 else       if (exportFile.isDirectory()) {
        System.err.println("Ignoring sub-folder \"" + exportList[i] + "\"");
      }
 else       if (exportFile.getName().toLowerCase().endsWith(".zip") || exportFile.getName().toLowerCase().endsWith(".jar")) {
        if (separateJar) {
          String exportFilename=exportFile.getName();
          Base.copyFile(exportFile,new File(appletFolder,exportFilename));
          if (renderer.equals("OPENGL") && exportFilename.indexOf("natives") != -1) {
          }
 else {
            archives.append("," + exportFilename);
          }
        }
 else {
          String path=exportFile.getAbsolutePath();
          packClassPathIntoZipFile(path,zos,zipFileContents);
        }
      }
 else {
        Base.copyFile(exportFile,new File(appletFolder,exportFile.getName()));
      }
    }
  }
  String bagelJar="lib/core.jar";
  if (separateJar) {
    Base.copyFile(new File(bagelJar),new File(appletFolder,"core.jar"));
    archives.append(",core.jar");
  }
 else {
    packClassPathIntoZipFile(bagelJar,zos,zipFileContents);
  }
  if (dataFolder.exists()) {
    String dataFiles[]=Base.listFiles(dataFolder,false);
    int offset=folder.getAbsolutePath().length() + 1;
    for (int i=0; i < dataFiles.length; i++) {
      if (PApplet.platform == PApplet.WINDOWS) {
        dataFiles[i]=dataFiles[i].replace('\\','/');
      }
      File dataFile=new File(dataFiles[i]);
      if (dataFile.isDirectory())       continue;
      if (dataFile.getName().charAt(0) == '.')       continue;
      entry=new ZipEntry(dataFiles[i].substring(offset));
      zos.putNextEntry(entry);
      zos.write(Base.loadBytesRaw(dataFile));
      zos.closeEntry();
    }
  }
  String classfiles[]=appletFolder.list();
  for (int i=0; i < classfiles.length; i++) {
    if (classfiles[i].endsWith(".class")) {
      entry=new ZipEntry(classfiles[i]);
      zos.putNextEntry(entry);
      zos.write(Base.loadBytesRaw(new File(appletFolder,classfiles[i])));
      zos.closeEntry();
    }
  }
  for (int i=0; i < classfiles.length; i++) {
    if (classfiles[i].endsWith(".class")) {
      File deadguy=new File(appletFolder,classfiles[i]);
      if (!deadguy.delete()) {
        Base.showWarning("Could not delete",classfiles[i] + " could not \n" + "be deleted from the applet folder.  \n"+ "You'll need to remove it by hand.",null);
      }
    }
  }
  zos.flush();
  zos.close();
  File htmlOutputFile=new File(appletFolder,"index.html");
  PrintWriter htmlWriter=PApplet.createWriter(htmlOutputFile);
  InputStream is=null;
  File customHtml=new File(folder,"applet.html");
  if (customHtml.exists()) {
    is=new FileInputStream(customHtml);
  }
  if (is == null) {
    if (renderer.equals("OPENGL")) {
      is=Base.getStream("export/applet-opengl.html");
    }
 else {
      is=Base.getStream("export/applet.html");
    }
  }
  BufferedReader reader=PApplet.createReader(is);
  String line=null;
  while ((line=reader.readLine()) != null) {
    if (line.indexOf("@@") != -1) {
      StringBuffer sb=new StringBuffer(line);
      int index=0;
      while ((index=sb.indexOf("@@sketch@@")) != -1) {
        sb.replace(index,index + "@@sketch@@".length(),name);
      }
      while ((index=sb.indexOf("@@source@@")) != -1) {
        sb.replace(index,index + "@@source@@".length(),sources.toString());
      }
      while ((index=sb.indexOf("@@archive@@")) != -1) {
        sb.replace(index,index + "@@archive@@".length(),archives.toString());
      }
      while ((index=sb.indexOf("@@width@@")) != -1) {
        sb.replace(index,index + "@@width@@".length(),String.valueOf(wide));
      }
      while ((index=sb.indexOf("@@height@@")) != -1) {
        sb.replace(index,index + "@@height@@".length(),String.valueOf(high));
      }
      while ((index=sb.indexOf("@@description@@")) != -1) {
        sb.replace(index,index + "@@description@@".length(),description);
      }
      line=sb.toString();
    }
    htmlWriter.println(line);
  }
  reader.close();
  htmlWriter.flush();
  htmlWriter.close();
  return true;
}
