{
  this.parent=parent;
  parent.registerMethod("dispose",this);
  parent.registerMethod("pre",this);
  if (parity == 'O') {
    parity=SerialPort.PARITY_ODD;
  }
 else   if (parity == 'E') {
    parity=SerialPort.PARITY_EVEN;
  }
 else   if (parity == 'M') {
    parity=SerialPort.PARITY_MARK;
  }
 else   if (parity == 'S') {
    parity=SerialPort.PARITY_SPACE;
  }
 else {
    parity=SerialPort.PARITY_NONE;
  }
  int stopBitsIdx=SerialPort.STOPBITS_1;
  if (stopBits == 1.5f) {
    stopBitsIdx=SerialPort.STOPBITS_1_5;
  }
 else   if (stopBits == 2) {
    stopBitsIdx=SerialPort.STOPBITS_2;
  }
  port=new SerialPort(portName);
  try {
    port.openPort();
    port.setParams(baudRate,dataBits,stopBitsIdx,parity);
    port.addEventListener(this,SerialPort.MASK_RXCHAR);
  }
 catch (  SerialPortException e) {
    throw new RuntimeException("Error opening serial port " + e.getPortName() + ": "+ e.getExceptionType());
  }
  try {
    serialEventMethod=parent.getClass().getMethod("serialEvent",new Class[]{this.getClass()});
  }
 catch (  Exception e) {
  }
  try {
    serialAvailableMethod=parent.getClass().getMethod("serialAvailable",new Class[]{this.getClass()});
  }
 catch (  Exception e) {
  }
}
