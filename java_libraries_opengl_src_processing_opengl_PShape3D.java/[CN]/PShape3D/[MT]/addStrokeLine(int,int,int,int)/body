{
  PApplet.arrayCopy(inVertices,3 * i0,strokeVertices,3 * vcount,3);
  PApplet.arrayCopy(inNormals,3 * i0,strokeNormals,3 * vcount,3);
  PApplet.arrayCopy(inStroke,5 * i0,strokeColors,4 * vcount,4);
  PApplet.arrayCopy(inVertices,3 * i1,strokeAttributes,4 * vcount,3);
  strokeColors[4 * vcount + 0]=inStroke[5 * i0 + 0];
  strokeColors[4 * vcount + 1]=inStroke[5 * i0 + 1];
  strokeColors[4 * vcount + 2]=inStroke[5 * i0 + 2];
  strokeColors[4 * vcount + 3]=inStroke[5 * i0 + 3];
  strokeAttributes[4 * vcount + 3]=inStroke[5 * i0 + 4];
  strokeIndices[icount++]=vcount;
  vcount++;
  PApplet.arrayCopy(inVertices,3 * i0,strokeVertices,3 * vcount,3);
  PApplet.arrayCopy(inNormals,3 * i0,strokeNormals,3 * vcount,3);
  PApplet.arrayCopy(inStroke,5 * i0,strokeColors,4 * vcount,4);
  PApplet.arrayCopy(inVertices,3 * i1,strokeAttributes,4 * vcount,3);
  strokeAttributes[4 * vcount + 3]=-inStroke[5 * i0 + 4];
  strokeIndices[icount++]=vcount;
  vcount++;
  PApplet.arrayCopy(inVertices,3 * i1,strokeVertices,3 * vcount,3);
  PApplet.arrayCopy(inNormals,3 * i1,strokeNormals,3 * vcount,3);
  PApplet.arrayCopy(inStroke,5 * i1,strokeColors,4 * vcount,4);
  PApplet.arrayCopy(inVertices,3 * i0,strokeAttributes,4 * vcount,3);
  strokeAttributes[4 * vcount + 3]=-inStroke[5 * i1 + 4];
  strokeIndices[icount++]=vcount;
  strokeIndices[icount++]=vcount;
  strokeIndices[icount++]=vcount - 1;
  vcount++;
  PApplet.arrayCopy(inVertices,3 * i1,strokeVertices,3 * vcount,3);
  PApplet.arrayCopy(inNormals,3 * i1,strokeNormals,3 * vcount,3);
  PApplet.arrayCopy(inStroke,5 * i1,strokeColors,4 * vcount,4);
  PApplet.arrayCopy(inVertices,3 * i0,strokeAttributes,4 * vcount,3);
  strokeAttributes[4 * vcount + 3]=+inStroke[5 * i1 + 4];
  strokeIndices[icount++]=vcount;
}
