{
  PTexture tex=null;
  if (textureImage != null) {
    tex=pg.getTexture(textureImage);
    if (tex != null) {
      pgl.enableTexturing(tex.glTarget);
      pgl.glBindTexture(tex.glTarget,tex.glID);
    }
  }
  FillShader shader=pg.getFillShader(pg.lights,tex != null);
  shader.start();
  IndexCache cache=tessGeo.fillIndexCache;
  for (int n=0; n < cache.count; n++) {
    int ioffset=cache.indexOffset[n];
    int icount=cache.indexCount[n];
    int voffset=cache.vertexOffset[n];
    shader.setVertexAttribute(root.glFillVertexBufferID,3,PGL.GL_FLOAT,0,3 * voffset * PGL.SIZEOF_FLOAT);
    shader.setColorAttribute(root.glFillColorBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
    if (pg.lights) {
      shader.setNormalAttribute(root.glFillNormalBufferID,3,PGL.GL_FLOAT,0,3 * voffset * PGL.SIZEOF_FLOAT);
      shader.setAmbientAttribute(root.glFillAmbientBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setSpecularAttribute(root.glFillSpecularBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setEmissiveAttribute(root.glFillEmissiveBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setShininessAttribute(root.glFillShininessBufferID,1,PGL.GL_FLOAT,0,voffset * PGL.SIZEOF_FLOAT);
    }
    if (tex != null) {
      shader.setTexCoordAttribute(root.glFillTexCoordBufferID,2,PGL.GL_FLOAT,0,2 * voffset * PGL.SIZEOF_FLOAT);
      shader.setTexture(tex);
    }
    pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,root.glFillIndexBufferID);
    pgl.glDrawElements(PGL.GL_TRIANGLES,icount,PGL.INDEX_TYPE,ioffset * PGL.SIZEOF_INDEX);
    pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,0);
  }
  shader.stop();
  if (tex != null) {
    pgl.glBindTexture(tex.glTarget,0);
    pgl.disableTexturing(tex.glTarget);
  }
}
