{
  if (family == GROUP) {
    boolean firstGeom=true;
    boolean firstStroke=true;
    boolean firstPoint=true;
    for (int i=0; i < childCount; i++) {
      PShape3D child=(PShape3D)children[i];
      child.aggregateImpl();
      tess.addCounts(child.tess);
      if (0 < child.tess.fillVertexCount) {
        if (firstGeom) {
          tess.setFirstFill(child.tess);
          firstGeom=false;
        }
        tess.setLastFill(child.tess);
      }
      if (0 < child.tess.lineVertexCount) {
        if (firstStroke) {
          tess.setFirstLine(child.tess);
          firstStroke=false;
        }
        tess.setLastLine(child.tess);
      }
      if (0 < child.tess.pointVertexCount) {
        if (firstPoint) {
          tess.setFirstPoint(child.tess);
          firstPoint=false;
        }
        tess.setLastPoint(child.tess);
      }
    }
    addFillIndexBlocks();
    addLineIndexBlocks();
    addPointIndexBlocks();
  }
 else {
    if (0 < tess.fillVertexCount && 0 < tess.fillIndexCount) {
      if (PGL.MAX_TESS_VERTICES < root.firstFillVertexRel + tess.fillVertexCount) {
        root.firstFillVertexRel=0;
        root.firstFillVertexAbs=root.lastFillVertexOffset + 1;
      }
      root.lastFillVertexOffset=tess.setFillVertex(root.lastFillVertexOffset);
      root.lastFillIndexOffset=tess.setFillIndex(root.firstFillVertexRel,root.lastFillIndexOffset);
      root.firstFillVertexRel+=tess.fillVertexCount;
      addFillIndexBlock(tess.lastFillIndex - tess.firstFillIndex + 1,tess.firstFillIndex,root.firstFillVertexAbs);
    }
    if (0 < tess.lineVertexCount && 0 < tess.lineIndexCount) {
      if (PGL.MAX_TESS_VERTICES < root.firstLineVertexRel + tess.lineVertexCount) {
        root.firstLineVertexRel=0;
        root.firstLineVertexAbs=root.lastLineVertexOffset + 1;
      }
      root.lastLineVertexOffset=tess.setLineVertex(root.lastLineVertexOffset);
      root.lastLineIndexOffset=tess.setLineIndex(root.firstLineVertexRel,root.lastLineIndexOffset);
      root.firstLineVertexRel+=tess.lineVertexCount;
      addLineIndexBlock(tess.lastLineIndex - tess.firstLineIndex + 1,tess.firstLineIndex,root.firstLineVertexAbs);
    }
    if (0 < tess.pointVertexCount && 0 < tess.pointIndexCount) {
      if (PGL.MAX_TESS_VERTICES < root.firstPointVertexRel + tess.pointVertexCount) {
        root.firstPointVertexRel=0;
        root.firstPointVertexAbs=root.lastPointVertexOffset + 1;
      }
      root.lastPointVertexOffset=tess.setPointVertex(root.lastPointVertexOffset);
      root.lastPointIndexOffset=tess.setPointIndex(root.firstPointVertexRel,root.lastPointIndexOffset);
      root.firstPointVertexRel+=tess.pointVertexCount;
      addPointIndexBlock(tess.lastPointIndex - tess.firstPointIndex + 1,tess.firstPointIndex,root.firstPointVertexAbs);
    }
  }
  hasFill=0 < tess.fillVertexCount && 0 < tess.fillIndexCount;
  hasLines=0 < tess.lineVertexCount && 0 < tess.lineIndexCount;
  hasPoints=0 < tess.pointVertexCount && 0 < tess.pointIndexCount;
}
