{
  pg=(PGraphicsOpenGL)parent.g;
  pgl=pg.pgl;
  context=pgl.createEmptyContext();
  glFillVertexBufferID=0;
  glFillColorBufferID=0;
  glFillNormalBufferID=0;
  glFillTexCoordBufferID=0;
  glFillAmbientBufferID=0;
  glFillSpecularBufferID=0;
  glFillEmissiveBufferID=0;
  glFillShininessBufferID=0;
  glFillIndexBufferID=0;
  glLineVertexBufferID=0;
  glLineColorBufferID=0;
  glLineDirWidthBufferID=0;
  glLineIndexBufferID=0;
  glPointVertexBufferID=0;
  glPointColorBufferID=0;
  glPointSizeBufferID=0;
  glPointIndexBufferID=0;
  this.tessellator=PGraphicsOpenGL.tessellator;
  this.family=family;
  this.root=this;
  this.parent=null;
  this.tessellated=false;
  if (family == GEOMETRY || family == PRIMITIVE || family == PATH) {
    inGeo=pg.newInGeometry(PGraphicsOpenGL.RETAINED);
  }
  textureMode=pg.textureMode;
  rectMode=pg.rectMode;
  ellipseMode=pg.ellipseMode;
  shapeMode=pg.shapeMode;
  imageMode=pg.imageMode;
  colorMode(pg.colorMode,pg.colorModeX,pg.colorModeY,pg.colorModeZ,pg.colorModeA);
  fill=pg.fill;
  fillColor=pg.fillColor;
  stroke=pg.stroke;
  strokeColor=pg.strokeColor;
  strokeWeight=pg.strokeWeight;
  strokeCap=pg.strokeCap;
  strokeJoin=pg.strokeJoin;
  tint=pg.tint;
  tintColor=pg.tintColor;
  ambientColor=pg.ambientColor;
  specularColor=pg.specularColor;
  emissiveColor=pg.emissiveColor;
  shininess=pg.shininess;
  normalX=normalY=0;
  normalZ=1;
  normalMode=NORMAL_MODE_AUTO;
  if (family == GROUP) {
    shapeEnded=true;
  }
}
