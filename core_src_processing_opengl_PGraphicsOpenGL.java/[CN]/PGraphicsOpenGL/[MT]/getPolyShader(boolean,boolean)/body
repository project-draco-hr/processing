{
  PolyShader shader;
  if (lit) {
    if (tex) {
      if (polyFullShader == null) {
        if (defPolyFullShader == null) {
          defPolyFullShader=new PolyFullShader(parent,defPolyFullShaderVertURL,defPolyTexShaderFragURL);
        }
        shader=defPolyFullShader;
        texlightShaderCheck();
      }
 else {
        shader=polyFullShader;
      }
    }
 else {
      if (polyLightShader == null) {
        if (defPolyLightShader == null) {
          defPolyLightShader=new PolyLightShader(parent,defPolyLightShaderVertURL,defPolyNoTexShaderFragURL);
        }
        shader=defPolyLightShader;
        lightShaderCheck();
      }
 else {
        shader=polyLightShader;
      }
    }
  }
 else {
    if (tex) {
      if (polyTexShader == null) {
        if (defPolyTexShader == null) {
          defPolyTexShader=new PolyTexShader(parent,defPolyTexShaderVertURL,defPolyTexShaderFragURL);
        }
        shader=defPolyTexShader;
        texShaderCheck();
      }
 else {
        shader=polyTexShader;
      }
    }
 else {
      if (polyFlatShader == null) {
        if (defPolyFlatShader == null) {
          defPolyFlatShader=new PolyFlatShader(parent,defPolyFlatShaderVertURL,defPolyNoTexShaderFragURL);
        }
        shader=defPolyFlatShader;
        colorShaderCheck();
      }
 else {
        shader=polyFlatShader;
      }
    }
  }
  shader.setRenderer(this);
  shader.loadAttributes();
  shader.loadUniforms();
  return shader;
}
