{
  PolyShader shader;
  if (lit) {
    if (tex) {
      if (polyFullShader == null) {
        if (defPolyFullShader == null) {
          defPolyFullShader=new PolyFullShader(parent,defPolyFullShaderVertURL,defPolyTexShaderFragURL);
        }
        polyFullShader=defPolyFullShader;
      }
      shader=polyFullShader;
    }
 else {
      if (polyLightShader == null) {
        if (defPolyLightShader == null) {
          defPolyLightShader=new PolyLightShader(parent,defPolyLightShaderVertURL,defPolyNoTexShaderFragURL);
        }
        polyLightShader=defPolyLightShader;
      }
      shader=polyLightShader;
    }
  }
 else {
    if (tex) {
      if (polyTexShader == null) {
        if (defPolyTexShader == null) {
          defPolyTexShader=new PolyTexShader(parent,defPolyTexShaderVertURL,defPolyTexShaderFragURL);
        }
        polyTexShader=defPolyTexShader;
      }
      shader=polyTexShader;
    }
 else {
      if (polyFlatShader == null) {
        if (defPolyFlatShader == null) {
          defPolyFlatShader=new PolyFlatShader(parent,defPolyFlatShaderVertURL,defPolyNoTexShaderFragURL);
        }
        polyFlatShader=defPolyFlatShader;
      }
      shader=polyFlatShader;
    }
  }
  shader.setRenderer(this);
  shader.loadAttributes();
  shader.loadUniforms();
  return shader;
}
