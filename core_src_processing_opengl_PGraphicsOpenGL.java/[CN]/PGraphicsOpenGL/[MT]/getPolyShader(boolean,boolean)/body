{
  PShader shader;
  boolean useDefault=polyShader == null;
  if (polyShader != null) {
    polyShader.setRenderer(this);
    polyShader.loadAttributes();
    polyShader.loadUniforms();
  }
  if (lit) {
    if (tex) {
      if (useDefault || !polyShader.checkPolyType(PShader.TEXLIGHT)) {
        if (defTexlightShader == null) {
          String[] vertSource=pgl.loadVertexShader(defTexlightShaderVertURL,120);
          String[] fragSource=pgl.loadFragmentShader(defTextureShaderFragURL,120);
          defTexlightShader=new PShader(parent,vertSource,fragSource);
        }
        shader=defTexlightShader;
      }
 else {
        shader=polyShader;
      }
    }
 else {
      if (useDefault || !polyShader.checkPolyType(PShader.LIGHT)) {
        if (defLightShader == null) {
          String[] vertSource=pgl.loadVertexShader(defLightShaderVertURL,120);
          String[] fragSource=pgl.loadFragmentShader(defColorShaderFragURL,120);
          defLightShader=new PShader(parent,vertSource,fragSource);
        }
        shader=defLightShader;
      }
 else {
        shader=polyShader;
      }
    }
  }
 else {
    if (polyShader != null && polyShader.accessLightAttribs()) {
      PGraphics.showWarning(SHADER_NEED_LIGHT_ATTRIBS);
      useDefault=true;
    }
    if (tex) {
      if (useDefault || !polyShader.checkPolyType(PShader.TEXTURE)) {
        if (defTextureShader == null) {
          String[] vertSource=pgl.loadVertexShader(defTextureShaderVertURL,120);
          String[] fragSource=pgl.loadFragmentShader(defTextureShaderFragURL,120);
          defTextureShader=new PShader(parent,vertSource,fragSource);
        }
        shader=defTextureShader;
      }
 else {
        shader=polyShader;
      }
    }
 else {
      if (useDefault || !polyShader.checkPolyType(PShader.COLOR)) {
        if (defColorShader == null) {
          String[] vertSource=pgl.loadVertexShader(defColorShaderVertURL,120);
          String[] fragSource=pgl.loadFragmentShader(defColorShaderFragURL,120);
          defColorShader=new PShader(parent,vertSource,fragSource);
        }
        shader=defColorShader;
      }
 else {
        shader=polyShader;
      }
    }
  }
  if (shader != polyShader) {
    shader.setRenderer(this);
    shader.loadAttributes();
    shader.loadUniforms();
  }
  return shader;
}
