{
  if (drawing) {
    showWarning("Already called beginDraw().");
    return;
  }
  if (pgCurrent != pgPrimary && this != pgPrimary) {
    showWarning("Already called beginDraw() for another PGraphicsOpenGL object.");
    return;
  }
  if (!glParamsRead) {
    getGLParameters();
  }
  if (screenFramebuffer == null) {
    screenFramebuffer=new FrameBuffer(parent,width,height,true);
    setFramebuffer(screenFramebuffer);
  }
  if (primarySurface) {
    pgl.updatePrimary();
    if (pgl.primaryIsDoubleBuffered()) {
      pgl.glDrawBuffer(PGL.GL_BACK);
    }
  }
 else {
    if (!pgl.initialized) {
      initOffscreen();
    }
 else {
      boolean outdated=offscreenFramebuffer != null && offscreenFramebuffer.contextIsOutdated();
      boolean outdatedMulti=offscreenFramebufferMultisample != null && offscreenFramebufferMultisample.contextIsOutdated();
      if (outdated || outdatedMulti) {
        pgl.initialized=false;
        initOffscreen();
      }
    }
    pushFramebuffer();
    if (offscreenMultisample) {
      setFramebuffer(offscreenFramebufferMultisample);
    }
 else {
      setFramebuffer(offscreenFramebuffer);
    }
    pgl.updateOffscreen(pgPrimary.pgl);
    pgl.glDrawBuffer(PGL.GL_COLOR_ATTACHMENT0);
  }
  report("top beginDraw()");
  drawing=true;
  pgCurrent=this;
  inGeo.clear();
  tessGeo.clear();
  texCache.clear();
  super.noTexture();
  setDefaultBlend();
  if (hints[DISABLE_DEPTH_TEST]) {
    pgl.glDisable(PGL.GL_DEPTH_TEST);
  }
 else {
    pgl.glEnable(PGL.GL_DEPTH_TEST);
  }
  pgl.glDepthFunc(PGL.GL_LEQUAL);
  if (hints[ENABLE_ACCURATE_2D]) {
    flushMode=FLUSH_CONTINUOUSLY;
  }
 else {
    flushMode=FLUSH_WHEN_FULL;
  }
  if (primarySurface) {
    int[] temp=new int[1];
    pgl.glGetIntegerv(PGL.GL_SAMPLES,temp,0);
    if (quality != temp[0] && 1 < temp[0] && 1 < quality) {
      quality=temp[0];
    }
  }
  if (quality < 2) {
    pgl.glDisable(PGL.GL_MULTISAMPLE);
  }
 else {
    pgl.glEnable(PGL.GL_MULTISAMPLE);
  }
  pgl.glDisable(PGL.GL_POINT_SMOOTH);
  pgl.glDisable(PGL.GL_LINE_SMOOTH);
  pgl.glDisable(PGL.GL_POLYGON_SMOOTH);
  viewport[0]=0;
  viewport[1]=0;
  viewport[2]=width;
  viewport[3]=height;
  pgl.glViewport(viewport[0],viewport[1],viewport[2],viewport[3]);
  if (resized) {
    background(backgroundColor);
    if (texture != null) {
      this.removeCache(pgPrimary);
      this.removeParams(pgPrimary);
      texture=null;
      loadTexture();
    }
    resized=false;
  }
  if (sized) {
    defaultPerspective();
    defaultCamera();
    sized=false;
  }
 else {
    modelview.set(camera);
    modelviewInv.set(cameraInv);
    calcProjmodelview();
  }
  if (is3D()) {
    noLights();
    lightFalloff(1,0,0);
    lightSpecular(0,0,0);
  }
  pgl.glFrontFace(PGL.GL_CW);
  pgl.glDisable(PGL.GL_CULL_FACE);
  pgl.glActiveTexture(PGL.GL_TEXTURE0);
  normalX=normalY=normalZ=0;
  pgl.glDepthMask(true);
  pgl.glClearDepth(1);
  pgl.glClearStencil(0);
  pgl.glClear(PGL.GL_DEPTH_BUFFER_BIT | PGL.GL_STENCIL_BUFFER_BIT);
  if (primarySurface) {
    pgl.beginOnscreenDraw(clearColorBuffer);
  }
 else {
    pgl.beginOffscreenDraw(pgPrimary.clearColorBuffer);
    offscreenFramebuffer.setColorBuffer(texture);
    if (clip) {
      pgl.glEnable(PGL.GL_SCISSOR_TEST);
      pgl.glScissor(clipRect[0],clipRect[1],clipRect[2],clipRect[3]);
    }
 else {
      pgl.glDisable(PGL.GL_SCISSOR_TEST);
    }
  }
  if (!settingsInited) {
    defaultSettings();
  }
  if (restoreSurface) {
    restoreSurfaceFromPixels();
    restoreSurface=false;
  }
  if (hints[DISABLE_DEPTH_MASK]) {
    pgl.glDepthMask(false);
  }
 else {
    pgl.glDepthMask(true);
  }
  pixelsOp=OP_NONE;
  modified=false;
  setgetPixels=false;
  clearColorBuffer0=clearColorBuffer;
  clearColorBuffer=false;
  report("bot beginDraw()");
}
