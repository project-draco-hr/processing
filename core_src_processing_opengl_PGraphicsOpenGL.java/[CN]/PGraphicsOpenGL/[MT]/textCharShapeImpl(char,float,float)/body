{
  boolean strokeSaved=stroke;
  stroke=false;
  PGL.FontOutline outline=pgl.createFontOutline(ch,textFont.getNative());
  float textPoints[]=new float[6];
  float lastX=0;
  float lastY=0;
  beginShape();
  while (!outline.isDone()) {
    int type=outline.currentSegment(textPoints);
    if (type == PGL.SEG_MOVETO) {
    }
 else     if (type == PGL.SEG_LINETO) {
      if (type == PGL.SEG_MOVETO)       beginContour();
      vertex(x + textPoints[0],y + textPoints[1]);
      lastX=textPoints[0];
      lastY=textPoints[1];
    }
 else     if (type == PGL.SEG_QUADTO) {
      for (int i=1; i < bezierDetail; i++) {
        float t=(float)i / (float)bezierDetail;
        vertex(x + bezierPoint(lastX,lastX + (float)((textPoints[0] - lastX) * 2 / 3.0),textPoints[2] + (float)((textPoints[0] - textPoints[2]) * 2 / 3.0),textPoints[2],t),y + bezierPoint(lastY,lastY + (float)((textPoints[1] - lastY) * 2 / 3.0),textPoints[3] + (float)((textPoints[1] - textPoints[3]) * 2 / 3.0),textPoints[3],t));
      }
      lastX=textPoints[2];
      lastY=textPoints[3];
    }
 else     if (type == PGL.SEG_CUBICTO) {
      for (int i=1; i < bezierDetail; i++) {
        float t=(float)i / (float)bezierDetail;
        vertex(x + bezierPoint(lastX,textPoints[0],textPoints[2],textPoints[4],t),y + bezierPoint(lastY,textPoints[1],textPoints[3],textPoints[5],t));
      }
      lastX=textPoints[4];
      lastY=textPoints[5];
    }
 else     if (type == PGL.SEG_CLOSE) {
      endContour();
    }
    outline.next();
  }
  endShape();
  stroke=strokeSaved;
}
