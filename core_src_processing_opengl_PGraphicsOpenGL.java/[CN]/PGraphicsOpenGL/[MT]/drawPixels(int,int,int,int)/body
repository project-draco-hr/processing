{
  int f=(int)pgl.getPixelScale();
  int len=f * w * f* h;
  if (nativePixels == null || nativePixels.length < len) {
    nativePixels=new int[len];
    nativePixelBuffer=PGL.allocateIntBuffer(nativePixels);
  }
  try {
    if (0 < x || 0 < y || w < width || h < height) {
      int offset0=f * (y * width + x);
      int offset1=0;
      for (int yc=f * y; yc < f * (y + h); yc++) {
        System.arraycopy(pixels,offset0,nativePixels,offset1,f * w);
        offset0+=f * width;
        offset1+=f * w;
      }
    }
 else {
      PApplet.arrayCopy(pixels,0,nativePixels,0,len);
    }
    PGL.javaToNativeARGB(nativePixels,f * w,f * h);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  PGL.putIntArray(nativePixelBuffer,nativePixels);
  if (primaryGraphics && !pgl.isFBOBacked()) {
    loadTextureImpl(POINT,false);
  }
  boolean needToDrawTex=primaryGraphics && (!pgl.isFBOBacked() || (pgl.isFBOBacked() && pgl.isMultisampled())) || offscreenMultisample;
  if (texture == null)   return;
  if (needToDrawTex) {
    int tw=PApplet.min(texture.glWidth - f * x,f * w);
    int th=PApplet.min(texture.glHeight - f * y,f * h);
    pgl.copyToTexture(texture.glTarget,texture.glFormat,texture.glName,f * x,f * y,tw,th,nativePixelBuffer);
    beginPixelsOp(OP_WRITE);
    drawTexture(x,y,w,h);
    endPixelsOp();
  }
 else {
    pgl.copyToTexture(texture.glTarget,texture.glFormat,texture.glName,f * x,f * (height - (y + h)),f * w,f * h,nativePixelBuffer);
  }
}
