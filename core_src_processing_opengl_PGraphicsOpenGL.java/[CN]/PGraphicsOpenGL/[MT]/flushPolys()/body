{
  updatePolyBuffers(lights,texCache.hasTextures);
  for (int i=0; i < texCache.size; i++) {
    Texture tex=texCache.getTexture(i);
    PolyShader shader=getPolyShader(lights,tex != null);
    shader.bind();
    int first=texCache.firstCache[i];
    int last=texCache.lastCache[i];
    IndexCache cache=tessGeo.polyIndexCache;
    for (int n=first; n <= last; n++) {
      int ioffset=n == first ? texCache.firstIndex[i] : cache.indexOffset[n];
      int icount=n == last ? texCache.lastIndex[i] - ioffset + 1 : cache.indexOffset[n] + cache.indexCount[n] - ioffset;
      int voffset=cache.vertexOffset[n];
      shader.setVertexAttribute(glPolyVertex,4,PGL.FLOAT,0,4 * voffset * PGL.SIZEOF_FLOAT);
      shader.setColorAttribute(glPolyColor,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
      shader.setNormalAttribute(glPolyNormal,3,PGL.FLOAT,0,3 * voffset * PGL.SIZEOF_FLOAT);
      shader.setTexcoordAttribute(glPolyTexcoord,2,PGL.FLOAT,0,2 * voffset * PGL.SIZEOF_FLOAT);
      if (lights) {
        shader.setNormalAttribute(glPolyNormal,3,PGL.FLOAT,0,3 * voffset * PGL.SIZEOF_FLOAT);
        shader.setAmbientAttribute(glPolyAmbient,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
        shader.setSpecularAttribute(glPolySpecular,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
        shader.setEmissiveAttribute(glPolyEmissive,4,PGL.UNSIGNED_BYTE,0,4 * voffset * PGL.SIZEOF_BYTE);
        shader.setShininessAttribute(glPolyShininess,1,PGL.FLOAT,0,voffset * PGL.SIZEOF_FLOAT);
      }
 else       if (shader.supportLighting()) {
        PGraphics.showWarning(LIGHT_SHADER_ERROR);
      }
      if (tex != null) {
        shader.setTexture(tex);
      }
 else       if (shader.supportsTexturing()) {
        PGraphics.showWarning(TEXTURE_SHADER_ERROR);
      }
      pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,glPolyIndex);
      pgl.drawElements(PGL.TRIANGLES,icount,PGL.INDEX_TYPE,ioffset * PGL.SIZEOF_INDEX);
      pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,0);
    }
    shader.unbind();
  }
  unbindPolyBuffers();
}
