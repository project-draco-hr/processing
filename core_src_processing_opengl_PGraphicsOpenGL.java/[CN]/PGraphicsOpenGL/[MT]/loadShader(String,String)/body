{
  int shaderType=getShaderType(vertFilename);
  if (shaderType == -1) {
    shaderType=getShaderType(fragFilename);
  }
  if (shaderType == -1) {
    PGraphics.showWarning(INVALID_PROCESSING_SHADER_ERROR);
    return null;
  }
  PShader shader=null;
  if (fragFilename == null || fragFilename.equals("")) {
    if (shaderType == PShader.POINT) {
      shader=new PointShader(parent);
      shader.setFragmentShader(defPointShaderFragURL);
    }
 else     if (shaderType == PShader.LINE) {
      shader=new LineShader(parent);
      shader.setFragmentShader(defLineShaderFragURL);
    }
 else     if (shaderType == PShader.TEXLIGHT) {
      shader=new TexlightShader(parent);
      shader.setFragmentShader(defTextureShaderFragURL);
    }
 else     if (shaderType == PShader.LIGHT) {
      shader=new LightShader(parent);
      shader.setFragmentShader(defColorShaderFragURL);
    }
 else     if (shaderType == PShader.TEXTURE) {
      shader=new TextureShader(parent);
      shader.setFragmentShader(defTextureShaderFragURL);
    }
 else     if (shaderType == PShader.COLOR) {
      shader=new ColorShader(parent);
      shader.setFragmentShader(defColorShaderFragURL);
    }
    if (shader != null) {
      shader.setVertexShader(vertFilename);
    }
  }
 else {
    if (shaderType == PShader.POINT) {
      shader=new PointShader(parent,vertFilename,fragFilename);
    }
 else     if (shaderType == PShader.LINE) {
      shader=new LineShader(parent,vertFilename,fragFilename);
    }
 else     if (shaderType == PShader.TEXLIGHT) {
      shader=new TexlightShader(parent,vertFilename,fragFilename);
    }
 else     if (shaderType == PShader.LIGHT) {
      shader=new LightShader(parent,vertFilename,fragFilename);
    }
 else     if (shaderType == PShader.TEXTURE) {
      shader=new TextureShader(parent,vertFilename,fragFilename);
    }
 else     if (shaderType == PShader.COLOR) {
      shader=new ColorShader(parent,vertFilename,fragFilename);
    }
  }
  return shader;
}
