{
  String[] source=parent.loadStrings(filename);
  Pattern pointAttr=Pattern.compile("attribute *vec2 *offset");
  Pattern lineAttr=Pattern.compile("attribute *vec4 *direction");
  Pattern pointDef=Pattern.compile("#define *PROCESSING_POINT_SHADER");
  Pattern lineDef=Pattern.compile("#define *PROCESSING_LINE_SHADER");
  Pattern colorDef=Pattern.compile("#define *PROCESSING_COLOR_SHADER");
  Pattern lightDef=Pattern.compile("#define *PROCESSING_LIGHT_SHADER");
  Pattern texDef=Pattern.compile("#define *PROCESSING_TEXTURE_SHADER");
  Pattern texlightDef=Pattern.compile("#define *PROCESSING_TEXLIGHT_SHADER");
  Pattern polyDef=Pattern.compile("#define *PROCESSING_POLYGON_SHADER");
  Pattern triDef=Pattern.compile("#define *PROCESSING_TRIANGLES_SHADER");
  Pattern quadDef=Pattern.compile("#define *PROCESSING_QUADS_SHADER");
  for (int i=0; i < source.length; i++) {
    String line=source[i].trim();
    if (pointAttr.matcher(line).find())     return PShader.POINT;
 else     if (lineAttr.matcher(line).find())     return PShader.LINE;
 else     if (pointDef.matcher(line).find())     return PShader.POINT;
 else     if (lineDef.matcher(line).find())     return PShader.LINE;
 else     if (colorDef.matcher(line).find())     return PShader.COLOR;
 else     if (lightDef.matcher(line).find())     return PShader.LIGHT;
 else     if (texDef.matcher(line).find())     return PShader.TEXTURE;
 else     if (texlightDef.matcher(line).find())     return PShader.TEXLIGHT;
 else     if (polyDef.matcher(line).find())     return PShader.POLY;
 else     if (triDef.matcher(line).find())     return PShader.POLY;
 else     if (quadDef.matcher(line).find())     return PShader.POLY;
  }
  return PShader.POLY;
}
