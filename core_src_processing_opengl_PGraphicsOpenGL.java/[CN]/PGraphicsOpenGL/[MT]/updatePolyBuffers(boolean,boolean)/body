{
  createPolyBuffers();
  int size=tessGeo.polyVertexCount;
  int sizef=size * PGL.SIZEOF_FLOAT;
  int sizei=size * PGL.SIZEOF_INT;
  tessGeo.readyPolyVertices();
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyVertex);
  pgl.bufferData(PGL.ARRAY_BUFFER,4 * sizef,tessGeo.polyVertices,PGL.STATIC_DRAW);
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyColor);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,IntBuffer.wrap(tessGeo.polyColors,0,size),PGL.STATIC_DRAW);
  if (lit) {
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyNormal);
    pgl.bufferData(PGL.ARRAY_BUFFER,3 * sizef,FloatBuffer.wrap(tessGeo.polyNormals,0,3 * size),PGL.STATIC_DRAW);
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyAmbient);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizei,IntBuffer.wrap(tessGeo.polyAmbient,0,size),PGL.STATIC_DRAW);
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolySpecular);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizei,IntBuffer.wrap(tessGeo.polySpecular,0,size),PGL.STATIC_DRAW);
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyEmissive);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizei,IntBuffer.wrap(tessGeo.polyEmissive,0,size),PGL.STATIC_DRAW);
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyShininess);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizef,FloatBuffer.wrap(tessGeo.polyShininess,0,size),PGL.STATIC_DRAW);
  }
  if (tex) {
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyTexcoord);
    pgl.bufferData(PGL.ARRAY_BUFFER,2 * sizef,FloatBuffer.wrap(tessGeo.polyTexcoords,0,2 * size),PGL.STATIC_DRAW);
  }
  tessGeo.readyPolyIndices();
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,glPolyIndex);
  pgl.bufferData(PGL.ELEMENT_ARRAY_BUFFER,tessGeo.polyIndexCount * PGL.SIZEOF_INDEX,tessGeo.polyIndices,PGL.STATIC_DRAW);
}
