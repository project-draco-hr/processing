{
  createPolyBuffers();
  int size=tessGeo.polyVertexCount;
  int sizef=size * PGL.SIZEOF_FLOAT;
  int sizei=size * PGL.SIZEOF_INT;
  tessGeo.readyPolyVertices();
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyVertex);
  pgl.bufferData(PGL.ARRAY_BUFFER,4 * sizef,tessGeo.polyVertices,PGL.STATIC_DRAW);
  tessGeo.readyPolyColors();
  pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyColor);
  pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polyColors,PGL.STATIC_DRAW);
  if (lit) {
    tessGeo.readyPolyNormals();
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyNormal);
    pgl.bufferData(PGL.ARRAY_BUFFER,3 * sizef,tessGeo.polyNormals,PGL.STATIC_DRAW);
    tessGeo.readyPolyAmbient();
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyAmbient);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polyAmbient,PGL.STATIC_DRAW);
    tessGeo.readyPolySpecular();
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolySpecular);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polySpecular,PGL.STATIC_DRAW);
    tessGeo.readyPolyEmissive();
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyEmissive);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizei,tessGeo.polyEmissive,PGL.STATIC_DRAW);
    tessGeo.readyPolyShininess();
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyShininess);
    pgl.bufferData(PGL.ARRAY_BUFFER,sizef,tessGeo.polyShininess,PGL.STATIC_DRAW);
  }
  if (tex) {
    tessGeo.readyPolyTexcoords();
    pgl.bindBuffer(PGL.ARRAY_BUFFER,glPolyTexcoord);
    pgl.bufferData(PGL.ARRAY_BUFFER,2 * sizef,tessGeo.polyTexcoords,PGL.STATIC_DRAW);
  }
  tessGeo.readyPolyIndices();
  pgl.bindBuffer(PGL.ELEMENT_ARRAY_BUFFER,glPolyIndex);
  pgl.bufferData(PGL.ELEMENT_ARRAY_BUFFER,tessGeo.polyIndexCount * PGL.SIZEOF_INDEX,tessGeo.polyIndices,PGL.STATIC_DRAW);
}
