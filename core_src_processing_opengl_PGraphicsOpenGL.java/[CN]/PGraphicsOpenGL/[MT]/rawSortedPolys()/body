{
  raw.colorMode(RGB);
  raw.noStroke();
  raw.beginShape(TRIANGLES);
  float[] vertices=tessGeo.polyVertices;
  int[] color=tessGeo.polyColors;
  float[] uv=tessGeo.polyTexCoords;
  short[] indices=tessGeo.polyIndices;
  sorter.sort(tessGeo);
  int[] triangleIndices=sorter.triangleIndices;
  int[] texMap=sorter.texMap;
  int[] voffsetMap=sorter.voffsetMap;
  int[] vertexOffset=tessGeo.polyIndexCache.vertexOffset;
  for (int i=0; i < tessGeo.polyIndexCount / 3; i++) {
    int ti=triangleIndices[i];
    PImage tex=texCache.getTextureImage(texMap[ti]);
    int voffset=vertexOffset[voffsetMap[ti]];
    int i0=voffset + indices[3 * ti + 0];
    int i1=voffset + indices[3 * ti + 1];
    int i2=voffset + indices[3 * ti + 2];
    float[] pt0={0,0,0,0};
    float[] pt1={0,0,0,0};
    float[] pt2={0,0,0,0};
    int argb0=PGL.nativeToJavaARGB(color[i0]);
    int argb1=PGL.nativeToJavaARGB(color[i1]);
    int argb2=PGL.nativeToJavaARGB(color[i2]);
    if (flushMode == FLUSH_CONTINUOUSLY) {
      float[] src0={0,0,0,0};
      float[] src1={0,0,0,0};
      float[] src2={0,0,0,0};
      PApplet.arrayCopy(vertices,4 * i0,src0,0,4);
      PApplet.arrayCopy(vertices,4 * i1,src1,0,4);
      PApplet.arrayCopy(vertices,4 * i2,src2,0,4);
      modelview.mult(src0,pt0);
      modelview.mult(src1,pt1);
      modelview.mult(src2,pt2);
    }
 else {
      PApplet.arrayCopy(vertices,4 * i0,pt0,0,4);
      PApplet.arrayCopy(vertices,4 * i1,pt1,0,4);
      PApplet.arrayCopy(vertices,4 * i2,pt2,0,4);
    }
    if (tex != null) {
      raw.texture(tex);
      if (raw.is3D()) {
        raw.fill(argb0);
        raw.vertex(pt0[X],pt0[Y],pt0[Z],uv[2 * i0 + 0],uv[2 * i0 + 1]);
        raw.fill(argb1);
        raw.vertex(pt1[X],pt1[Y],pt1[Z],uv[2 * i1 + 0],uv[2 * i1 + 1]);
        raw.fill(argb2);
        raw.vertex(pt2[X],pt2[Y],pt2[Z],uv[2 * i2 + 0],uv[2 * i2 + 1]);
      }
 else       if (raw.is2D()) {
        float sx0=screenXImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
        float sy0=screenYImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
        float sx1=screenXImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
        float sy1=screenYImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
        float sx2=screenXImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
        float sy2=screenYImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
        raw.fill(argb0);
        raw.vertex(sx0,sy0,uv[2 * i0 + 0],uv[2 * i0 + 1]);
        raw.fill(argb1);
        raw.vertex(sx1,sy1,uv[2 * i1 + 0],uv[2 * i1 + 1]);
        raw.fill(argb1);
        raw.vertex(sx2,sy2,uv[2 * i2 + 0],uv[2 * i2 + 1]);
      }
    }
 else {
      if (raw.is3D()) {
        raw.fill(argb0);
        raw.vertex(pt0[X],pt0[Y],pt0[Z]);
        raw.fill(argb1);
        raw.vertex(pt1[X],pt1[Y],pt1[Z]);
        raw.fill(argb2);
        raw.vertex(pt2[X],pt2[Y],pt2[Z]);
      }
 else       if (raw.is2D()) {
        float sx0=screenXImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
        float sy0=screenYImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
        float sx1=screenXImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
        float sy1=screenYImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
        float sx2=screenXImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
        float sy2=screenYImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
        raw.fill(argb0);
        raw.vertex(sx0,sy0);
        raw.fill(argb1);
        raw.vertex(sx1,sy1);
        raw.fill(argb2);
        raw.vertex(sx2,sy2);
      }
    }
  }
  raw.endShape();
}
