{
  raw.colorMode(RGB);
  raw.noStroke();
  raw.beginShape(TRIANGLES);
  FloatBuffer vertices=tessGeo.polyVertices;
  IntBuffer color=tessGeo.polyColors;
  FloatBuffer uv=tessGeo.polyTexcoords;
  ShortBuffer indices=tessGeo.polyIndices;
  for (int i=0; i < texCache.size; i++) {
    PImage textureImage=texCache.getTextureImage(i);
    int first=texCache.firstCache[i];
    int last=texCache.lastCache[i];
    IndexCache cache=tessGeo.polyIndexCache;
    for (int n=first; n <= last; n++) {
      int ioffset=n == first ? texCache.firstIndex[i] : cache.indexOffset[n];
      int icount=n == last ? texCache.lastIndex[i] - ioffset + 1 : cache.indexOffset[n] + cache.indexCount[n] - ioffset;
      int voffset=cache.vertexOffset[n];
      for (int tr=ioffset / 3; tr < (ioffset + icount) / 3; tr++) {
        int i0=voffset + indices.get(3 * tr + 0);
        int i1=voffset + indices.get(3 * tr + 1);
        int i2=voffset + indices.get(3 * tr + 2);
        float[] pt0={0,0,0,0};
        float[] pt1={0,0,0,0};
        float[] pt2={0,0,0,0};
        int argb0=PGL.nativeToJavaARGB(color.get(i0));
        int argb1=PGL.nativeToJavaARGB(color.get(i1));
        int argb2=PGL.nativeToJavaARGB(color.get(i2));
        if (flushMode == FLUSH_CONTINUOUSLY) {
          float[] src0={0,0,0,0};
          float[] src1={0,0,0,0};
          float[] src2={0,0,0,0};
          vertices.position(4 * i0);
          vertices.get(src0,0,4);
          vertices.position(4 * i1);
          vertices.get(src1,0,4);
          vertices.position(4 * i2);
          vertices.get(src2,0,4);
          modelview.mult(src0,pt0);
          modelview.mult(src1,pt1);
          modelview.mult(src2,pt2);
        }
 else {
          vertices.position(4 * i0);
          vertices.get(pt0,0,4);
          vertices.position(4 * i1);
          vertices.get(pt1,0,4);
          vertices.position(4 * i2);
          vertices.get(pt2,0,4);
        }
        if (textureImage != null) {
          raw.texture(textureImage);
          float u0=uv.get(2 * i0 + 0);
          float v0=uv.get(2 * i0 + 1);
          float u1=uv.get(2 * i1 + 0);
          float v1=uv.get(2 * i1 + 1);
          float u2=uv.get(2 * i2 + 0);
          float v2=uv.get(2 * i2 + 1);
          if (raw.is3D()) {
            raw.fill(argb0);
            raw.vertex(pt0[X],pt0[Y],pt0[Z],u0,v0);
            raw.fill(argb1);
            raw.vertex(pt1[X],pt1[Y],pt1[Z],u1,v1);
            raw.fill(argb2);
            raw.vertex(pt2[X],pt2[Y],pt2[Z],u2,v2);
          }
 else           if (raw.is2D()) {
            float sx0=screenXImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
            float sy0=screenYImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
            float sx1=screenXImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
            float sy1=screenYImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
            float sx2=screenXImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
            float sy2=screenYImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
            raw.fill(argb0);
            raw.vertex(sx0,sy0,u0,v0);
            raw.fill(argb1);
            raw.vertex(sx1,sy1,u1,v1);
            raw.fill(argb1);
            raw.vertex(sx2,sy2,u2,v2);
          }
        }
 else {
          if (raw.is3D()) {
            raw.fill(argb0);
            raw.vertex(pt0[X],pt0[Y],pt0[Z]);
            raw.fill(argb1);
            raw.vertex(pt1[X],pt1[Y],pt1[Z]);
            raw.fill(argb2);
            raw.vertex(pt2[X],pt2[Y],pt2[Z]);
          }
 else           if (raw.is2D()) {
            float sx0=screenXImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
            float sy0=screenYImpl(pt0[0],pt0[1],pt0[2],pt0[3]);
            float sx1=screenXImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
            float sy1=screenYImpl(pt1[0],pt1[1],pt1[2],pt1[3]);
            float sx2=screenXImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
            float sy2=screenYImpl(pt2[0],pt2[1],pt2[2],pt2[3]);
            raw.fill(argb0);
            raw.vertex(sx0,sy0);
            raw.fill(argb1);
            raw.vertex(sx1,sy1);
            raw.fill(argb2);
            raw.vertex(sx2,sy2);
          }
        }
      }
    }
  }
  raw.endShape();
}
