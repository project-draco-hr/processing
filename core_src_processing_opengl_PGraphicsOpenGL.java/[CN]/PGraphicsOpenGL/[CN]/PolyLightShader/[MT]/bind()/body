{
  super.bind();
  if (pgCurrent == null) {
    setRenderer(PGraphicsOpenGL.pgCurrent);
    loadAttributes();
    loadUniforms();
  }
  if (-1 < inVertexLoc)   pgl.enableVertexAttribArray(inVertexLoc);
  if (-1 < inColorLoc)   pgl.enableVertexAttribArray(inColorLoc);
  if (-1 < inNormalLoc)   pgl.enableVertexAttribArray(inNormalLoc);
  if (-1 < inAmbientLoc)   pgl.enableVertexAttribArray(inAmbientLoc);
  if (-1 < inSpecularLoc)   pgl.enableVertexAttribArray(inSpecularLoc);
  if (-1 < inEmissiveLoc)   pgl.enableVertexAttribArray(inEmissiveLoc);
  if (-1 < inShineLoc)   pgl.enableVertexAttribArray(inShineLoc);
  if (-1 < projmodelviewMatrixLoc) {
    pgCurrent.updateGLProjmodelview();
    setUniformMatrix(projmodelviewMatrixLoc,pgCurrent.glProjmodelview);
  }
  if (-1 < modelviewMatrixLoc) {
    pgCurrent.updateGLModelview();
    setUniformMatrix(modelviewMatrixLoc,pgCurrent.glModelview);
  }
  if (-1 < projectionMatrixLoc) {
    pgCurrent.updateGLProjection();
    setUniformMatrix(projectionMatrixLoc,pgCurrent.glProjection);
  }
  if (-1 < normalMatrixLoc) {
    pgCurrent.updateGLNormal();
    setUniformMatrix(normalMatrixLoc,pgCurrent.glNormal);
  }
  int count=pgCurrent.lightCount;
  setUniformValue(lightCountLoc,count);
  setUniformVector(lightPositionLoc,pgCurrent.lightPosition,4,count);
  setUniformVector(lightNormalLoc,pgCurrent.lightNormal,3,count);
  setUniformVector(lightAmbientLoc,pgCurrent.lightAmbient,3,count);
  setUniformVector(lightDiffuseLoc,pgCurrent.lightDiffuse,3,count);
  setUniformVector(lightSpecularLoc,pgCurrent.lightSpecular,3,count);
  setUniformVector(lightFalloffCoefficientsLoc,pgCurrent.lightFalloffCoefficients,3,count);
  setUniformVector(lightSpotParametersLoc,pgCurrent.lightSpotParameters,2,count);
}
