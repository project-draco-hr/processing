{
  if (-1 < transformLoc) {
    pgCurrent.updateGLProjmodelview();
    setUniformMatrix(transformLoc,pgCurrent.glProjmodelview);
  }
  if (-1 < modelviewLoc) {
    pgCurrent.updateGLModelview();
    setUniformMatrix(modelviewLoc,pgCurrent.glModelview);
  }
  if (-1 < projectionLoc) {
    pgCurrent.updateGLProjection();
    setUniformMatrix(projectionLoc,pgCurrent.glProjection);
  }
  if (-1 < viewportLoc) {
    float x=pgCurrent.viewport.get(0);
    float y=pgCurrent.viewport.get(1);
    float w=pgCurrent.viewport.get(2);
    float h=pgCurrent.viewport.get(3);
    setUniformValue(viewportLoc,x,y,w,h);
  }
  if (-1 < bufferLoc) {
    bufferUnit=getLastTexUnit() + 1;
    setUniformValue(bufferLoc,bufferUnit);
    pgl.activeTexture(PGL.TEXTURE0 + bufferUnit);
    pgCurrent.bindFrontTexture();
  }
 else {
    bufferUnit=-1;
  }
}
