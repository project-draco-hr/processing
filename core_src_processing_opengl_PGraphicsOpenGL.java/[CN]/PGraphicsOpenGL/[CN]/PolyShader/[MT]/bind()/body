{
  super.bind();
  if (pg == null) {
    setRenderer(PGraphicsOpenGL.pgCurrent);
    loadAttributes();
    loadUniforms();
  }
  setCommonUniforms();
  if (-1 < vertexLoc)   pgl.enableVertexAttribArray(vertexLoc);
  if (-1 < colorLoc)   pgl.enableVertexAttribArray(colorLoc);
  if (-1 < texCoordLoc)   pgl.enableVertexAttribArray(texCoordLoc);
  if (-1 < normalLoc)   pgl.enableVertexAttribArray(normalLoc);
  if (-1 < normalMatLoc) {
    pg.updateGLNormal();
    setUniformMatrix(normalMatLoc,pg.glNormal);
  }
  if (-1 < ambientLoc)   pgl.enableVertexAttribArray(ambientLoc);
  if (-1 < specularLoc)   pgl.enableVertexAttribArray(specularLoc);
  if (-1 < emissiveLoc)   pgl.enableVertexAttribArray(emissiveLoc);
  if (-1 < shininessLoc)   pgl.enableVertexAttribArray(shininessLoc);
  int count=pg.lightCount;
  setUniformValue(lightCountLoc,count);
  if (0 < count) {
    setUniformVector(lightPositionLoc,pg.lightPosition,4,count);
    setUniformVector(lightNormalLoc,pg.lightNormal,3,count);
    setUniformVector(lightAmbientLoc,pg.lightAmbient,3,count);
    setUniformVector(lightDiffuseLoc,pg.lightDiffuse,3,count);
    setUniformVector(lightSpecularLoc,pg.lightSpecular,3,count);
    setUniformVector(lightFalloffLoc,pg.lightFalloffCoefficients,3,count);
    setUniformVector(lightSpotLoc,pg.lightSpotParameters,2,count);
  }
}
