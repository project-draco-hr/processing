{
  PGraphicsOpenGL g=pg.get();
  if (g == null)   return null;
  int nind=3 * detailU + (6 * detailU + 3) * (detailV - 2) + 3 * detailU;
  int[] indices=new int[nind];
  int vertCount=0;
  int indCount=0;
  int vert0, vert1;
  float u, v;
  float du=1.0f / (detailU);
  float dv=1.0f / (detailV);
  u=1;
  v=1;
  for (int i=0; i < detailU; i++) {
    setNormal(0,1,0);
    addVertex(0,r,0,u,v,VERTEX,true);
    u-=du;
  }
  vertCount=detailU;
  vert0=vertCount;
  u=1;
  v-=dv;
  for (int i=0; i < detailU; i++) {
    setNormal(g.sphereX[i],g.sphereY[i],g.sphereZ[i]);
    addVertex(r * g.sphereX[i],r * g.sphereY[i],r * g.sphereZ[i],u,v,VERTEX,false);
    u-=du;
  }
  vertCount+=detailU;
  vert1=vertCount;
  setNormal(g.sphereX[0],g.sphereY[0],g.sphereZ[0]);
  addVertex(r * g.sphereX[0],r * g.sphereY[0],r * g.sphereZ[0],u,v,VERTEX,false);
  vertCount++;
  for (int i=0; i < detailU; i++) {
    int i1=vert0 + i;
    int i0=vert0 + i - detailU;
    indices[3 * i + 0]=i1;
    indices[3 * i + 1]=i0;
    indices[3 * i + 2]=i1 + 1;
    addEdge(i0,i1,true,true);
    addEdge(i1,i1 + 1,true,true);
  }
  indCount+=3 * detailU;
  int offset=0;
  for (int j=2; j < detailV; j++) {
    offset+=detailU;
    vert0=vertCount;
    u=1;
    v-=dv;
    for (int i=0; i < detailU; i++) {
      int ioff=offset + i;
      setNormal(g.sphereX[ioff],g.sphereY[ioff],g.sphereZ[ioff]);
      addVertex(r * g.sphereX[ioff],r * g.sphereY[ioff],r * g.sphereZ[ioff],u,v,VERTEX,false);
      u-=du;
    }
    vertCount+=detailU;
    vert1=vertCount;
    setNormal(g.sphereX[offset],g.sphereY[offset],g.sphereZ[offset]);
    addVertex(r * g.sphereX[offset],r * g.sphereY[offset],r * g.sphereZ[offset],u,v,VERTEX,false);
    vertCount++;
    for (int i=0; i < detailU; i++) {
      int i1=vert0 + i;
      int i0=vert0 + i - detailU - 1;
      indices[indCount + 6 * i + 0]=i1;
      indices[indCount + 6 * i + 1]=i0;
      indices[indCount + 6 * i + 2]=i0 + 1;
      indices[indCount + 6 * i + 3]=i1;
      indices[indCount + 6 * i + 4]=i0 + 1;
      indices[indCount + 6 * i + 5]=i1 + 1;
      addEdge(i0,i1,true,true);
      addEdge(i1,i1 + 1,true,true);
      addEdge(i0 + 1,i1,true,true);
    }
    indCount+=6 * detailU;
    indices[indCount + 0]=vert1;
    indices[indCount + 1]=vert1 - detailU;
    indices[indCount + 2]=vert1 - 1;
    indCount+=3;
  }
  u=1;
  v=0;
  for (int i=0; i < detailU; i++) {
    setNormal(0,-1,0);
    addVertex(0,-r,0,u,v,VERTEX,false);
    u-=du;
  }
  vertCount+=detailU;
  for (int i=0; i < detailU; i++) {
    int i0=vert0 + i;
    int i1=vert0 + i + detailU+ 1;
    indices[indCount + 3 * i + 0]=i1;
    indices[indCount + 3 * i + 1]=i0;
    indices[indCount + 3 * i + 2]=i0 + 1;
    addEdge(i0,i0 + 1,true,true);
    addEdge(i0,i1,true,true);
  }
  indCount+=3 * detailU;
  return indices;
}
