{
  callback.init(in.renderMode == RETAINED,true,false);
  int cap=strokeCap == ROUND ? LinePath.CAP_ROUND : strokeCap == PROJECT ? LinePath.CAP_SQUARE : LinePath.CAP_BUTT;
  int join=strokeJoin == ROUND ? LinePath.JOIN_ROUND : strokeJoin == BEVEL ? LinePath.JOIN_BEVEL : LinePath.JOIN_MITER;
  LinePath strokedPath=LinePath.createStrokedPath(path,strokeWeight,cap,join);
  gluTess.beginPolygon();
  double[] vertex;
  float[] coords=new float[6];
  LinePath.PathIterator iter=strokedPath.getPathIterator();
  int rule=iter.getWindingRule();
switch (rule) {
case LinePath.WIND_EVEN_ODD:
    gluTess.setWindingRule(PGL.TESS_WINDING_ODD);
  break;
case LinePath.WIND_NON_ZERO:
gluTess.setWindingRule(PGL.TESS_WINDING_NONZERO);
break;
}
while (!iter.isDone()) {
float sr=0;
float sg=0;
float sb=0;
float sa=0;
switch (iter.currentSegment(coords)) {
case LinePath.SEG_MOVETO:
gluTess.beginContour();
case LinePath.SEG_LINETO:
sa=(strokeColor >> 24) & 0xFF;
sr=(strokeColor >> 16) & 0xFF;
sg=(strokeColor >> 8) & 0xFF;
sb=(strokeColor >> 0) & 0xFF;
vertex=new double[]{coords[0],coords[1],0,sa,sr,sg,sb,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
gluTess.addVertex(vertex);
break;
case LinePath.SEG_CLOSE:
gluTess.endContour();
break;
}
iter.next();
}
gluTess.endPolygon();
}
