{
  beginTex();
  int nInVert=in.vertexCount;
  if (fill && 3 <= nInVert) {
    firstPolyIndexCache=-1;
    boolean clamp=clampPolygon();
    callback.init(in.renderMode == RETAINED,false,calcNormals,clamp);
    gluTess.beginPolygon();
    if (solid) {
      gluTess.setWindingRule(PGL.TESS_WINDING_NONZERO);
    }
 else {
      gluTess.setWindingRule(PGL.TESS_WINDING_ODD);
    }
    int i=0;
    int c=0;
    gluTess.beginContour();
    if (stroke) {
      beginPolygonStroke();
      beginStrokePath();
    }
    while (i < in.vertexCount) {
      int code=VERTEX;
      boolean brk=false;
      if (in.codes != null && c < in.codeCount) {
        code=in.codes[c++];
        if (code == BREAK && c < in.codeCount) {
          brk=true;
          code=in.codes[c++];
        }
      }
      if (brk) {
        if (stroke) {
          endStrokePath(closed);
          beginStrokePath();
        }
        gluTess.endContour();
        gluTess.beginContour();
      }
      if (code == BEZIER_VERTEX) {
        addBezierVertex(i);
        i+=3;
      }
 else       if (code == QUADRATIC_VERTEX) {
        addQuadraticVertex(i);
        i+=2;
      }
 else       if (code == CURVE_VERTEX) {
        addCurveVertex(i);
        i++;
      }
 else {
        addVertex(i);
        i++;
      }
    }
    if (stroke) {
      endStrokePath(closed);
      endPolygonStroke();
    }
    gluTess.endContour();
    gluTess.endPolygon();
  }
  endTex();
  if (stroke)   tessellateStrokePath();
}
