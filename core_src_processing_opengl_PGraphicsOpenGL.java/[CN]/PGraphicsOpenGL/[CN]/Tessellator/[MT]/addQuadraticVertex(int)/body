{
  pg.curveVertexCount=0;
  pg.bezierInitCheck();
  pg.bezierVertexCheck(pg.shape,i);
  PMatrix3D draw=pg.bezierDrawMatrix;
  int i1=i - 1;
  float x1=in.vertices[3 * i1 + 0];
  float y1=in.vertices[3 * i1 + 1];
  float z1=in.vertices[3 * i1 + 2];
  int strokeColor=0;
  float strokeWeight=0;
  if (stroke) {
    strokeColor=in.strokeColors[i];
    strokeWeight=in.strokeWeights[i];
  }
  int fcol=in.colors[i];
  int fa=(fcol >> 24) & 0xFF;
  int fr=(fcol >> 16) & 0xFF;
  int fg=(fcol >> 8) & 0xFF;
  int fb=(fcol >> 0) & 0xFF;
  int acol=in.ambient[i];
  int aa=(acol >> 24) & 0xFF;
  int ar=(acol >> 16) & 0xFF;
  int ag=(acol >> 8) & 0xFF;
  int ab=(acol >> 0) & 0xFF;
  int scol=in.specular[i];
  int sa=(scol >> 24) & 0xFF;
  int sr=(scol >> 16) & 0xFF;
  int sg=(scol >> 8) & 0xFF;
  int sb=(scol >> 0) & 0xFF;
  int ecol=in.emissive[i];
  int ea=(ecol >> 24) & 0xFF;
  int er=(ecol >> 16) & 0xFF;
  int eg=(ecol >> 8) & 0xFF;
  int eb=(ecol >> 0) & 0xFF;
  float nx=in.normals[3 * i + 0];
  float ny=in.normals[3 * i + 1];
  float nz=in.normals[3 * i + 2];
  float u=in.texcoords[2 * i + 0];
  float v=in.texcoords[2 * i + 1];
  float sh=in.shininess[i];
  float cx=in.vertices[3 * i + 0];
  float cy=in.vertices[3 * i + 1];
  float cz=in.vertices[3 * i + 2];
  float x=in.vertices[3 * (i + 1) + 0];
  float y=in.vertices[3 * (i + 1) + 1];
  float z=in.vertices[3 * (i + 1) + 2];
  float x2=x1 + ((cx - x1) * 2 / 3.0f);
  float y2=y1 + ((cy - y1) * 2 / 3.0f);
  float z2=z1 + ((cz - z1) * 2 / 3.0f);
  float x3=x + ((cx - x) * 2 / 3.0f);
  float y3=y + ((cy - y) * 2 / 3.0f);
  float z3=z + ((cz - z) * 2 / 3.0f);
  float x4=x;
  float y4=y;
  float z4=z;
  float xplot1=draw.m10 * x1 + draw.m11 * x2 + draw.m12 * x3 + draw.m13 * x4;
  float xplot2=draw.m20 * x1 + draw.m21 * x2 + draw.m22 * x3 + draw.m23 * x4;
  float xplot3=draw.m30 * x1 + draw.m31 * x2 + draw.m32 * x3 + draw.m33 * x4;
  float yplot1=draw.m10 * y1 + draw.m11 * y2 + draw.m12 * y3 + draw.m13 * y4;
  float yplot2=draw.m20 * y1 + draw.m21 * y2 + draw.m22 * y3 + draw.m23 * y4;
  float yplot3=draw.m30 * y1 + draw.m31 * y2 + draw.m32 * y3 + draw.m33 * y4;
  float zplot1=draw.m10 * z1 + draw.m11 * z2 + draw.m12 * z3 + draw.m13 * z4;
  float zplot2=draw.m20 * z1 + draw.m21 * z2 + draw.m22 * z3 + draw.m23 * z4;
  float zplot3=draw.m30 * z1 + draw.m31 * z2 + draw.m32 * z3 + draw.m33 * z4;
  for (int j=0; j < pg.bezierDetail; j++) {
    x1+=xplot1;
    xplot1+=xplot2;
    xplot2+=xplot3;
    y1+=yplot1;
    yplot1+=yplot2;
    yplot2+=yplot3;
    z1+=zplot1;
    zplot1+=zplot2;
    zplot2+=zplot3;
    double[] vertex=new double[]{x1,y1,z1,fa,fr,fg,fb,nx,ny,nz,u,v,aa,ar,ag,ab,sa,sr,sg,sb,ea,er,eg,eb,sh};
    gluTess.addVertex(vertex);
    if (stroke)     addStrokeVertex(x1,y1,z1,strokeColor,strokeWeight);
  }
}
