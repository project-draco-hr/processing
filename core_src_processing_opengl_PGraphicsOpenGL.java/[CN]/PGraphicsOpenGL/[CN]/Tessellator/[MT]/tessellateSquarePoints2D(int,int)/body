{
  tess.polyVertexCheck(nvertTot);
  tess.polyIndexCheck(nindTot);
  int vertIdx=tess.firstPolyVertex;
  int indIdx=tess.firstPolyIndex;
  IndexCache cache=tess.polyIndexCache;
  int index=in.renderMode == RETAINED ? cache.addNew() : cache.getLast();
  firstPointIndexCache=index;
  for (int i=in.firstVertex; i <= in.lastVertex; i++) {
    int nvert=5;
    int count=cache.vertexCount[index];
    if (PGL.MAX_VERTEX_INDEX1 <= count + nvert) {
      index=cache.addNew();
      count=0;
    }
    float x0=in.vertices[3 * i + 0];
    float y0=in.vertices[3 * i + 1];
    int rgba=in.strokeColors[i];
    tess.setPolyVertex(vertIdx,x0,y0,0,rgba);
    vertIdx++;
    for (int k=0; k < nvert - 1; k++) {
      tess.setPolyVertex(vertIdx,x0 + 0.5f * QUAD_POINT_SIGNS[k][0] * strokeWeight,y0 + 0.5f * QUAD_POINT_SIGNS[k][1] * strokeWeight,0,rgba);
      vertIdx++;
    }
    for (int k=1; k < nvert - 1; k++) {
      tess.polyIndices.put(indIdx++,(short)(count + 0));
      tess.polyIndices.put(indIdx++,(short)(count + k));
      tess.polyIndices.put(indIdx++,(short)(count + k + 1));
    }
    tess.polyIndices.put(indIdx++,(short)(count + 0));
    tess.polyIndices.put(indIdx++,(short)(count + 1));
    tess.polyIndices.put(indIdx++,(short)(count + nvert - 1));
    cache.incCounts(index,12,5);
  }
  lastPointIndexCache=lastPolyIndexCache=index;
}
