{
  int nvert=lineCount * 4;
  int nind=lineCount * 2 * 3;
  if (noCapsJoins(nvert)) {
    tess.polyVertexCheck(nvert);
    tess.polyIndexCheck(nind);
    int index=in.renderMode == RETAINED ? tess.polyIndexCache.addNew() : tess.polyIndexCache.getLast();
    firstLineIndexCache=index;
    if (firstPolyIndexCache == -1)     firstPolyIndexCache=index;
    int i0=0;
    boolean clamp=clampLineLoop2D(lineCount);
    for (int ln=0; ln < lineCount - 1; ln++) {
      int i1=ln + 1;
      index=addLineSegment2D(i0,i1,index,false,clamp);
      i0=i1;
    }
    index=addLineSegment2D(0,in.vertexCount - 1,index,false,clamp);
    lastLineIndexCache=lastPolyIndexCache=index;
  }
 else {
    LinePath path=new LinePath(LinePath.WIND_NON_ZERO);
    path.moveTo(in.vertices[0],in.vertices[1],in.strokeColors[0]);
    for (int ln=0; ln < lineCount - 1; ln++) {
      int i1=ln + 1;
      path.lineTo(in.vertices[3 * i1 + 0],in.vertices[3 * i1 + 1],in.strokeColors[i1]);
    }
    path.closePath();
    tessellateLinePath(path);
  }
}
