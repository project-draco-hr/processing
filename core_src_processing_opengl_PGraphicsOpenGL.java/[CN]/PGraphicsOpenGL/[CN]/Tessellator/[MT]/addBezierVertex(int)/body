{
  pg.curveVertexCount=0;
  pg.bezierInitCheck();
  pg.bezierVertexCheck(POLYGON,i);
  PMatrix3D draw=pg.bezierDrawMatrix;
  int i1=i - 1;
  float x1=in.vertices[3 * i1 + 0];
  float y1=in.vertices[3 * i1 + 1];
  float z1=in.vertices[3 * i1 + 2];
  int strokeColor=0;
  float strokeWeight=0;
  if (stroke) {
    strokeColor=in.strokeColors[i];
    strokeWeight=in.strokeWeights[i];
  }
  int fcol=0, fa=0, fr=0, fg=0, fb=0;
  int acol=0, aa=0, ar=0, ag=0, ab=0;
  int scol=0, sa=0, sr=0, sg=0, sb=0;
  int ecol=0, ea=0, er=0, eg=0, eb=0;
  float nx=0, ny=0, nz=0, u=0, v=0, sh=0;
  if (fill) {
    fcol=in.colors[i];
    fa=(fcol >> 24) & 0xFF;
    fr=(fcol >> 16) & 0xFF;
    fg=(fcol >> 8) & 0xFF;
    fb=(fcol >> 0) & 0xFF;
    acol=in.ambient[i];
    aa=(acol >> 24) & 0xFF;
    ar=(acol >> 16) & 0xFF;
    ag=(acol >> 8) & 0xFF;
    ab=(acol >> 0) & 0xFF;
    scol=in.specular[i];
    sa=(scol >> 24) & 0xFF;
    sr=(scol >> 16) & 0xFF;
    sg=(scol >> 8) & 0xFF;
    sb=(scol >> 0) & 0xFF;
    ecol=in.emissive[i];
    ea=(ecol >> 24) & 0xFF;
    er=(ecol >> 16) & 0xFF;
    eg=(ecol >> 8) & 0xFF;
    eb=(ecol >> 0) & 0xFF;
    nx=in.normals[3 * i + 0];
    ny=in.normals[3 * i + 1];
    nz=in.normals[3 * i + 2];
    u=in.texcoords[2 * i + 0];
    v=in.texcoords[2 * i + 1];
    sh=in.shininess[i];
  }
  float x2=in.vertices[3 * i + 0];
  float y2=in.vertices[3 * i + 1];
  float z2=in.vertices[3 * i + 2];
  float x3=in.vertices[3 * (i + 1) + 0];
  float y3=in.vertices[3 * (i + 1) + 1];
  float z3=in.vertices[3 * (i + 1) + 2];
  float x4=in.vertices[3 * (i + 2) + 0];
  float y4=in.vertices[3 * (i + 2) + 1];
  float z4=in.vertices[3 * (i + 2) + 2];
  float xplot1=draw.m10 * x1 + draw.m11 * x2 + draw.m12 * x3 + draw.m13 * x4;
  float xplot2=draw.m20 * x1 + draw.m21 * x2 + draw.m22 * x3 + draw.m23 * x4;
  float xplot3=draw.m30 * x1 + draw.m31 * x2 + draw.m32 * x3 + draw.m33 * x4;
  float yplot1=draw.m10 * y1 + draw.m11 * y2 + draw.m12 * y3 + draw.m13 * y4;
  float yplot2=draw.m20 * y1 + draw.m21 * y2 + draw.m22 * y3 + draw.m23 * y4;
  float yplot3=draw.m30 * y1 + draw.m31 * y2 + draw.m32 * y3 + draw.m33 * y4;
  float zplot1=draw.m10 * z1 + draw.m11 * z2 + draw.m12 * z3 + draw.m13 * z4;
  float zplot2=draw.m20 * z1 + draw.m21 * z2 + draw.m22 * z3 + draw.m23 * z4;
  float zplot3=draw.m30 * z1 + draw.m31 * z2 + draw.m32 * z3 + draw.m33 * z4;
  for (int j=0; j < pg.bezierDetail; j++) {
    x1+=xplot1;
    xplot1+=xplot2;
    xplot2+=xplot3;
    y1+=yplot1;
    yplot1+=yplot2;
    yplot2+=yplot3;
    z1+=zplot1;
    zplot1+=zplot2;
    zplot2+=zplot3;
    if (fill) {
      double[] vertex=new double[]{x1,y1,z1,fa,fr,fg,fb,nx,ny,nz,u,v,aa,ar,ag,ab,sa,sr,sg,sb,ea,er,eg,eb,sh};
      gluTess.addVertex(vertex);
    }
    if (stroke)     addStrokeVertex(x1,y1,z1,strokeColor,strokeWeight);
  }
}
