{
  boolean bevel=!noCapsJoins();
  int nInVert=in.getNumEdgeVertices(bevel);
  int nInInd=in.getNumEdgeIndices(bevel);
  int vcount0=tess.lineVertexCount;
  int icount0=tess.lineIndexCount;
  tess.lineVertexCheck(nInVert);
  tess.lineIndexCheck(nInInd);
  int index=in.renderMode == RETAINED ? tess.lineIndexCache.addNew() : tess.lineIndexCache.getLast();
  firstLineIndexCache=index;
  int fi0=0;
  int fi1=0;
  short[] lastInd={-1,-1};
  int pi0=-1;
  int pi1=-1;
  int[] tmp={0,0};
  tess.lineIndexCache.setCounter(tmp);
  for (int i=0; i <= in.edgeCount - 1; i++) {
    int[] edge=in.edges[i];
    int i0=edge[0];
    int i1=edge[1];
    if (bevel) {
      if (edge[2] == EDGE_CLOSE) {
        index=addBevel3D(fi0,fi1,pi0,pi1,index,lastInd,false);
      }
 else {
        index=addLineSegment3D(i0,i1,pi0,pi1,index,lastInd,false);
      }
    }
 else     if (edge[2] != EDGE_CLOSE) {
      index=addLineSegment3D(i0,i1,pi0,pi1,index,null,false);
    }
    if (edge[2] == EDGE_START) {
      fi0=i0;
      fi1=i1;
    }
    if (edge[2] == EDGE_STOP || edge[2] == EDGE_SINGLE || edge[2] == EDGE_CLOSE) {
      lastInd[0]=lastInd[1]=-1;
      pi1=pi0=-1;
    }
 else {
      pi0=i0;
      pi1=i1;
    }
  }
  tess.lineIndexCache.setCounter(null);
  tess.lineIndexCount=icount0 + tmp[0];
  tess.lineVertexCount=vcount0 + tmp[1];
  lastLineIndexCache=index;
}
