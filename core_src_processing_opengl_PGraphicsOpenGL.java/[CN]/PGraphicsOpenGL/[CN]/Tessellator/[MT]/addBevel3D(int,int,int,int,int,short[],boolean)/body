{
  IndexCache cache=tess.lineIndexCache;
  int count=cache.vertexCount[index];
  boolean newCache=false;
  if (PGL.MAX_VERTEX_INDEX1 <= count + 3) {
    index=cache.addNew();
    count=0;
    newCache=true;
  }
  int iidx=cache.indexOffset[index] + cache.indexCount[index];
  int vidx=cache.vertexOffset[index] + cache.vertexCount[index];
  int color=constStroke ? strokeColor : strokeColors[fi0];
  float weight=constStroke ? strokeWeight : strokeWeights[fi0];
  weight*=transformScale();
  tess.setLineVertex(vidx++,strokeVertices,fi0,color);
  tess.setLineVertex(vidx++,strokeVertices,fi0,fi1,color,+weight / 2);
  tess.setLineVertex(vidx++,strokeVertices,fi0,fi1,color,-weight / 2);
  int extra=0;
  if (newCache && -1 < pi0 && -1 < pi1) {
    color=constStroke ? strokeColor : strokeColors[pi1];
    weight=constStroke ? strokeWeight : strokeWeights[pi1];
    weight*=transformScale();
    tess.setLineVertex(vidx++,strokeVertices,pi1,pi0,color,-weight / 2);
    tess.setLineVertex(vidx,strokeVertices,pi1,pi0,color,+weight / 2);
    lastInd[0]=(short)(count + 3);
    lastInd[1]=(short)(count + 4);
    extra=2;
  }
  tess.lineIndices[iidx++]=(short)(count + 0);
  tess.lineIndices[iidx++]=lastInd[0];
  tess.lineIndices[iidx++]=(short)(count + 1);
  tess.lineIndices[iidx++]=(short)(count + 0);
  tess.lineIndices[iidx++]=(short)(count + 2);
  tess.lineIndices[iidx]=lastInd[1];
  cache.incCounts(index,6,3 + extra);
  return index;
}
