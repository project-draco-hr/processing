{
  super.bind();
  if (-1 < ambientLoc)   pgl.enableVertexAttribArray(ambientLoc);
  if (-1 < specularLoc)   pgl.enableVertexAttribArray(specularLoc);
  if (-1 < emissiveLoc)   pgl.enableVertexAttribArray(emissiveLoc);
  if (-1 < shininessLoc)   pgl.enableVertexAttribArray(shininessLoc);
  int count=pgCurrent.lightCount;
  setUniformValue(lightCountLoc,count);
  setUniformVector(lightPositionLoc,pgCurrent.lightPosition,4,count);
  setUniformVector(lightNormalLoc,pgCurrent.lightNormal,3,count);
  setUniformVector(lightAmbientLoc,pgCurrent.lightAmbient,3,count);
  setUniformVector(lightDiffuseLoc,pgCurrent.lightDiffuse,3,count);
  setUniformVector(lightSpecularLoc,pgCurrent.lightSpecular,3,count);
  setUniformVector(lightFalloffLoc,pgCurrent.lightFalloffCoefficients,3,count);
  setUniformVector(lightSpotLoc,pgCurrent.lightSpotParameters,2,count);
}
