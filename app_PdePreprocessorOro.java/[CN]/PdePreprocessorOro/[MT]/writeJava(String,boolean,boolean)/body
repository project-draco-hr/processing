{
  String extendsWhat=extendsNormal ? "BApplet" : "BAppletGL";
  try {
    int programType=BEGINNER;
    program=commentsCodec(program);
    if (PdeBase.getBoolean("compiler.substitute_f",true)) {
      program=substipoot(program,"([\\s\\,\\;\\+\\-\\/\\*\\(\\)])(\\d+\\.\\d*)([\\s\\,\\;\\+\\-\\/\\*\\(\\)])","$1$2f$3");
      program=substipoot(program,"([\\s\\,\\;\\+\\-\\/\\*\\(\\)])(\\d*\\.\\d+)([\\s\\,\\;\\+\\-\\/\\*\\(\\)])","$1$2f$3");
    }
    if (PdeBase.getBoolean("compiler.enhanced_casting",true)) {
      program=substipoot(program,"([^A-Za-z0-9_])byte\\((.*)\\)","$1(byte)($2)");
      program=substipoot(program,"([^A-Za-z0-9_])char\\((.*)\\)","$1(char)($2)");
      program=substipoot(program,"([^A-Za-z0-9_])int\\((.*)\\)","$1(int)($2)");
      program=substipoot(program,"([^A-Za-z0-9_])float\\((.*)\\)","$1(float)($2)");
    }
    if (PdeBase.getBoolean("compiler.color_datatype",true)) {
      if (program.indexOf("color") == 0)       program=" " + program;
      program=substipoot(program,"([;\\s\\(])color([\\s\\[])","$1int$2");
    }
    if (PdeBase.getBoolean("compiler.inline_web_colors",true)) {
      program=substipoot(program,"#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])","0xff$1$2$3");
    }
    if ((program.indexOf("void setup()") != -1) || (program.indexOf("void loop()") != -1) || (program.indexOf("void draw()") != -1)) {
      programType=INTERMEDIATE;
    }
    int index=program.indexOf("public class");
    if (index != -1) {
      programType=ADVANCED;
      String s=program.substring(index + "public class".length()).trim();
      index=s.indexOf(' ');
      name=s.substring(0,index);
      tempClass=name;
    }
    tempFilename=name + ".java";
    tempClassFilename=name + ".class";
    PrintWriter writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(buildPath + File.separator + tempFilename))));
    if (programType < ADVANCED) {
      if (!exporting) {
        for (int i=0; i < application_imports.length; i++) {
          writer.print("import " + application_imports[i] + ".*; ");
        }
      }
 else {
        for (int i=0; i < applet_imports.length; i++) {
          writer.println("import " + applet_imports[i] + ".*; ");
        }
      }
      if (exporting)       writer.println();
      writer.print("public class " + name + " extends "+ extendsWhat+ " {");
    }
    if (programType == BEGINNER) {
      if (exporting)       writer.println();
      if ((program.indexOf("size(") == 0) || (program.indexOf("background(") == 0)) {
        program=" " + program;
      }
      PatternMatcher matcher=null;
      PatternCompiler compiler=null;
      Pattern pattern=null;
      Perl5Substitution subst=null;
      PatternMatcherInput input=null;
      matcher=new Perl5Matcher();
      compiler=new Perl5Compiler();
      try {
        pattern=compiler.compile("[\\s\\;](size\\(\\s*\\d+,\\s*\\d+\\s*\\);)");
      }
 catch (      MalformedPatternException e) {
        e.printStackTrace();
        System.exit(1);
      }
      String sizeInfo=null;
      input=new PatternMatcherInput(program);
      if (matcher.contains(input,pattern)) {
        MatchResult result=matcher.getMatch();
        sizeInfo=result.group(0);
      }
 else {
        sizeInfo="size(" + BApplet.DEFAULT_WIDTH + ", "+ BApplet.DEFAULT_HEIGHT+ "); ";
      }
      subst=new Perl5Substitution("",Perl5Substitution.INTERPOLATE_ALL);
      program=Util.substitute(matcher,pattern,subst,program,Util.SUBSTITUTE_ALL);
      matcher=new Perl5Matcher();
      compiler=new Perl5Compiler();
      try {
        pattern=compiler.compile("[\\s\\;](background\\(.*\\);)");
      }
 catch (      MalformedPatternException e) {
        e.printStackTrace();
        System.exit(1);
      }
      String backgroundInfo="";
      input=new PatternMatcherInput(program);
      if (matcher.contains(input,pattern)) {
        MatchResult result=matcher.getMatch();
        backgroundInfo=result.group(0);
      }
      subst=new Perl5Substitution("",Perl5Substitution.INTERPOLATE_ALL);
      program=Util.substitute(matcher,pattern,subst,program,Util.SUBSTITUTE_ALL);
      writer.print("void setup() { ");
      writer.print(sizeInfo);
      writer.print(backgroundInfo);
      writer.print("} ");
      writer.print("void draw() {");
    }
    program=commentsCodec(program);
    if (exporting)     writer.println();
    writer.println(program);
    if (programType == BEGINNER) {
      writer.println("}");
    }
    if (programType < ADVANCED) {
      writer.print("}");
    }
    writer.flush();
    writer.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return name;
}
