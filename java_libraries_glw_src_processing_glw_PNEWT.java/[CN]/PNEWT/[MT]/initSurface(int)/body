{
  if (profile == null) {
    if (PROFILE == 2) {
      try {
        profile=GLProfile.getGL2ES1();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxFixedFunc(true);
      }
    }
 else     if (PROFILE == 3) {
      try {
        profile=GLProfile.getGL2GL3();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxProgrammable(true);
      }
      if (!profile.isGL3()) {
        PGraphics.showWarning("Requested profile GL3 but is not available, got: " + profile);
      }
    }
 else     if (PROFILE == 4) {
      try {
        profile=GLProfile.getGL4ES3();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxProgrammable(true);
      }
      if (!profile.isGL4()) {
        PGraphics.showWarning("Requested profile GL4 but is not available, got: " + profile);
      }
    }
 else     throw new RuntimeException(UNSUPPORTED_GLPROF_ERROR);
    if (2 < PROFILE) {
      texVertShaderSource=convertVertexSource(texVertShaderSource,120,150);
      tex2DFragShaderSource=convertFragmentSource(tex2DFragShaderSource,120,150);
      texRectFragShaderSource=convertFragmentSource(texRectFragShaderSource,120,150);
    }
  }
 else {
    window.removeGLEventListener(listener);
    pg.parent.remove(canvasNEWT);
  }
  GLCapabilities caps=new GLCapabilities(profile);
  caps.setAlphaBits(REQUESTED_ALPHA_BITS);
  caps.setDepthBits(REQUESTED_DEPTH_BITS);
  caps.setStencilBits(REQUESTED_STENCIL_BITS);
  if (1 < antialias) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(antialias);
  }
 else {
    caps.setSampleBuffers(false);
  }
  fboLayerRequested=false;
  window=GLWindow.create(caps);
  window.setSize(pg.width,pg.height);
  window.setVisible(true);
  window.setTitle(pg.parent.frame.getTitle());
  pg.parent.frame.setVisible(false);
  canvas=canvasNEWT;
  canvasAWT=null;
  window.addWindowListener(new WindowAdapter(){
    @Override public void windowDestroyNotify(    final WindowEvent e){
      System.exit(0);
    }
  }
);
  registerListeners();
}
