{
  if (profile == null) {
    if (PROFILE == 2) {
      try {
        profile=GLProfile.getGL2ES1();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxFixedFunc(true);
      }
    }
 else     if (PROFILE == 3) {
      try {
        profile=GLProfile.getGL2GL3();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxProgrammable(true);
      }
      if (!profile.isGL3()) {
        PGraphics.showWarning("Requested profile GL3 but is not available, got: " + profile);
      }
    }
 else     if (PROFILE == 4) {
      try {
        profile=GLProfile.getGL4ES3();
      }
 catch (      GLException ex) {
        profile=GLProfile.getMaxProgrammable(true);
      }
      if (!profile.isGL4()) {
        PGraphics.showWarning("Requested profile GL4 but is not available, got: " + profile);
      }
    }
 else     throw new RuntimeException(UNSUPPORTED_GLPROF_ERROR);
    if (2 < PROFILE) {
      texVertShaderSource=convertVertexSource(texVertShaderSource,120,150);
      tex2DFragShaderSource=convertFragmentSource(tex2DFragShaderSource,120,150);
      texRectFragShaderSource=convertFragmentSource(texRectFragShaderSource,120,150);
    }
  }
  sharedCaps=new GLCapabilities(profile);
  sharedCaps.setAlphaBits(REQUESTED_ALPHA_BITS);
  sharedCaps.setDepthBits(REQUESTED_DEPTH_BITS);
  sharedCaps.setStencilBits(REQUESTED_STENCIL_BITS);
  sharedCaps.setPBuffer(false);
  sharedCaps.setFBO(false);
  sharedCaps.setSampleBuffers(false);
  fboLayerRequested=false;
  sharedDrawable=GLDrawableFactory.getFactory(profile).createDummyAutoDrawable(null,true,sharedCaps,null);
  sharedDrawable.display();
  DummyListener listener=new DummyListener();
  sharedDrawable.addGLEventListener(listener);
  pg.parent.frame.setVisible(false);
}
