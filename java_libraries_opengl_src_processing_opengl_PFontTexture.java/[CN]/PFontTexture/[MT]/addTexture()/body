{
  int w, h;
  boolean resize;
  w=maxTexWidth;
  if (-1 < currentTex && textures[currentTex].glHeight < maxTexHeight) {
    h=PApplet.min(2 * textures[currentTex].glHeight,maxTexHeight);
    resize=true;
  }
 else {
    h=PApplet.min(PGraphicsOpenGL.maxTextureSize,512,maxTexHeight / 4);
    resize=false;
  }
  PTexture tex=new PTexture(parent,w,h,new PTexture.Parameters(ARGB,BILINEAR));
  if (textures == null) {
    textures=new PTexture[1];
    textures[0]=tex;
    images=new PImage[1];
    images[0]=new PImage(tex.width,tex.height,ARGB);
    images[0].setCache(ogl,tex);
    currentTex=0;
  }
 else   if (resize) {
    PTexture tex0=textures[currentTex];
    tex.put(tex0);
    textures[currentTex]=tex;
    images[currentTex].setCache(ogl,tex);
    images[currentTex].width=tex.width;
    images[currentTex].height=tex.height;
  }
 else {
    PTexture[] temp=textures;
    textures=new PTexture[textures.length + 1];
    PApplet.arrayCopy(temp,textures,temp.length);
    textures[temp.length]=tex;
    currentTex=textures.length - 1;
    PImage[] temp2=images;
    images=new PImage[textures.length + 1];
    PApplet.arrayCopy(temp2,images,temp2.length);
    images[temp.length]=new PImage(tex.width,tex.height,ARGB);
    images[temp.length].setCache(ogl,tex);
  }
  lastTex=currentTex;
  tex.bind();
  return resize;
}
