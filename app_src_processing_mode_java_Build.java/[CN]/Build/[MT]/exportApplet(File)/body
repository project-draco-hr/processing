{
  sketch.prepareBuild(appletFolder);
  srcFolder=sketch.makeTempFolder();
  binFolder=sketch.makeTempFolder();
  String foundName=build(srcFolder,binFolder);
  if (foundName == null)   return false;
  if (!sketch.getName().equals(foundName)) {
    Base.showWarning("Error during export","Sketch name is " + sketch.getName() + " but the\n"+ "name found in the code was "+ foundName+ ".",null);
    return false;
  }
  int wide=PApplet.DEFAULT_WIDTH;
  int high=PApplet.DEFAULT_HEIGHT;
  String renderer="";
  String scrubbed=scrubComments(sketch.getCode(0).getProgram());
  String[] matches=PApplet.match(scrubbed,SIZE_REGEX);
  if (matches != null) {
    try {
      wide=Integer.parseInt(matches[1]);
      high=Integer.parseInt(matches[2]);
      if (matches.length == 4)       renderer=matches[3].trim();
    }
 catch (    NumberFormatException e) {
      final String message="The size of this applet could not automatically be\n" + "determined from your code. You'll have to edit the\n" + "HTML file to set the size of the applet.\n"+ "Use only numeric values (not variables) for the size()\n"+ "command. See the size() reference for an explanation.";
      Base.showWarning("Could not find applet size",message,null);
    }
  }
  String description="";
  String[] javadoc=PApplet.match(sketch.getCode(0).getProgram(),"/\\*{2,}(.*)\\*+/");
  if (javadoc != null) {
    StringBuffer dbuffer=new StringBuffer();
    String[] pieces=PApplet.split(javadoc[1],'\n');
    for (    String line : pieces) {
      String[] m=PApplet.match(line,"^\\s*\\*+(.*)");
      dbuffer.append(m != null ? m[1] : line);
      dbuffer.append('\n');
    }
    description=dbuffer.toString();
  }
  StringBuffer sources=new StringBuffer();
  for (  SketchCode code : sketch.getCode()) {
    sources.append("<a href=\"" + code.getFileName() + "\">"+ code.getPrettyName()+ "</a> ");
  }
  for (  SketchCode code : sketch.getCode()) {
    try {
      File exportedSource=new File(appletFolder,code.getFileName());
      code.copyTo(exportedSource);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  boolean separateJar=Preferences.getBoolean("export.applet.separate_jar_files") || sketch.hasCodeFolder() || javaLibraryPath.length() != 0;
  String LOADING_IMAGE="loading.gif";
  File loadingImage=new File(sketch.getFolder(),LOADING_IMAGE);
  if (!loadingImage.exists()) {
    File skeletonFolder=new File(Base.getContentFile("lib"),"export");
    loadingImage=new File(skeletonFolder,LOADING_IMAGE);
  }
  Base.copyFile(loadingImage,new File(appletFolder,LOADING_IMAGE));
  FileOutputStream zipOutputFile=new FileOutputStream(new File(appletFolder,sketch.getName() + ".jar"));
  ZipOutputStream zos=new ZipOutputStream(zipOutputFile);
  StringBuffer archives=new StringBuffer();
  archives.append(sketch.getName() + ".jar");
  addManifest(zos);
  if (sketch.hasCodeFolder()) {
    File[] codeJarFiles=sketch.getCodeFolder().listFiles(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        if (name.charAt(0) == '.')         return false;
        if (name.toLowerCase().endsWith(".jar"))         return true;
        if (name.toLowerCase().endsWith(".zip"))         return true;
        return false;
      }
    }
);
    for (    File exportFile : codeJarFiles) {
      Base.copyFile(exportFile,new File(appletFolder,exportFile.getName()));
    }
  }
  boolean openglApplet=false;
  HashMap<String,Object> zipFileContents=new HashMap<String,Object>();
  for (  Library library : importedLibraries) {
    if (library.getName().equals("OpenGL")) {
      openglApplet=true;
    }
    for (    File exportFile : library.getAppletExports()) {
      String exportName=exportFile.getName();
      if (!exportFile.exists()) {
        System.err.println("File " + exportFile.getAbsolutePath() + " does not exist");
      }
 else       if (exportFile.isDirectory()) {
        System.err.println("Ignoring sub-folder \"" + exportFile.getAbsolutePath() + "\"");
      }
 else       if (exportName.toLowerCase().endsWith(".zip") || exportName.toLowerCase().endsWith(".jar")) {
        if (separateJar) {
          Base.copyFile(exportFile,new File(appletFolder,exportName));
          archives.append("," + exportName);
        }
 else {
          String path=exportFile.getAbsolutePath();
          packClassPathIntoZipFile(path,zos,zipFileContents);
        }
      }
 else {
        Base.copyFile(exportFile,new File(appletFolder,exportName));
      }
    }
  }
  File bagelJar=Base.isMacOS() ? Base.getContentFile("core.jar") : Base.getContentFile("lib/core.jar");
  if (separateJar) {
    Base.copyFile(bagelJar,new File(appletFolder,"core.jar"));
    archives.append(",core.jar");
  }
 else {
    String bagelJarPath=bagelJar.getAbsolutePath();
    packClassPathIntoZipFile(bagelJarPath,zos,zipFileContents);
  }
  addDataFolder(zos);
  addClasses(zos,binFolder);
  zos.flush();
  zos.close();
  File htmlOutputFile=new File(appletFolder,"index.html");
  PrintWriter htmlWriter=PApplet.createWriter(htmlOutputFile);
  InputStream is=null;
  File customHtml=new File(sketch.getFolder(),"applet.html");
  if (customHtml.exists()) {
    is=new FileInputStream(customHtml);
  }
  if (renderer.equals("OPENGL")) {
    openglApplet=true;
  }
  if (is == null) {
    if (openglApplet) {
      is=Base.getLibStream("export/applet-opengl.html");
    }
 else {
      is=Base.getLibStream("export/applet.html");
    }
  }
  BufferedReader reader=PApplet.createReader(is);
  String line=null;
  while ((line=reader.readLine()) != null) {
    if (line.indexOf("@@") != -1) {
      StringBuffer sb=new StringBuffer(line);
      int index=0;
      while ((index=sb.indexOf("@@sketch@@")) != -1) {
        sb.replace(index,index + "@@sketch@@".length(),sketch.getName());
      }
      while ((index=sb.indexOf("@@source@@")) != -1) {
        sb.replace(index,index + "@@source@@".length(),sources.toString());
      }
      while ((index=sb.indexOf("@@archive@@")) != -1) {
        sb.replace(index,index + "@@archive@@".length(),archives.toString());
      }
      while ((index=sb.indexOf("@@width@@")) != -1) {
        sb.replace(index,index + "@@width@@".length(),String.valueOf(wide));
      }
      while ((index=sb.indexOf("@@height@@")) != -1) {
        sb.replace(index,index + "@@height@@".length(),String.valueOf(high));
      }
      while ((index=sb.indexOf("@@description@@")) != -1) {
        sb.replace(index,index + "@@description@@".length(),description);
      }
      line=sb.toString();
    }
    htmlWriter.println(line);
  }
  reader.close();
  htmlWriter.flush();
  htmlWriter.close();
  return true;
}
