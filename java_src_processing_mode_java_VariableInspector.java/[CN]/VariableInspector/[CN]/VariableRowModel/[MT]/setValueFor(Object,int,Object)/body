{
  VariableNode var=(VariableNode)o;
  String stringValue=(String)o1;
  Debugger dbg=editor.getDebugger();
  Value value=null;
  try {
switch (var.getType()) {
case VariableNode.TYPE_INTEGER:
      value=dbg.vm().mirrorOf(Integer.parseInt(stringValue));
    break;
case VariableNode.TYPE_BOOLEAN:
  value=dbg.vm().mirrorOf(Boolean.parseBoolean(stringValue));
break;
case VariableNode.TYPE_FLOAT:
value=dbg.vm().mirrorOf(Float.parseFloat(stringValue));
break;
case VariableNode.TYPE_STRING:
value=dbg.vm().mirrorOf(stringValue);
break;
case VariableNode.TYPE_LONG:
value=dbg.vm().mirrorOf(Long.parseLong(stringValue));
break;
case VariableNode.TYPE_BYTE:
value=dbg.vm().mirrorOf(Byte.parseByte(stringValue));
break;
case VariableNode.TYPE_DOUBLE:
value=dbg.vm().mirrorOf(Double.parseDouble(stringValue));
break;
case VariableNode.TYPE_SHORT:
value=dbg.vm().mirrorOf(Short.parseShort(stringValue));
break;
case VariableNode.TYPE_CHAR:
if (stringValue.length() > 0) {
value=dbg.vm().mirrorOf(stringValue.charAt(0));
}
break;
}
}
 catch (NumberFormatException ex) {
Logger.getLogger(VariableRowModel.class.getName()).log(Level.INFO,"invalid value entered for {0}: {1}",new Object[]{var.getName(),stringValue});
}
if (value != null) {
var.setValue(value);
Logger.getLogger(VariableRowModel.class.getName()).log(Level.INFO,"new value set: {0}",var.getStringValue());
}
}
