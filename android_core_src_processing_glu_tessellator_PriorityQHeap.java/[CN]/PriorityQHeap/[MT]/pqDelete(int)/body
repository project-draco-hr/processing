{
  PriorityQ.PQnode[] n=nodes;
  PriorityQ.PQhandleElem[] h=handles;
  int curr;
  assert(hCurr >= 1 && hCurr <= max && h[hCurr].key != null);
  curr=h[hCurr].node;
  n[curr].handle=n[size].handle;
  h[n[curr].handle].node=curr;
  if (curr <= --size) {
    if (curr <= 1 || LEQ(leq,h[n[curr >> 1].handle].key,h[n[curr].handle].key)) {
      FloatDown(curr);
    }
 else {
      FloatUp(curr);
    }
  }
  h[hCurr].key=null;
  h[hCurr].node=freeList;
  freeList=hCurr;
}
