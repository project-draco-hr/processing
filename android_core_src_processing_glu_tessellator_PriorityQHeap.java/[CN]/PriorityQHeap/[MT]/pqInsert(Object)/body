{
  int curr;
  int free;
  curr=++size;
  if ((curr * 2) > max) {
    PriorityQ.PQnode[] saveNodes=nodes;
    PriorityQ.PQhandleElem[] saveHandles=handles;
    max<<=1;
    PriorityQ.PQnode[] pqNodes=new PriorityQ.PQnode[max + 1];
    System.arraycopy(nodes,0,pqNodes,0,nodes.length);
    for (int i=nodes.length; i < pqNodes.length; i++) {
      pqNodes[i]=new PQnode();
    }
    nodes=pqNodes;
    if (nodes == null) {
      nodes=saveNodes;
      return Integer.MAX_VALUE;
    }
    PriorityQ.PQhandleElem[] pqHandles=new PriorityQ.PQhandleElem[max + 1];
    System.arraycopy(handles,0,pqHandles,0,handles.length);
    for (int i=handles.length; i < pqHandles.length; i++) {
      pqHandles[i]=new PQhandleElem();
    }
    handles=pqHandles;
    if (handles == null) {
      handles=saveHandles;
      return Integer.MAX_VALUE;
    }
  }
  if (freeList == 0) {
    free=curr;
  }
 else {
    free=freeList;
    freeList=handles[free].node;
  }
  nodes[curr].handle=free;
  handles[free].node=curr;
  handles[free].key=keyNew;
  if (initialized) {
    FloatUp(curr);
  }
  assert(free != Integer.MAX_VALUE);
  return free;
}
