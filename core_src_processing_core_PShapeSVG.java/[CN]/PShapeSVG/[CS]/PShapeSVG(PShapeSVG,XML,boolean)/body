{
  setParent(parent);
  if (properties.getName().equals("svg")) {
    String unitWidth=properties.getString("width");
    String unitHeight=properties.getString("height");
    if (unitWidth != null)     width=parseUnitSize(unitWidth,100);
    if (unitHeight != null)     height=parseUnitSize(unitHeight,100);
    String viewBoxStr=properties.getString("viewBox");
    if (viewBoxStr != null) {
      float[] viewBox=PApplet.parseFloat(PApplet.splitTokens(viewBoxStr));
      if (unitWidth == null || unitHeight == null) {
        width=viewBox[2];
        height=viewBox[3];
      }
 else {
        if (matrix == null)         matrix=new PMatrix2D();
        matrix.scale(width / viewBox[2],height / viewBox[3]);
        matrix.translate(-viewBox[0],-viewBox[1]);
      }
    }
    if (width < 0 || height < 0)     throw new RuntimeException("<svg>: width (" + width + ") and height ("+ height+ ") must not be negative.");
    if ((unitWidth == null || unitHeight == null) && viewBoxStr == null) {
      PGraphics.showWarning("The width and/or height is not " + "readable in the <svg> tag of this file.");
      width=1;
      height=1;
    }
    svgWidth=width;
    svgHeight=height;
    svgSizeXY=PApplet.sqrt((svgWidth * svgWidth + svgHeight * svgHeight) / 2.0f);
  }
  element=properties;
  name=properties.getString("id");
  if (name != null) {
    while (true) {
      String[] m=PApplet.match(name,"_x([A-Za-z0-9]{2})_");
      if (m == null)       break;
      char repair=(char)PApplet.unhex(m[1]);
      name=name.replace(m[0],"" + repair);
    }
  }
  String displayStr=properties.getString("display","inline");
  visible=!displayStr.equals("none");
  String transformStr=properties.getString("transform");
  if (transformStr != null) {
    if (matrix == null) {
      matrix=parseTransform(transformStr);
    }
 else {
      matrix.preApply(parseTransform(transformStr));
    }
  }
  if (parseKids) {
    parseColors(properties);
    parseChildren(properties);
  }
}
