{
  super("Find");
  setResizable(false);
  this.editor=editor;
  Container pain=getContentPane();
  pain.setLayout(null);
  JLabel findLabel=new JLabel("Find:");
  JLabel replaceLabel=new JLabel("Replace with:");
  Dimension labelDimension=replaceLabel.getPreferredSize();
  pain.add(findLabel);
  pain.add(replaceLabel);
  pain.add(findField=new JTextField());
  pain.add(replaceField=new JTextField());
  int fieldHeight=findField.getPreferredSize().height;
  if (findString != null)   findField.setText(findString);
  if (replaceString != null)   replaceField.setText(replaceString);
  ignoreCaseBox=new JCheckBox("Ignore Case");
  ignoreCaseBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ignoreCase=ignoreCaseBox.isSelected();
    }
  }
);
  ignoreCaseBox.setSelected(ignoreCase);
  pain.add(ignoreCaseBox);
  allTabsBox=new JCheckBox("All Tabs");
  allTabsBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      allTabs=allTabsBox.isSelected();
    }
  }
);
  allTabsBox.setSelected(allTabs);
  allTabsBox.setEnabled(true);
  pain.add(allTabsBox);
  wrapAroundBox=new JCheckBox("Wrap Around");
  wrapAroundBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      wrapAround=wrapAroundBox.isSelected();
    }
  }
);
  wrapAroundBox.setSelected(wrapAround);
  pain.add(wrapAroundBox);
  JPanel buttons=new JPanel();
  buttons.setLayout(new FlowLayout(FlowLayout.CENTER,BUTTON_GAP,0));
  replaceAllButton=new JButton("Replace All");
  replaceButton=new JButton("Replace");
  replaceAndFindButton=new JButton("Replace & Find");
  previousButton=new JButton("Previous");
  findButton=new JButton("Find");
  if (Base.isMacOS()) {
    buttons.add(replaceAllButton);
    buttons.add(replaceButton);
    buttons.add(replaceAndFindButton);
    buttons.add(previousButton);
    buttons.add(findButton);
    buttons.setBorder(null);
  }
 else {
    buttons.add(findButton);
    buttons.add(previousButton);
    buttons.add(replaceAndFindButton);
    buttons.add(replaceButton);
    buttons.add(replaceAllButton);
  }
  pain.add(buttons);
  setFound(false);
  Dimension buttonsDimension=buttons.getPreferredSize();
  int visibleButtonWidth=buttonsDimension.width - 2 * BUTTON_GAP;
  int fieldWidth=visibleButtonWidth - (labelDimension.width + SMALL);
  int yoff=(1 + fieldHeight - labelDimension.height) / 2;
  int ypos=EDGE;
  int labelWidth=findLabel.getPreferredSize().width;
  findLabel.setBounds(EDGE + (labelDimension.width - labelWidth),ypos + yoff,labelWidth,labelDimension.height);
  findField.setBounds(EDGE + labelDimension.width + SMALL,ypos,fieldWidth,fieldHeight);
  ypos+=fieldHeight + SMALL;
  labelWidth=replaceLabel.getPreferredSize().width;
  replaceLabel.setBounds(EDGE + (labelDimension.width - labelWidth),ypos + yoff,labelWidth,labelDimension.height);
  replaceField.setBounds(EDGE + labelDimension.width + SMALL,ypos,fieldWidth,fieldHeight);
  ypos+=fieldHeight + SMALL;
  final int third=(fieldWidth - SMALL * 2) / 3;
  ignoreCaseBox.setBounds(EDGE + labelDimension.width + SMALL,ypos,third,fieldHeight);
  allTabsBox.setBounds(EDGE + labelDimension.width + SMALL+ third+ SMALL,ypos,third,fieldHeight);
  wrapAroundBox.setBounds(EDGE + labelDimension.width + SMALL+ third * 2 + SMALL * 2,ypos,third,fieldHeight);
  ypos+=fieldHeight + SMALL;
  buttons.setBounds(EDGE - BUTTON_GAP,ypos,buttonsDimension.width,buttonsDimension.height);
  ypos+=buttonsDimension.height + EDGE;
  int wide=visibleButtonWidth + EDGE * 2;
  int high=ypos;
  pack();
  Insets insets=getInsets();
  setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);
  setLocationRelativeTo(null);
  replaceButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      replace();
    }
  }
);
  replaceAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      replaceAll();
    }
  }
);
  replaceAndFindButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      replaceAndFindNext();
    }
  }
);
  findButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      findNext();
    }
  }
);
  previousButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      findPrevious();
    }
  }
);
  getRootPane().setDefaultButton(findButton);
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      handleClose();
    }
  }
);
  Toolkit.registerWindowCloseKeys(getRootPane(),new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      handleClose();
    }
  }
);
  Toolkit.setIcon(this);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      findField.requestFocusInWindow();
      findField.selectAll();
    }
  }
);
}
