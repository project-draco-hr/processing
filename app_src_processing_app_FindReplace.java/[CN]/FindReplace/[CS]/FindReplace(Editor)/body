{
  super("Find");
  setResizable(false);
  this.editor=editor;
  Container pain=getContentPane();
  pain.setLayout(null);
  JLabel findLabel=new JLabel("Find:");
  JLabel replaceLabel=new JLabel("Replace with:");
  Dimension labelDimension=replaceLabel.getPreferredSize();
  pain.add(findLabel);
  pain.add(replaceLabel);
  pain.add(findField=new JTextField());
  pain.add(replaceField=new JTextField());
  int fieldHeight=findField.getPreferredSize().height;
  if (findString != null)   findField.setText(findString);
  if (replaceString != null)   replaceField.setText(replaceString);
  ignoreCaseBox=new JCheckBox("Ignore Case");
  ignoreCaseBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ignoreCase=ignoreCaseBox.isSelected();
    }
  }
);
  ignoreCaseBox.setSelected(ignoreCase);
  pain.add(ignoreCaseBox);
  wrapAroundBox=new JCheckBox("Wrap Around");
  wrapAroundBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      wrapAround=wrapAroundBox.isSelected();
    }
  }
);
  wrapAroundBox.setSelected(wrapAround);
  pain.add(wrapAroundBox);
  JPanel buttons=new JPanel();
  buttons.setLayout(new FlowLayout(FlowLayout.CENTER,BUTTON_GAP,0));
  if (Base.isMacOS()) {
    buttons.add(replaceAllButton=new JButton("Replace All"));
    buttons.add(replaceButton=new JButton("Replace"));
    buttons.add(replaceFindButton=new JButton("Replace & Find"));
    buttons.add(previousButton=new JButton("Previous"));
    buttons.add(findButton=new JButton("Find"));
  }
 else {
    buttons.add(findButton=new JButton("Find"));
    buttons.add(previousButton=new JButton("Previous"));
    buttons.add(replaceFindButton=new JButton("Replace & Find"));
    buttons.add(replaceButton=new JButton("Replace"));
    buttons.add(replaceAllButton=new JButton("Replace All"));
  }
  pain.add(buttons);
  if (Base.isMacOS()) {
    buttons.setBorder(null);
  }
  Dimension buttonsDimension=buttons.getPreferredSize();
  int visibleButtonWidth=buttonsDimension.width - 2 * BUTTON_GAP;
  int fieldWidth=visibleButtonWidth - (labelDimension.width + SMALL);
  int yoff=(1 + fieldHeight - labelDimension.height) / 2;
  int ypos=EDGE;
  int labelWidth=findLabel.getPreferredSize().width;
  findLabel.setBounds(EDGE + (labelDimension.width - labelWidth),ypos + yoff,labelWidth,labelDimension.height);
  findField.setBounds(EDGE + labelDimension.width + SMALL,ypos,fieldWidth,fieldHeight);
  ypos+=fieldHeight + SMALL;
  labelWidth=replaceLabel.getPreferredSize().width;
  replaceLabel.setBounds(EDGE + (labelDimension.width - labelWidth),ypos + yoff,labelWidth,labelDimension.height);
  replaceField.setBounds(EDGE + labelDimension.width + SMALL,ypos,fieldWidth,fieldHeight);
  ypos+=fieldHeight + SMALL;
  ignoreCaseBox.setBounds(EDGE + labelDimension.width + SMALL,ypos,(fieldWidth - SMALL) / 2,fieldHeight);
  wrapAroundBox.setBounds(EDGE + labelDimension.width + SMALL+ (fieldWidth - SMALL) / 2 + SMALL,ypos,(fieldWidth - SMALL) / 2,fieldHeight);
  ypos+=fieldHeight + SMALL;
  buttons.setBounds(EDGE - BUTTON_GAP,ypos,buttonsDimension.width,buttonsDimension.height);
  ypos+=buttonsDimension.height + EDGE;
  int wide=visibleButtonWidth + EDGE * 2;
  int high=ypos;
  pack();
  Insets insets=getInsets();
  setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);
  setLocationRelativeTo(null);
  replaceButton.addActionListener(this);
  replaceAllButton.addActionListener(this);
  replaceFindButton.addActionListener(this);
  findButton.addActionListener(this);
  previousButton.addActionListener(this);
  getRootPane().setDefaultButton(findButton);
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      handleClose();
    }
  }
);
  Base.registerWindowCloseKeys(getRootPane(),new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      handleClose();
    }
  }
);
  Base.setIcon(this);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      findField.requestFocusInWindow();
      findField.selectAll();
    }
  }
);
}
