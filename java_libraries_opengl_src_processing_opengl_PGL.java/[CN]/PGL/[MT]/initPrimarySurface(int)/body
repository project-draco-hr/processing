{
  if (profile == null) {
    profile=GLProfile.getDefault();
  }
 else {
    if (toolkit == AWT) {
      canvasAWT.removeGLEventListener(listener);
      pg.parent.removeListeners(canvasAWT);
      pg.parent.remove(canvasAWT);
    }
 else     if (toolkit == NEWT) {
      animator.stop();
      animator.remove(window);
      window.removeGLEventListener(listener);
      pg.parent.removeListeners(canvasNEWT);
      pg.parent.remove(canvasNEWT);
    }
    setFramerate=false;
  }
  capabilities=new GLCapabilities(profile);
  if (1 < antialias) {
    capabilities.setSampleBuffers(true);
    capabilities.setNumSamples(antialias);
  }
 else {
    capabilities.setSampleBuffers(false);
  }
  if (toolkit == AWT) {
    canvasAWT=new GLCanvas(capabilities);
    canvasAWT.setBounds(0,0,pg.width,pg.height);
    pg.parent.setLayout(new BorderLayout());
    pg.parent.add(canvasAWT,BorderLayout.CENTER);
    pg.parent.removeListeners();
    pg.parent.addListeners(canvasAWT);
    listener=new PGLListener();
    canvasAWT.addGLEventListener(listener);
    canvas=canvasAWT;
  }
 else   if (toolkit == NEWT) {
    window=GLWindow.create(capabilities);
    canvasNEWT=new NewtCanvasAWT(window);
    pg.parent.setLayout(new BorderLayout());
    pg.parent.add(canvasNEWT,BorderLayout.CENTER);
    pg.parent.removeListeners();
    pg.parent.addListeners(canvasNEWT);
    listener=new PGLListener();
    window.addGLEventListener(listener);
    animator=new NEWTAnimator(window);
    animator.start();
    canvas=canvasNEWT;
  }
  initialized=true;
}
