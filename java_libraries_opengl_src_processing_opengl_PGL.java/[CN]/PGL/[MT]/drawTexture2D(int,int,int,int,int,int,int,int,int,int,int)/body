{
  if (!loadedTex2DShader || tex2DShaderContext.hashCode() != context.hashCode()) {
    tex2DVertShader=createShader(GL_VERTEX_SHADER,texVertShaderSource);
    tex2DFragShader=createShader(GL_FRAGMENT_SHADER,tex2DFragShaderSource);
    if (0 < tex2DVertShader && 0 < tex2DFragShader) {
      tex2DShaderProgram=createProgram(tex2DVertShader,tex2DFragShader);
    }
    if (0 < tex2DShaderProgram) {
      tex2DVertLoc=glGetAttribLocation(tex2DShaderProgram,"inVertex");
      tex2DTCoordLoc=glGetAttribLocation(tex2DShaderProgram,"inTexcoord");
    }
    loadedTex2DShader=true;
    tex2DShaderContext=context;
  }
  if (texData == null) {
    texData=allocateDirectFloatBuffer(texCoords.length);
  }
  if (0 < tex2DShaderProgram) {
    boolean[] depthTest=new boolean[1];
    glGetBooleanv(GL_DEPTH_TEST,depthTest,0);
    glDisable(GL_DEPTH_TEST);
    boolean[] depthMask=new boolean[1];
    glGetBooleanv(GL_DEPTH_WRITEMASK,depthMask,0);
    glDepthMask(false);
    glUseProgram(tex2DShaderProgram);
    glEnableVertexAttribArray(tex2DVertLoc);
    glEnableVertexAttribArray(tex2DTCoordLoc);
    texCoords[0]=2 * (float)scrX0 / pg.width - 1;
    texCoords[1]=2 * (float)scrY0 / pg.height - 1;
    texCoords[2]=(float)texX0 / width;
    texCoords[3]=(float)texY0 / height;
    texCoords[4]=2 * (float)scrX1 / pg.width - 1;
    texCoords[5]=2 * (float)scrY0 / pg.height - 1;
    texCoords[6]=(float)texX1 / width;
    texCoords[7]=(float)texY0 / height;
    texCoords[8]=2 * (float)scrX0 / pg.width - 1;
    texCoords[9]=2 * (float)scrY1 / pg.height - 1;
    texCoords[10]=(float)texX0 / width;
    texCoords[11]=(float)texY1 / height;
    texCoords[12]=2 * (float)scrX1 / pg.width - 1;
    texCoords[13]=2 * (float)scrY1 / pg.height - 1;
    texCoords[14]=(float)texX1 / width;
    texCoords[15]=(float)texY1 / height;
    texData.rewind();
    texData.put(texCoords);
    enableTexturing(GL_TEXTURE_2D);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D,id);
    glBindBuffer(GL_ARRAY_BUFFER,0);
    texData.position(0);
    glVertexAttribPointer(tex2DVertLoc,2,GL_FLOAT,false,4 * SIZEOF_FLOAT,texData);
    texData.position(2);
    glVertexAttribPointer(tex2DTCoordLoc,2,GL_FLOAT,false,4 * SIZEOF_FLOAT,texData);
    glDrawArrays(GL_TRIANGLE_STRIP,0,4);
    glBindTexture(GL_TEXTURE_2D,0);
    disableTexturing(GL_TEXTURE_2D);
    glDisableVertexAttribArray(tex2DVertLoc);
    glDisableVertexAttribArray(tex2DTCoordLoc);
    glUseProgram(0);
    if (depthTest[0]) {
      glEnable(GL_DEPTH_TEST);
    }
 else {
      glDisable(GL_DEPTH_TEST);
    }
    glDepthMask(depthMask[0]);
  }
}
