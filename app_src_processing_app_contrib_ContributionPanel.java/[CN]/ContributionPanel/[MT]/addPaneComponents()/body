{
  setLayout(new BorderLayout());
  descriptionPane=new JTextPane();
  descriptionPane.setInheritsPopupMenu(true);
  descriptionPane.setEditable(false);
  Insets margin=descriptionPane.getMargin();
  margin.bottom=0;
  descriptionPane.setMargin(margin);
  descriptionPane.setContentType("text/html");
  setTextStyle(descriptionPane);
  descriptionPane.setOpaque(false);
  if (UIManager.getLookAndFeel().getID().equals("Nimbus")) {
    descriptionPane.setBackground(new Color(0,0,0,0));
  }
  descriptionPane.setBorder(new EmptyBorder(4,7,7,7));
  descriptionPane.setHighlighter(null);
  add(descriptionPane,BorderLayout.CENTER);
  JPanel updateBox=new JPanel();
  updateBox.setLayout(new BorderLayout());
  notificationLabel=new JLabel();
  notificationLabel.setInheritsPopupMenu(true);
  notificationLabel.setVisible(false);
  notificationLabel.setOpaque(false);
  notificationLabel.setFont(new Font("Verdana",Font.ITALIC,10));
  updateButton=new JButton("Update");
  updateButton.setInheritsPopupMenu(true);
  Dimension updateButtonDimensions=updateButton.getPreferredSize();
  updateButtonDimensions.width=BUTTON_WIDTH;
  updateButton.setMinimumSize(updateButtonDimensions);
  updateButton.setPreferredSize(updateButtonDimensions);
  updateButton.setOpaque(false);
  updateButton.setVisible(false);
  updateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      listPanel.contributionTab.status.clear();
      isUpdateInProgress=true;
      if (contrib.getType().requiresRestart()) {
        installRemoveButton.setEnabled(false);
        installProgressBar.setVisible(true);
        installProgressBar.setIndeterminate(true);
        ContribProgressBar progress=new ContribProgressBar(installProgressBar){
          public void finishedAction(){
            resetInstallProgressBarState();
            updateButton.setEnabled(false);
            AvailableContribution ad=contribListing.getAvailableContribution(contrib);
            String url=ad.link;
            installContribution(ad,url);
          }
          @Override public void cancel(){
            super.cancel();
            resetInstallProgressBarState();
            listPanel.contributionTab.status.setMessage("");
            isUpdateInProgress=false;
            installRemoveButton.setEnabled(true);
            if (contrib.isDeletionFlagged()) {
              ((LocalContribution)contrib).setUpdateFlag(true);
              ((LocalContribution)contrib).setDeletionFlag(false);
              contribListing.replaceContribution(contrib,contrib);
            }
            boolean isModeActive=false;
            if (contrib.getType() == ContributionType.MODE) {
              ModeContribution m=(ModeContribution)contrib;
              Base base=listPanel.contributionTab.editor.getBase();
              for (              Editor e : base.getEditors()) {
                if (e.getMode().equals(m.getMode())) {
                  isModeActive=true;
                  break;
                }
              }
            }
            if (isModeActive) {
              updateButton.setEnabled(true);
            }
 else {
              listPanel.contributionTab.restartButton.setVisible(true);
            }
          }
        }
;
        ((LocalContribution)contrib).removeContribution(listPanel.contributionTab.editor,progress,listPanel.contributionTab.status);
      }
 else {
        updateButton.setEnabled(false);
        installRemoveButton.setEnabled(false);
        AvailableContribution ad=contribListing.getAvailableContribution(contrib);
        String url=ad.link;
        installContribution(ad,url);
      }
    }
  }
);
  updateBox.add(updateButton,BorderLayout.EAST);
  updateBox.add(notificationLabel,BorderLayout.WEST);
  updateBox.setBorder(new EmptyBorder(4,7,7,7));
  updateBox.setOpaque(false);
  add(updateBox,BorderLayout.SOUTH);
  JPanel rightPane=new JPanel();
  rightPane.setInheritsPopupMenu(true);
  rightPane.setOpaque(false);
  rightPane.setLayout(new BoxLayout(rightPane,BoxLayout.Y_AXIS));
  rightPane.setMinimumSize(new Dimension(ContributionPanel.BUTTON_WIDTH,1));
  add(rightPane,BorderLayout.EAST);
  barButtonCardPane.setLayout(new CardLayout());
  barButtonCardPane.setInheritsPopupMenu(true);
  barButtonCardPane.setOpaque(false);
  barButtonCardPane.setMinimumSize(new Dimension(ContributionPanel.BUTTON_WIDTH,1));
  installProgressBar=new JProgressBar();
  installProgressBar.setInheritsPopupMenu(true);
  installProgressBar.setStringPainted(true);
  resetInstallProgressBarState();
  Dimension d=installProgressBar.getPreferredSize();
  d.width=ContributionPanel.BUTTON_WIDTH;
  installProgressBar.setPreferredSize(d);
  installProgressBar.setMaximumSize(d);
  installProgressBar.setMinimumSize(d);
  installProgressBar.setOpaque(false);
  installProgressBar.setAlignmentX(CENTER_ALIGNMENT);
  installRemoveButton=new JButton(" ");
  installRemoveButton.setInheritsPopupMenu(true);
  Dimension installButtonDimensions=installRemoveButton.getPreferredSize();
  installButtonDimensions.width=ContributionPanel.BUTTON_WIDTH;
  installRemoveButton.setPreferredSize(installButtonDimensions);
  installRemoveButton.setMaximumSize(installButtonDimensions);
  installRemoveButton.setMinimumSize(installButtonDimensions);
  installRemoveButton.setOpaque(false);
  installRemoveButton.setAlignmentX(CENTER_ALIGNMENT);
  JPanel barPane=new JPanel();
  barPane.setOpaque(false);
  barPane.add(installProgressBar);
  JPanel buttonPane=new JPanel();
  buttonPane.setOpaque(false);
  buttonPane.add(installRemoveButton);
  barButtonCardPane.add(buttonPane,BUTTON_CONSTRAINT);
  barButtonCardPane.add(barPane,PROGRESS_BAR_CONSTRAINT);
  ((CardLayout)barButtonCardPane.getLayout()).show(barButtonCardPane,BUTTON_CONSTRAINT);
  rightPane.add(barButtonCardPane);
  d=installProgressBar.getPreferredSize();
  Dimension d2=installRemoveButton.getPreferredSize();
  d.width=ContributionPanel.BUTTON_WIDTH;
  d.height=d2.height;
  rightPane.setMinimumSize(d);
  rightPane.setPreferredSize(d);
}
