{
  listPanel=contributionListPanel;
  barButtonCardPane=new JPanel();
  enableHyperlinks=false;
  alreadySelected=false;
  conditionalHyperlinkOpener=new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        if (enableHyperlinks) {
          if (e.getURL() != null) {
            Base.openURL(e.getURL().toString());
          }
        }
      }
    }
  }
;
  installActionListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      listPanel.contributionTab.status.clear();
      isInstallInProgress=true;
      ((CardLayout)barButtonCardPane.getLayout()).show(barButtonCardPane,PROGRESS_BAR_CONSTRAINT);
      if (contrib instanceof AvailableContribution) {
        installContribution((AvailableContribution)contrib);
        contribListing.replaceContribution(contrib,contrib);
      }
    }
  }
;
  undoActionListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      listPanel.contributionTab.status.clear();
      if (contrib instanceof LocalContribution) {
        LocalContribution installed=(LocalContribution)contrib;
        installed.setDeletionFlag(false);
        contribListing.replaceContribution(contrib,contrib);
        Iterator<Contribution> contribsListIter=contribListing.allContributions.iterator();
        boolean toBeRestarted=false;
        while (contribsListIter.hasNext()) {
          Contribution contribElement=contribsListIter.next();
          if (contrib.getType().equals(contribElement.getType())) {
            if (contribElement.isDeletionFlagged() || contribElement.isUpdateFlagged()) {
              toBeRestarted=!toBeRestarted;
              break;
            }
          }
        }
        listPanel.contributionTab.restartButton.setVisible(toBeRestarted);
      }
    }
  }
;
  removeActionListener=new ActionListener(){
    public void actionPerformed(    ActionEvent arg){
      listPanel.contributionTab.status.clear();
      if (contrib.isInstalled() && contrib instanceof LocalContribution) {
        isRemoveInProgress=true;
        ((CardLayout)barButtonCardPane.getLayout()).show(barButtonCardPane,PROGRESS_BAR_CONSTRAINT);
        updateButton.setEnabled(false);
        installRemoveButton.setEnabled(false);
        installProgressBar.setVisible(true);
        installProgressBar.setIndeterminate(true);
        ContribProgressBar monitor=new ContribProgressBar(installProgressBar){
          public void finishedAction(){
            resetInstallProgressBarState();
            isRemoveInProgress=false;
            installRemoveButton.setEnabled(true);
            reorganizePaneComponents();
            setSelected(true);
          }
          public void cancel(){
            super.cancel();
            resetInstallProgressBarState();
            isRemoveInProgress=false;
            installRemoveButton.setEnabled(true);
            reorganizePaneComponents();
            setSelected(true);
            ContributionTab contributionTab=listPanel.contributionTab;
            boolean isModeActive=false;
            if (contrib.getType() == ContributionType.MODE) {
              ModeContribution m=(ModeContribution)contrib;
              for (              Editor e : contributionTab.editor.getBase().getEditors()) {
                if (e.getMode().equals(m.getMode())) {
                  isModeActive=true;
                  break;
                }
              }
            }
            if (isModeActive) {
              updateButton.setEnabled(true);
            }
 else {
              contributionTab.restartButton.setVisible(true);
            }
          }
        }
;
        ContributionTab contributionTab=listPanel.contributionTab;
        LocalContribution localContrib=(LocalContribution)contrib;
        localContrib.removeContribution(contributionTab.editor,monitor,contributionTab.status);
      }
    }
  }
;
  contextMenu=new JPopupMenu();
  openFolder=new JMenuItem("Open Folder");
  openFolder.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (contrib instanceof LocalContribution) {
        File folder=((LocalContribution)contrib).getFolder();
        Base.openFolder(folder);
      }
    }
  }
);
  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  addPaneComponents();
  setBackground(listPanel.getBackground());
  setOpaque(true);
  setSelected(false);
  setExpandListener(this,new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (contrib.isCompatible(Base.getRevision())) {
        listPanel.setSelectedPanel(ContributionPanel.this);
      }
 else {
        final String msg=contrib.getName() + " is not compatible with this version of Processing";
        listPanel.contributionTab.status.setErrorMessage(msg);
      }
    }
  }
);
}
