{
  String searchArea=scrubComments(code);
  String[] setupMatch=PApplet.match(searchArea,VOID_SETUP_REGEX);
  if (setupMatch != null) {
    String found=setupMatch[0];
    int start=searchArea.indexOf(found) + found.length();
    int openBrace=searchArea.indexOf("{",start);
    char[] c=searchArea.toCharArray();
    int depth=0;
    int closeBrace=-1;
    StringBuilder sb=new StringBuilder();
    for (int i=openBrace; i < c.length; i++) {
      if (c[i] == '{') {
        depth++;
      }
 else       if (c[i] == '}') {
        depth--;
        if (depth == 0) {
          closeBrace=++i;
          break;
        }
      }
 else {
        sb.append(c[i]);
      }
    }
    if (closeBrace == -1) {
      throw new SketchException("Found a { that's missing a matching }",false);
    }
    searchArea=sb.toString();
  }
  StringList extraStatements=new StringList();
  String[] smoothContents=matchMethod("smooth",searchArea);
  if (smoothContents != null) {
    extraStatements.append(smoothContents[0]);
  }
  String[] noContents=matchMethod("noSmooth",searchArea);
  if (noContents != null) {
    if (extraStatements.size() != 0) {
      throw new SketchException("smooth() and noSmooth() cannot be used in the same sketch");
    }
 else {
      extraStatements.append(noContents[0]);
    }
  }
  String[] pixelDensityContents=matchMethod("pixelDensity",searchArea);
  if (pixelDensityContents != null) {
    extraStatements.append(pixelDensityContents[0]);
  }
 else {
    pixelDensityContents=matchDensityMess(searchArea);
    if (pixelDensityContents != null) {
      extraStatements.append(pixelDensityContents[0]);
    }
  }
  String[] sizeContents=matchMethod("size",searchArea);
  String[] fullContents=matchMethod("fullScreen",searchArea);
  if (sizeContents != null && fullContents != null) {
    throw new SketchException("size() and fullScreen() cannot be used in the same sketch",false);
  }
  if (sizeContents != null) {
    StringList args=breakCommas(sizeContents[1]);
    SurfaceInfo info=new SurfaceInfo();
    info.statement=sizeContents[0];
    info.width=args.get(0).trim();
    info.height=args.get(1).trim();
    info.renderer=(args.size() >= 3) ? args.get(2).trim() : null;
    info.path=(args.size() >= 4) ? args.get(3).trim() : null;
    if (info.hasOldSyntax()) {
      throw new SketchException("Please update your code to continue.",false);
    }
    if (info.hasBadSize() && fussy) {
      final String message="The size of this sketch could not be determined from your code.\n" + "Use only numbers (not variables) for the size() command.\n" + "Read the size() reference for more details.";
      Base.showWarning("Could not find sketch size",message,null);
      throw new SketchException("Please fix the size() line to continue.",false);
    }
    if (extraStatements.size() != 0) {
      info.statement+=extraStatements.join(" ");
    }
    info.checkEmpty();
    return info;
  }
  if (fullContents != null) {
    SurfaceInfo info=new SurfaceInfo();
    info.statement=fullContents[0];
    StringList args=breakCommas(fullContents[1]);
    if (args.size() > 0) {
      String args0=args.get(0).trim();
      if (args.size() == 1) {
        if (args0.equals("SPAN") || PApplet.parseInt(args0,-1) != -1) {
          info.display=args0;
        }
 else {
          info.renderer=args0;
        }
      }
 else       if (args.size() == 2) {
        info.renderer=args0;
        info.display=args.get(1).trim();
      }
 else {
        throw new SketchException("That's too many parameters for fullScreen()");
      }
    }
    info.width="displayWidth";
    info.height="displayHeight";
    if (extraStatements.size() != 0) {
      info.statement+=extraStatements.join(" ");
    }
    info.checkEmpty();
    return info;
  }
  if (extraStatements.size() != 0) {
    SurfaceInfo info=new SurfaceInfo();
    info.statement=extraStatements.join(" ");
    return info;
  }
  return new SurfaceInfo();
}
