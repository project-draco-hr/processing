{
  int p, r, i, j;
  int piv;
  Stack[] stack=new Stack[50];
  for (int k=0; k < stack.length; k++) {
    stack[k]=new Stack();
  }
  int top=0;
  int seed=2016473283;
  order=new int[size + 1];
  p=0;
  r=size - 1;
  for (piv=0, i=p; i <= r; ++piv, ++i) {
    order[i]=piv;
  }
  stack[top].p=p;
  stack[top].r=r;
  ++top;
  while (--top >= 0) {
    p=stack[top].p;
    r=stack[top].r;
    while (r > p + 10) {
      seed=Math.abs(seed * 1539415821 + 1);
      i=p + seed % (r - p + 1);
      piv=order[i];
      order[i]=order[p];
      order[p]=piv;
      i=p - 1;
      j=r + 1;
      do {
        do {
          ++i;
        }
 while (GT(leq,keys[order[i]],keys[piv]));
        do {
          --j;
        }
 while (LT(leq,keys[order[j]],keys[piv]));
        Swap(order,i,j);
      }
 while (i < j);
      Swap(order,i,j);
      if (i - p < r - j) {
        stack[top].p=j + 1;
        stack[top].r=r;
        ++top;
        r=i - 1;
      }
 else {
        stack[top].p=p;
        stack[top].r=i - 1;
        ++top;
        p=j + 1;
      }
    }
    for (i=p + 1; i <= r; ++i) {
      piv=order[i];
      for (j=i; j > p && LT(leq,keys[order[j - 1]],keys[piv]); --j) {
        order[j]=order[j - 1];
      }
      order[j]=piv;
    }
  }
  max=size;
  initialized=true;
  heap.pqInit();
  return true;
}
