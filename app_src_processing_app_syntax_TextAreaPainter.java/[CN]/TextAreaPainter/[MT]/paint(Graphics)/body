{
  Graphics2D g2=(Graphics2D)gfx;
  g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,antialias ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
  g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
  tabSize=fm.charWidth(' ') * ((Integer)textArea.getDocument().getProperty(PlainDocument.tabSizeAttribute)).intValue();
  Rectangle clipRect=gfx.getClipBounds();
  gfx.setColor(getBackground());
  gfx.fillRect(clipRect.x,clipRect.y,clipRect.width,clipRect.height);
  int height=fm.getHeight();
  int firstLine=textArea.getFirstLine();
  int firstInvalid=firstLine + clipRect.y / height;
  int lastInvalid=firstLine + (clipRect.y + clipRect.height - 1) / height;
  try {
    TokenMarker tokenMarker=textArea.getDocument().getTokenMarker();
    int x=textArea.getHorizontalOffset();
    for (int line=firstInvalid; line <= lastInvalid; line++) {
      paintLine(gfx,line,x,tokenMarker);
    }
    if (tokenMarker != null && tokenMarker.isNextLineRequested()) {
      int h=clipRect.y + clipRect.height;
      repaint(0,h,getWidth(),getHeight() - h);
    }
  }
 catch (  Exception e) {
    System.err.println("Error repainting line" + " range {" + firstInvalid + ","+ lastInvalid+ "}:");
    e.printStackTrace();
  }
}
