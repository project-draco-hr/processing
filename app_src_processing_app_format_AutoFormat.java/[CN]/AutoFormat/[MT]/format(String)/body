{
  final String normalizedText=source.replaceAll("\r","");
  final String cleanText=normalizedText + (normalizedText.endsWith("\n") ? "" : "\n");
  result.setLength(0);
  indentValue=Preferences.getInteger("editor.tabs.size");
  lineNumber=0;
  q_flg=e_flg=a_flg=if_flg=false;
  s_flag=true;
  c_level=if_lev=level=paren=0;
  tabs=0;
  jdoc_flag=false;
  s_level=new int[10];
  sp_flg=new int[20][10];
  s_ind=new int[20][10];
  s_if_lev=new int[10];
  s_if_flg=new boolean[10];
  ind=new int[10];
  p_flg=new int[10];
  s_tabs=new int[20][10];
  pos=-1;
  chars=cleanText.toCharArray();
  lineNumber=1;
  EOF=false;
  while (!EOF) {
    c=next();
switch (c) {
default :
      buf.append(c);
    l_char=c;
  break;
case ',':
trimRight(buf);
buf.append(c);
buf.append(' ');
advanceToNonSpace();
break;
case ' ':
case '\t':
if (lookup("else")) {
gotelse();
if ((!s_flag) || buf.length() > 0) {
buf.append(c);
}
writeIndentedLine();
s_flag=false;
break;
}
if ((!s_flag) || buf.length() > 0) {
buf.append(c);
}
break;
case '\n':
lineNumber++;
if (EOF) {
break;
}
e_flg=lookup("else");
if (e_flg) {
gotelse();
}
if (lookup_com("//")) {
final char lastChar=buf.charAt(buf.length() - 1);
if (lastChar == '\n') {
buf.setLength(buf.length() - 1);
}
}
writeIndentedLine();
result.append("\n");
s_flag=true;
if (e_flg) {
p_flg[level]++;
tabs++;
}
 else if (prev() == l_char) {
a_flg=true;
}
break;
case '{':
if (lookup("else")) {
gotelse();
}
if (s_if_lev.length == c_level) {
s_if_lev=PApplet.expand(s_if_lev);
s_if_flg=PApplet.expand(s_if_flg);
}
s_if_lev[c_level]=if_lev;
s_if_flg[c_level]=if_flg;
if_lev=0;
if_flg=false;
c_level++;
if (s_flag && p_flg[level] != 0) {
p_flg[level]--;
tabs--;
}
trimRight(buf);
if (buf.length() > 0 || (result.length() > 0 && !Character.isWhitespace(result.charAt(result.length() - 1)))) buf.append(" ");
buf.append(c);
writeIndentedLine();
getnl();
writeIndentedLine();
result.append("\n");
tabs++;
s_flag=true;
if (p_flg[level] > 0) {
ind[level]=1;
level++;
s_level[level]=c_level;
}
break;
case '}':
c_level--;
if (c_level < 0) {
c_level=0;
buf.append(c);
writeIndentedLine();
}
 else {
if_lev=s_if_lev[c_level] - 1;
if (if_lev < 0) {
if_lev=0;
}
if_flg=s_if_flg[c_level];
trimRight(buf);
writeIndentedLine();
tabs--;
trimRight(result);
result.append("\n");
printIndentation();
result.append(c);
if (peek() == ';') {
result.append(next());
}
getnl();
writeIndentedLine();
result.append("\n");
s_flag=true;
if (c_level < s_level[level]) {
if (level > 0) {
level--;
}
}
if (ind[level] != 0) {
tabs-=p_flg[level];
p_flg[level]=0;
ind[level]=0;
}
}
break;
case '"':
case '\'':
buf.append(c);
cc=next();
while (!EOF && cc != c) {
buf.append(cc);
if (cc == '\\') {
buf.append(cc=next());
}
if (cc == '\n') {
lineNumber++;
writeIndentedLine();
s_flag=true;
}
cc=next();
}
buf.append(cc);
if (getnl()) {
l_char=cc;
chars[pos--]='\n';
}
break;
case ';':
buf.append(c);
writeIndentedLine();
if (p_flg[level] > 0 && ind[level] == 0) {
tabs-=p_flg[level];
p_flg[level]=0;
}
getnl();
writeIndentedLine();
result.append("\n");
s_flag=true;
if (if_lev > 0) {
if (if_flg) {
if_lev--;
if_flg=false;
}
 else {
if_lev=0;
}
}
break;
case '\\':
buf.append(c);
buf.append(next());
break;
case '?':
q_flg=true;
buf.append(c);
break;
case ':':
buf.append(c);
if (peek() == ':') {
writeIndentedLine();
result.append(next());
break;
}
if (q_flg) {
q_flg=false;
break;
}
if (!lookup("default") && !lookup("case")) {
s_flag=false;
writeIndentedLine();
}
 else {
tabs--;
writeIndentedLine();
tabs++;
}
if (peek() == ';') {
result.append(next());
}
getnl();
writeIndentedLine();
result.append("\n");
s_flag=true;
break;
case '/':
final char la=peek();
if (la == '/') {
buf.append(c).append(next());
handleSingleLineComment();
result.append("\n");
}
 else if (la == '*') {
if (buf.length() > 0) {
writeIndentedLine();
}
buf.append(c).append(next());
comment();
}
 else {
buf.append(c);
}
break;
case ')':
final boolean isCast=castFlags.isEmpty() ? false : castFlags.pop();
paren--;
if (paren < 0) {
paren=0;
}
buf.append(c);
writeIndentedLine();
if (getnl()) {
chars[pos--]='\n';
if (paren != 0) {
a_flg=true;
}
 else if (tabs > 0 && !isCast) {
p_flg[level]++;
tabs++;
ind[level]=0;
}
}
break;
case '(':
castFlags.push(Pattern.matches("^.*?(?:int|color|float)\\s*$",buf));
buf.append(c);
paren++;
if ((lookup("for"))) {
c=get_string();
while (c != ';' && c != ':') {
c=get_string();
}
ct=0;
int for_done=0;
while (for_done == 0) {
c=get_string();
while (c != ')') {
if (c == '(') {
ct++;
}
c=get_string();
}
if (ct != 0) {
ct--;
}
 else {
for_done=1;
}
}
paren--;
if (paren < 0) {
paren=0;
}
writeIndentedLine();
if (getnl()) {
chars[pos--]='\n';
p_flg[level]++;
tabs++;
ind[level]=0;
}
break;
}
if (lookup("if")) {
writeIndentedLine();
s_tabs[c_level][if_lev]=tabs;
sp_flg[c_level][if_lev]=p_flg[level];
s_ind[c_level][if_lev]=ind[level];
if_lev++;
if_flg=true;
}
}
}
final String formatted=result.toString();
return formatted.equals(cleanText) ? source : formatted;
}
