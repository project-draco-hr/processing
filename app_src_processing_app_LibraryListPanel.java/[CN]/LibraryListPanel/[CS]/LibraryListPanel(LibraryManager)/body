{
  super();
  this.libraryManager=libraryManager;
  preferredViewPositionListener=new PreferredViewPositionListener(){
    public void handlePreferredLocation(    Point p){
    }
  }
;
  libraries=libraryManager.getLibraryListing(null);
  setLayout(new GridBagLayout());
  setFocusable(true);
  setOpaque(true);
  if (Base.isLinux()) {
    setBackground(Color.white);
  }
 else {
    setBackground(UIManager.getColor("List.background"));
  }
  libPanelsByInfo=new HashMap<LibraryInfo,LibraryPanel>();
  int row=0;
  for (  LibraryInfo libInfo : libraries.getAllLibararies()) {
    GridBagConstraints c=new GridBagConstraints();
    c.fill=GridBagConstraints.HORIZONTAL;
    c.weightx=1;
    c.gridx=0;
    c.gridy=row++;
    LibraryPanel libPanel=new LibraryPanel(libInfo);
    libPanelsByInfo.put(libPanel.libInfo,libPanel);
    add(libPanel,c);
  }
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent mouseEvent){
      requestFocusInWindow();
    }
  }
);
  updateColors();
}
