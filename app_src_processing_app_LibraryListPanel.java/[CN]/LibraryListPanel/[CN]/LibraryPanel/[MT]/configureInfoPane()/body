{
  infoPanel=new JPanel();
  infoPanel.setLayout(new BoxLayout(infoPanel,BoxLayout.Y_AXIS));
  infoPanel.setLayout(new CardLayout());
  unclickedCard=new JPanel();
  clickedCard=new JPanel();
  infoPanel.setOpaque(false);
  unclickedCard.setOpaque(false);
  clickedCard.setOpaque(false);
  infoPanel.setFocusable(true);
  unclickedCard.setFocusable(true);
  clickedCard.setFocusable(true);
  description=new JTextArea(libInfo.description);
  installOrRemove=new JButton();
  if (libInfo.isInstalled) {
  }
 else {
    installOrRemove.setText("Install");
    ActionListener installLibAction=new ActionListener(){
      public void actionPerformed(      ActionEvent arg){
        try {
          URL url=new URL(libInfo.link);
          libraryManager.installLibraryFromUrl(url,null);
        }
 catch (        MalformedURLException e) {
          Base.showWarning("Install Failed","The link fetched from Processing.org is invalid.\n" + "You can still intall this library manually by visiting\n" + "the library's website.",e);
        }
      }
    }
;
    installOrRemove.addActionListener(installLibAction);
  }
  clickedCard.setLayout(new BoxLayout(clickedCard,BoxLayout.X_AXIS));
  description.setHighlighter(null);
  description.setOpaque(false);
  description.setEditable(false);
  description.setLineWrap(true);
  description.setWrapStyleWord(true);
  Font font=this.description.getFont();
  font=font.deriveFont(font.getSize() * 0.9f);
  description.setFont(font);
  clickedCard.add(description);
  clickedCard.add(Box.createHorizontalGlue());
  clickedCard.add(installOrRemove);
  installOrRemove.setAlignmentY(Component.BOTTOM_ALIGNMENT);
  description.setAlignmentY(Component.BOTTOM_ALIGNMENT);
  Dimension installButtonDimensions=installOrRemove.getPreferredSize();
  installButtonDimensions.width=BUTTON_WIDTH;
  installOrRemove.setPreferredSize(installButtonDimensions);
  infoPanel.add(unclickedCard,unclickedCardId);
  infoPanel.add(clickedCard,clickedCardId);
  add(infoPanel);
}
