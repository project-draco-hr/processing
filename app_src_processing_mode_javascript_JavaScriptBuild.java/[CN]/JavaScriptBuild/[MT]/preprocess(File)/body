{
  StringBuffer bigCode=new StringBuffer();
  for (  SketchCode sc : sketch.getCode()) {
    if (sc.isExtension("pde")) {
      bigCode.append(sc.getProgram());
      bigCode.append("\n");
    }
  }
  if (!bin.exists()) {
    bin.mkdirs();
  }
  File bigFile=new File(bin,sketch.getName() + ".pde");
  String bigCodeContents=bigCode.toString();
  Base.saveFile(bigCodeContents,bigFile);
  PdePreprocessor preprocessor=new PdePreprocessor(sketch.getName());
  try {
    File outputFolder=sketch.makeTempFolder();
    final File java=new File(outputFolder,sketch.getName() + ".java");
    final PrintWriter stream=new PrintWriter(new FileWriter(java));
    try {
      preprocessor.write(stream,bigCodeContents,null);
    }
  finally {
      stream.close();
    }
  }
 catch (  FileNotFoundException fnfe) {
    fnfe.printStackTrace();
    String msg="Build folder disappeared or could not be written";
    throw new SketchException(msg);
  }
catch (  antlr.RecognitionException re) {
    int errorLine=re.getLine() - 1;
    int errorFile=findErrorFile(errorLine);
    errorLine-=sketch.getCode(errorFile).getPreprocOffset();
    String msg=re.getMessage();
    if (msg.equals("expecting RCURLY, found 'null'")) {
      throw new SketchException("Found one too many { characters " + "without a } to match it.",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("expecting RBRACK") != -1) {
      System.err.println(msg);
      throw new SketchException("Syntax error, " + "maybe a missing ] character?",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("expecting SEMI") != -1) {
      System.err.println(msg);
      throw new SketchException("Syntax error, " + "maybe a missing semicolon?",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("expecting RPAREN") != -1) {
      System.err.println(msg);
      throw new SketchException("Syntax error, " + "maybe a missing right parenthesis?",errorFile,errorLine,re.getColumn());
    }
    if (msg.indexOf("preproc.web_colors") != -1) {
      throw new SketchException("A web color (such as #ffcc00) " + "must be six digits.",errorFile,errorLine,re.getColumn(),false);
    }
    throw new SketchException(msg,errorFile,errorLine,re.getColumn());
  }
catch (  antlr.TokenStreamRecognitionException tsre) {
    String mess="^line (\\d+):(\\d+):\\s";
    String[] matches=PApplet.match(tsre.toString(),mess);
    if (matches != null) {
      int errorLine=Integer.parseInt(matches[1]) - 1;
      int errorColumn=Integer.parseInt(matches[2]);
      int errorFile=0;
      for (int i=1; i < sketch.getCodeCount(); i++) {
        SketchCode sc=sketch.getCode(i);
        if (sc.isExtension("pde") && (sc.getPreprocOffset() < errorLine)) {
          errorFile=i;
        }
      }
      errorLine-=sketch.getCode(errorFile).getPreprocOffset();
      throw new SketchException(tsre.getMessage(),errorFile,errorLine,errorColumn);
    }
 else {
      String msg=tsre.toString();
      throw new SketchException(msg,0,-1,-1);
    }
  }
catch (  SketchException pe) {
    throw pe;
  }
catch (  Exception ex) {
    System.err.println("Uncaught exception type:" + ex.getClass());
    ex.printStackTrace();
    throw new SketchException(ex.toString());
  }
}
