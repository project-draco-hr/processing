{
  if (!loadedTexShader || texShaderContext.hashCode() != context.hashCode()) {
    texVertShader=createShader(VERTEX_SHADER,texVertShaderSource);
    texFragShader=createShader(FRAGMENT_SHADER,texFragShaderSource);
    if (0 < texVertShader && 0 < texFragShader) {
      texShaderProgram=createProgram(texVertShader,texFragShader);
    }
    if (0 < texShaderProgram) {
      texVertLoc=getAttribLocation(texShaderProgram,"inVertex");
      texTCoordLoc=getAttribLocation(texShaderProgram,"inTexcoord");
    }
    loadedTexShader=true;
    texShaderContext=context;
  }
  if (texData == null) {
    texData=allocateDirectFloatBuffer(texCoords.length);
  }
  if (0 < texShaderProgram) {
    boolean depthTest=getDepthTest();
    disable(DEPTH_TEST);
    boolean depthMask=getDepthWriteMask();
    depthMask(false);
    useProgram(texShaderProgram);
    enableVertexAttribArray(texVertLoc);
    enableVertexAttribArray(texTCoordLoc);
    texCoords[0]=2 * (float)scrX0 / pg.width - 1;
    texCoords[1]=2 * (float)scrY0 / pg.height - 1;
    texCoords[2]=(float)texX0 / width;
    texCoords[3]=(float)texY0 / height;
    texCoords[4]=2 * (float)scrX1 / pg.width - 1;
    texCoords[5]=2 * (float)scrY0 / pg.height - 1;
    texCoords[6]=(float)texX1 / width;
    texCoords[7]=(float)texY0 / height;
    texCoords[8]=2 * (float)scrX0 / pg.width - 1;
    texCoords[9]=2 * (float)scrY1 / pg.height - 1;
    texCoords[10]=(float)texX0 / width;
    texCoords[11]=(float)texY1 / height;
    texCoords[12]=2 * (float)scrX1 / pg.width - 1;
    texCoords[13]=2 * (float)scrY1 / pg.height - 1;
    texCoords[14]=(float)texX1 / width;
    texCoords[15]=(float)texY1 / height;
    texData.rewind();
    texData.put(texCoords);
    activeTexture(TEXTURE0);
    boolean enabledTex=false;
    if (!texturingIsEnabled(TEXTURE_2D)) {
      enableTexturing(TEXTURE_2D);
      enabledTex=true;
    }
    bindTexture(target,id);
    texData.position(0);
    vertexAttribPointer(texVertLoc,2,FLOAT,false,4 * SIZEOF_FLOAT,texData);
    texData.position(2);
    vertexAttribPointer(texTCoordLoc,2,FLOAT,false,4 * SIZEOF_FLOAT,texData);
    drawArrays(TRIANGLE_STRIP,0,4);
    bindTexture(target,0);
    if (enabledTex) {
      disableTexturing(TEXTURE_2D);
    }
    disableVertexAttribArray(texVertLoc);
    disableVertexAttribArray(texTCoordLoc);
    useProgram(0);
    if (depthTest) {
      enable(DEPTH_TEST);
    }
 else {
      disable(DEPTH_TEST);
    }
    depthMask(depthMask);
  }
}
