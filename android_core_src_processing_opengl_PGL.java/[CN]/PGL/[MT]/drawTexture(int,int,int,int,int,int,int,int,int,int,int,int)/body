{
  if (!loadedTexShader) {
    texVertShader=createShader(GL_VERTEX_SHADER,texVertShaderSource);
    texFragShader=createShader(GL_FRAGMENT_SHADER,texFragShaderSource);
    if (0 < texVertShader && 0 < texFragShader) {
      texShaderProgram=createProgram(texVertShader,texFragShader);
    }
    if (0 < texShaderProgram) {
      texVertLoc=glGetAttribLocation(texShaderProgram,"inVertex");
      texTCoordLoc=glGetAttribLocation(texShaderProgram,"inTexcoord");
    }
    texData=ByteBuffer.allocateDirect(texCoords.length * SIZEOF_FLOAT).order(ByteOrder.nativeOrder()).asFloatBuffer();
    loadedTexShader=true;
  }
  if (0 < texShaderProgram) {
    boolean[] val=new boolean[1];
    glGetBooleanv(GL_DEPTH_WRITEMASK,val,0);
    boolean writeMask=val[0];
    glDepthMask(false);
    glUseProgram(texShaderProgram);
    glEnableVertexAttribArray(texVertLoc);
    glEnableVertexAttribArray(texTCoordLoc);
    texCoords[0]=2 * (float)scrX0 / pg.width - 1;
    texCoords[1]=2 * (float)scrY0 / pg.height - 1;
    texCoords[2]=(float)texX0 / width;
    texCoords[3]=(float)texY0 / height;
    texCoords[4]=2 * (float)scrX1 / pg.width - 1;
    texCoords[5]=2 * (float)scrY0 / pg.height - 1;
    texCoords[6]=(float)texX1 / width;
    texCoords[7]=(float)texY0 / height;
    texCoords[8]=2 * (float)scrX0 / pg.width - 1;
    texCoords[9]=2 * (float)scrY1 / pg.height - 1;
    texCoords[10]=(float)texX0 / width;
    texCoords[11]=(float)texY1 / height;
    texCoords[12]=2 * (float)scrX1 / pg.width - 1;
    texCoords[13]=2 * (float)scrY1 / pg.height - 1;
    texCoords[14]=(float)texX1 / width;
    texCoords[15]=(float)texY1 / height;
    texData.rewind();
    texData.put(texCoords);
    enableTexturing(target);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(target,id);
    texData.position(0);
    glVertexAttribPointer(texVertLoc,2,GL_FLOAT,false,4 * SIZEOF_FLOAT,texData);
    texData.position(2);
    glVertexAttribPointer(texTCoordLoc,2,GL_FLOAT,false,4 * SIZEOF_FLOAT,texData);
    glDrawArrays(GL_TRIANGLE_STRIP,0,4);
    glBindTexture(target,0);
    disableTexturing(target);
    glDisableVertexAttribArray(texVertLoc);
    glDisableVertexAttribArray(texTCoordLoc);
    glUseProgram(0);
    glDepthMask(writeMask);
  }
}
