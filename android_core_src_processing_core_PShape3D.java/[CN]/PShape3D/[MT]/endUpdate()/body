{
  if (updateElement == -1) {
    throw new RuntimeException("PShape3D: call beginUpdate() first");
  }
  if (lastUpdateIdx < firstUpdateIdx) {
    updateElement=-1;
    return;
  }
  if (updateElement == VERTICES) {
    int offset=firstUpdateIdx * 3;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 3;
    vertexBuffer.position(0);
    vertexBuffer.put(vertexArray,offset,size);
    vertexBuffer.flip();
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,vertexBuffer);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
    if (creatingGroup) {
      addGroup(grIdx0,grIdx1,null);
    }
  }
 else   if (updateElement == COLORS) {
    int offset=firstUpdateIdx * 4;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 4;
    colorBuffer.position(0);
    colorBuffer.put(colorArray,offset,size);
    colorBuffer.flip();
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,colorBuffer);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == NORMALS) {
    int offset=firstUpdateIdx * 3;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 3;
    normalBuffer.position(0);
    normalBuffer.put(normalArray,offset,size);
    normalBuffer.flip();
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,normalBuffer);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == TEXTURES) {
    int offset=firstUpdateIdx * 2;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 2;
    texCoordBuffer.position(0);
    texCoordBuffer.put(texCoordArray,offset,size);
    texCoordBuffer.flip();
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,texCoordBuffer);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == GROUPS) {
  }
  updateElement=-1;
}
