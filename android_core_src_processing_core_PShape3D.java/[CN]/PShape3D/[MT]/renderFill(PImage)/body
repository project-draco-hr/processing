{
  pg.startFillShader();
  pg.startFillShader();
  pg.enableFillVertex();
  pg.enableFillColor();
  pg.enableFillNormal();
  pg.enableFillTexCoord();
  pg.enableFillMaterials();
  for (int i=0; i < fillIndexData.size(); i++) {
    IndexData index=(IndexData)fillIndexData.get(i);
    int first=index.first;
    int offset=index.offset;
    int size=index.size;
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,root.glFillVertexBufferID);
    pg.setFillVertexFormat(3,first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,root.glFillColorBufferID);
    pg.setFillColorFormat(4,first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,root.glFillNormalBufferID);
    pg.setFillNormalFormat(3,first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,root.glFillTexCoordBufferID);
    pg.setFillTexCoordFormat(2,first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glFillAmbientBufferID);
    pgl.glVertexAttribPointer(pg.fillAmbientAttribLoc,4,PGL.GL_UNSIGNED_BYTE,false,0,4 * first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glFillSpecularBufferID);
    pgl.glVertexAttribPointer(pg.fillSpecularAttribLoc,4,PGL.GL_UNSIGNED_BYTE,false,0,4 * first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glFillEmissiveBufferID);
    pgl.glVertexAttribPointer(pg.fillEmissiveAttribLoc,4,PGL.GL_UNSIGNED_BYTE,false,0,4 * first);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glFillShininessBufferID);
    pgl.glVertexAttribPointer(pg.fillShininessAttribLoc,1,PGL.GL_FLOAT,false,0,first);
    PTexture tex=null;
    if (textureImage != null) {
      pgl.glActiveTexture(PGL.GL_TEXTURE0);
      tex=pg.getTexture(textureImage);
      if (tex != null) {
        pgl.glEnable(tex.glTarget);
        pgl.glBindTexture(tex.glTarget,tex.glID);
      }
    }
    pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,root.glFillIndexBufferID);
    pgl.glDrawElements(PGL.GL_TRIANGLES,size,PGL.GL_UNSIGNED_SHORT,offset * PGL.SIZEOF_INDEX);
    if (tex != null) {
      pgl.glBindTexture(tex.glTarget,0);
      pgl.glDisable(tex.glTarget);
    }
    pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,0);
    pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,0);
  }
  pg.disableFillVertex();
  pg.disableFillColor();
  pg.disableFillNormal();
  pg.disableFillTexCoord();
  pg.disableFillMaterials();
  pg.stopFillShader();
}
