{
  PTexture tex=null;
  if (textureImage != null) {
    tex=pg.getTexture(textureImage);
    if (tex != null) {
      pgl.glEnable(tex.glTarget);
      pgl.glBindTexture(tex.glTarget,tex.glID);
    }
  }
  FillShader shader=pg.getFillShader(pg.lights,tex != null);
  shader.start();
  for (int i=0; i < fillIndexData.size(); i++) {
    IndexData index=(IndexData)fillIndexData.get(i);
    int first=index.first;
    int offset=index.offset;
    int size=index.size;
    shader.setVertexAttribute(root.glFillVertexBufferID,3,PGL.GL_FLOAT,0,3 * first);
    shader.setColorAttribute(root.glFillColorBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * first);
    if (pg.lights) {
      shader.setNormalAttribute(root.glFillNormalBufferID,3,PGL.GL_FLOAT,0,3 * first);
      shader.setAmbientAttribute(root.glFillAmbientBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * first);
      shader.setSpecularAttribute(root.glFillSpecularBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * first);
      shader.setEmissiveAttribute(root.glFillEmissiveBufferID,4,PGL.GL_UNSIGNED_BYTE,0,4 * first);
      shader.setShininessAttribute(root.glFillShininessBufferID,1,PGL.GL_FLOAT,0,first);
    }
    if (tex != null) {
      shader.setTexCoordAttribute(root.glFillTexCoordBufferID,2,PGL.GL_FLOAT,0,2 * first);
    }
    pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,root.glFillIndexBufferID);
    pgl.glDrawElements(PGL.GL_TRIANGLES,size,PGL.GL_UNSIGNED_SHORT,offset * PGL.SIZEOF_INDEX);
    pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,0);
  }
  shader.stop();
  if (tex != null) {
    pgl.glBindTexture(tex.glTarget,0);
    pgl.glDisable(tex.glTarget);
  }
}
