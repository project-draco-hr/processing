{
  int texTarget=GL11.GL_TEXTURE_2D;
  PImage img;
  PTexture tex;
  float pointSize;
  g.VERTEXCOUNT=vertexBuffer.capacity() / 3;
  g.FACECOUNT=groups.size();
  g.TRIANGLECOUNT=g.VERTEXCOUNT / 3;
  pointSize=PApplet.min(g.strokeWeight,PGraphicsAndroid3D.maxPointSize);
  gl.glPointSize(pointSize);
  gl.glEnableClientState(GL11.GL_NORMAL_ARRAY);
  gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,glNormalBufferID[0]);
  gl.glNormalPointer(GL11.GL_FLOAT,0,0);
  if (vertexColor) {
    gl.glEnableClientState(GL11.GL_COLOR_ARRAY);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,glColorBufferID[0]);
    gl.glColorPointer(4,GL11.GL_FLOAT,0,0);
  }
  gl.glEnableClientState(GL11.GL_VERTEX_ARRAY);
  gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,glVertexBufferID[0]);
  gl.glVertexPointer(3,GL11.GL_FLOAT,0,0);
  VertexGroup group;
  for (int i=gr0; i <= gr1; i++) {
    group=(VertexGroup)groups.get(i);
    img=group.texture;
    tex=null;
    if (img != null && img.getTexture() != null) {
      tex=img.getTexture();
      texTarget=tex.getGLTarget();
      gl.glEnable(texTarget);
      gl.glActiveTexture(GL11.GL_TEXTURE0);
      gl.glBindTexture(texTarget,tex.getGLID());
      if (pointSprites) {
        gl.glPointParameterfv(GL11.GL_POINT_DISTANCE_ATTENUATION,ptDistAtt,0);
        gl.glPointParameterf(GL11.GL_POINT_FADE_THRESHOLD_SIZE,0.6f * pointSize);
        gl.glPointParameterf(GL11.GL_POINT_SIZE_MIN,1.0f);
        gl.glPointParameterf(GL11.GL_POINT_SIZE_MAX,PGraphicsAndroid3D.maxPointSize);
        gl.glTexEnvf(GL11.GL_POINT_SPRITE_OES,GL11.GL_COORD_REPLACE_OES,GL11.GL_TRUE);
        gl.glEnable(GL11.GL_POINT_SPRITE_OES);
      }
 else {
        gl.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
        gl.glClientActiveTexture(GL11.GL_TEXTURE0);
        gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,glTexCoordBufferID[0]);
        gl.glTexCoordPointer(2,GL11.GL_FLOAT,0,0);
      }
    }
    if (!vertexColor) {
      if (tex == null) {
        gl.glColor4f(g.fillR,g.fillG,g.fillB,g.fillA);
      }
 else {
        if (g.tint) {
          gl.glColor4f(g.tintR,g.tintG,g.tintB,g.tintA);
        }
 else {
          gl.glColor4f(1,1,1,1);
        }
      }
    }
    if (0 < group.sw) {
      gl.glLineWidth(group.sw);
    }
 else {
      gl.glLineWidth(g.strokeWeight);
    }
    if (0 < group.glMode && !pointSprites) {
      gl.glDrawArrays(group.glMode,group.first,group.last - group.first + 1);
    }
 else {
      gl.glDrawArrays(glMode,group.first,group.last - group.first + 1);
    }
    if (tex != null) {
      if (pointSprites) {
        gl.glDisable(GL11.GL_POINT_SPRITE_OES);
      }
 else {
        gl.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
      }
      gl.glDisable(texTarget);
    }
  }
  gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  gl.glDisableClientState(GL11.GL_VERTEX_ARRAY);
  gl.glDisableClientState(GL11.GL_COLOR_ARRAY);
  gl.glDisableClientState(GL11.GL_NORMAL_ARRAY);
}
