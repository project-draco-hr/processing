{
  this.errorCheckerService=errorCheckerService;
  for (int i=0; i < this.getColumnModel().getColumnCount(); i++) {
    getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
  }
  getTableHeader().setReorderingAllowed(false);
  addMouseListener(new MouseAdapter(){
    @Override synchronized public void mouseClicked(    MouseEvent e){
      try {
        int row=((XQErrorTable)e.getSource()).getSelectedRow();
        errorCheckerService.scrollToErrorLine(row);
      }
 catch (      Exception e1) {
        Base.log("Exception XQErrorTable mouseReleased " + e);
      }
    }
  }
);
  final XQErrorTable thisTable=this;
  this.addMouseMotionListener(new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent evt){
      int rowIndex=rowAtPoint(evt.getPoint());
synchronized (errorCheckerService.problemsList) {
        if (rowIndex < errorCheckerService.problemsList.size()) {
          Problem p=errorCheckerService.problemsList.get(rowIndex);
          if (p.getImportSuggestions() != null && p.getImportSuggestions().length > 0) {
            String t=p.getMessage() + "(Import Suggestions available)";
            FontMetrics fm=thisTable.getFontMetrics(thisTable.getFont());
            int x1=fm.stringWidth(p.getMessage());
            int x2=fm.stringWidth(t);
            if (evt.getX() > x1 && evt.getX() < x2) {
              String[] list=p.getImportSuggestions();
              String className=list[0].substring(list[0].lastIndexOf('.') + 1);
              String[] temp=new String[list.length];
              for (int i=0; i < list.length; i++) {
                temp[i]="<html>Import '" + className + "' <font color=#777777>("+ list[i]+ ")</font></html>";
              }
              showImportSuggestion(temp,evt.getXOnScreen(),evt.getYOnScreen() - 3 * thisTable.getFont().getSize());
            }
          }
        }
      }
    }
  }
);
  this.getTableHeader().addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      columnResizing=true;
    }
    @Override public void mouseReleased(    MouseEvent e){
      columnResizing=false;
      for (int i=0; i < ((JTableHeader)e.getSource()).getColumnModel().getColumnCount(); i++) {
        columnWidths[i]=((JTableHeader)e.getSource()).getColumnModel().getColumn(i).getWidth();
      }
    }
  }
);
  ToolTipManager.sharedInstance().registerComponent(this);
}
