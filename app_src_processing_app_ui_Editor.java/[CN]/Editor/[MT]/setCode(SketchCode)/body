{
  SyntaxDocument document=(SyntaxDocument)code.getDocument();
  if (document == null) {
    document=new SyntaxDocument();
    code.setDocument(document);
    document.setTokenMarker(mode.getTokenMarker());
    try {
      document.insertString(0,code.getProgram(),null);
    }
 catch (    BadLocationException bl) {
      bl.printStackTrace();
    }
    document.addDocumentListener(new DocumentListener(){
      public void removeUpdate(      DocumentEvent e){
        if (isInserting && isDirectEdit()) {
          endTextEditHistory();
        }
        isInserting=false;
      }
      public void insertUpdate(      DocumentEvent e){
        if (!isInserting && isDirectEdit()) {
          endTextEditHistory();
        }
        isInserting=true;
      }
      public void changedUpdate(      DocumentEvent e){
        endTextEditHistory();
      }
    }
);
    document.addUndoableEditListener(new UndoableEditListener(){
      public void undoableEditHappened(      UndoableEditEvent e){
        if (endUndoEvent != null) {
          endUndoEvent.cancel();
          endUndoEvent=null;
          startTimerEvent();
        }
        if (compoundEdit == null) {
          startCompoundEdit();
          startTimerEvent();
        }
        compoundEdit.addEdit(e.getEdit());
        undoAction.updateUndoState();
        redoAction.updateRedoState();
      }
    }
);
  }
  textarea.setDocument(document,code.getSelectionStart(),code.getSelectionStop(),code.getScrollPosition());
  textarea.requestFocusInWindow();
  this.undo=code.getUndo();
  undoAction.updateUndoState();
  redoAction.updateRedoState();
}
