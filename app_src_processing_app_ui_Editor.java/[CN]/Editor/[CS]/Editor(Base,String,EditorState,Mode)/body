{
  super("Processing",state.checkConfig());
  this.base=base;
  this.state=state;
  this.mode=mode;
  base.checkFirstEditor(this);
  Toolkit.setIcon(this);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      base.handleClose(Editor.this,false);
    }
  }
);
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      base.handleActivated(Editor.this);
      fileMenu.insert(Recent.getMenu(),2);
      Toolkit.setMenuMnemsInside(fileMenu);
      mode.insertImportMenu(sketchMenu);
      Toolkit.setMenuMnemsInside(sketchMenu);
      mode.insertToolbarRecentMenu();
    }
    public void windowDeactivated(    WindowEvent e){
      fileMenu.remove(Recent.getMenu());
      mode.removeImportMenu(sketchMenu);
      mode.removeToolbarRecentMenu();
    }
  }
);
  timer=new Timer();
  buildMenuBar();
  JPanel contentPain=new JPanel();
  setContentPane(contentPain);
  contentPain.setLayout(new BorderLayout());
  Box box=Box.createVerticalBox();
  Box upper=Box.createVerticalBox();
  rebuildModePopup();
  toolbar=createToolbar();
  upper.add(toolbar);
  header=createHeader();
  upper.add(header);
  textarea=createTextArea();
  textarea.setRightClickPopup(new TextAreaPopup());
  textarea.setHorizontalOffset(JEditTextArea.leftHandGutter);
{
    int modifiers=Toolkit.awtToolkit.getMenuShortcutKeyMask();
    KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_DIVIDE,modifiers);
    final String ACTION_KEY="COMMENT_UNCOMMENT_ALT";
    textarea.getInputMap().put(keyStroke,ACTION_KEY);
    textarea.getActionMap().put(ACTION_KEY,new AbstractAction(){
      @Override public void actionPerformed(      ActionEvent e){
        handleCommentUncomment();
      }
    }
);
  }
  footer=createFooter();
  upper.add(textarea);
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,upper,footer);
  splitPane.setOneTouchExpandable(false);
  splitPane.setContinuousLayout(true);
  splitPane.setResizeWeight(1D);
  splitPane.setBorder(null);
  UIManager.getDefaults().put("SplitPane.border",BorderFactory.createEmptyBorder());
  splitPane.setDividerSize(EditorStatus.HIGH);
  splitPane.setUI(new BasicSplitPaneUI(){
    public BasicSplitPaneDivider createDefaultDivider(){
      status=new EditorStatus(this,Editor.this);
      return status;
    }
  }
);
  box.add(splitPane);
  contentPain.add(box);
  textarea.addCaretListener(new CaretListener(){
    String lastText=textarea.getText();
    public void caretUpdate(    CaretEvent e){
      String newText=textarea.getText();
      if (lastText.equals(newText) && isDirectEdit() && !textarea.isOverwriteEnabled()) {
        endTextEditHistory();
      }
      lastText=newText;
    }
  }
);
  textarea.addKeyListener(toolbar);
  contentPain.setTransferHandler(new FileDropHandler());
  pack();
  state.apply(this);
  int minWidth=Preferences.getInteger("editor.window.width.min");
  int minHeight=Preferences.getInteger("editor.window.height.min");
  setMinimumSize(new Dimension(minWidth,minHeight));
  applyPreferences();
  addWindowFocusListener(new WindowAdapter(){
    public void windowGainedFocus(    WindowEvent e){
      textarea.requestFocusInWindow();
    }
  }
);
  handleOpenInternal(path);
  addWindowFocusListener(new ChangeDetector(this));
  if (Platform.isMacOS()) {
    try {
      Class util=Class.forName("com.apple.eawt.FullScreenUtilities");
      Class params[]=new Class[]{Window.class,Boolean.TYPE};
      Method method=util.getMethod("setWindowCanFullScreen",params);
      method.invoke(util,this,true);
    }
 catch (    Exception e) {
      Messages.loge("Could not enable OSX fullscreen",e);
    }
  }
}
