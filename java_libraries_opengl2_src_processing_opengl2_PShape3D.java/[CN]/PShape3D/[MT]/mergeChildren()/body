{
  if (family != GROUP)   return;
  if (children == null) {
    if (root == this) {
      addDefaultChild();
    }
 else {
      return;
    }
  }
 else {
    PShape3D child0, child1;
    int ndiff=1;
    int i0=0;
    child0=null;
    for (int i=0; i < childCount; i++) {
      child0=(PShape3D)children[i];
      if (child0.family == GROUP) {
        child0.mergeChildren();
      }
 else {
        i0=i + 1;
        break;
      }
    }
    if (i0 == 0)     return;
    for (int i=i0; i < childCount; i++) {
      child1=(PShape3D)children[i];
      if (child1.family == GROUP) {
        child1.mergeChildren();
        continue;
      }
      if (child0.equalTo(child1,true)) {
        child0.lastVertex=child1.lastVertex;
        for (int n=child0.firstVertex; n <= child0.lastVertex; n++) {
          vertexChild[n]=child0;
        }
        child1.firstVertex=child1.lastVertex=-1;
      }
 else {
        child0=child1;
        ndiff++;
      }
    }
    PShape[] temp=new PShape[ndiff];
    int n=0;
    for (int i=0; i < childCount; i++) {
      child1=(PShape3D)children[i];
      if (child1.family == GEOMETRY && child1.lastVertex == -1 && child1.getName() != null && nameTable != null) {
        nameTable.remove(child1.getName());
      }
 else {
        temp[n++]=child1;
      }
    }
    children=temp;
    childCount=ndiff;
  }
}
