{
  Display tmpDisplay=NewtFactory.createDisplay(null);
  tmpDisplay.addReference();
  Screen tmpScreen=NewtFactory.createScreen(tmpDisplay,0);
  tmpScreen.addReference();
  monitors=new ArrayList<MonitorDevice>();
  GraphicsEnvironment environment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice[] awtDevices=environment.getScreenDevices();
  List<MonitorDevice> newtDevices=tmpScreen.getMonitorDevices();
  if (PApplet.platform == PConstants.LINUX) {
    for (    GraphicsDevice device : awtDevices) {
      String did=device.getIDstring();
      String[] parts=did.split("\\.");
      String id1="";
      if (1 < parts.length) {
        id1=parts[1].trim();
      }
      MonitorDevice monitor=null;
      int id0=newtDevices.size() > 0 ? newtDevices.get(0).getId() : 0;
      for (int i=0; i < newtDevices.size(); i++) {
        MonitorDevice mon=newtDevices.get(i);
        String mid=String.valueOf(mon.getId() - id0);
        if (id1.equals(mid)) {
          monitor=mon;
          break;
        }
      }
      if (monitor != null) {
        monitors.add(monitor);
      }
    }
  }
 else   if (PApplet.platform == PConstants.WINDOWS) {
    monitors.addAll(newtDevices);
  }
 else {
    for (    GraphicsDevice device : awtDevices) {
      String did=device.getIDstring();
      String[] parts=did.split("Display");
      String id1="";
      if (1 < parts.length) {
        id1=parts[1].trim();
      }
      MonitorDevice monitor=null;
      for (int i=0; i < newtDevices.size(); i++) {
        MonitorDevice mon=newtDevices.get(i);
        String mid=String.valueOf(mon.getId());
        if (id1.equals(mid)) {
          monitor=mon;
          break;
        }
      }
      if (monitor == null) {
        for (int i=0; i < newtDevices.size(); i++) {
          MonitorDevice mon=newtDevices.get(i);
          String mid=String.valueOf(mon.getId());
          if (-1 < did.indexOf(mid)) {
            monitor=mon;
            break;
          }
        }
      }
      if (monitor != null) {
        monitors.add(monitor);
      }
    }
  }
  displayDevice=null;
  int displayNum=sketch.sketchDisplay();
  if (displayNum > 0) {
    if (displayNum <= monitors.size()) {
      displayDevice=monitors.get(displayNum - 1);
    }
 else {
      System.err.format("Display %d does not exist, " + "using the default display instead.%n",displayNum);
      for (int i=0; i < monitors.size(); i++) {
        System.err.format("Display %d is %s%n",i + 1,monitors.get(i));
      }
    }
  }
 else   if (0 < monitors.size()) {
    displayDevice=monitors.get(0);
  }
  if (displayDevice != null) {
    screen=displayDevice.getScreen();
    display=screen.getDisplay();
  }
 else {
    screen=tmpScreen;
    display=tmpDisplay;
    displayDevice=screen.getPrimaryMonitor();
  }
}
