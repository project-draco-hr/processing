{
  if (present) {
    frame.setBounds(screenRect);
    applet.setBounds((screenRect.width - applet.width) / 2,(screenRect.height - applet.height) / 2,applet.width,applet.height);
    if (platform == MACOSX) {
      macosxFullScreenEnable(frame);
      macosxFullScreenToggle(frame);
    }
    if (!hideStop) {
      Label label=new Label("stop");
      label.setForeground(stopColor);
      label.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        java.awt.event.MouseEvent e){
          applet.exit();
        }
      }
);
      frame.add(label);
      Dimension labelSize=label.getPreferredSize();
      labelSize=new Dimension(100,labelSize.height);
      label.setSize(labelSize);
      label.setLocation(20,screenRect.height - labelSize.height - 20);
    }
    if (external) {
      applet.setupExternalMessages();
    }
  }
 else {
    Insets insets=frame.getInsets();
    int windowW=Math.max(applet.width,MIN_WINDOW_WIDTH) + insets.left + insets.right;
    int windowH=Math.max(applet.height,MIN_WINDOW_HEIGHT) + insets.top + insets.bottom;
    int contentW=Math.max(applet.width,MIN_WINDOW_WIDTH);
    int contentH=Math.max(applet.height,MIN_WINDOW_HEIGHT);
    frame.setSize(windowW,windowH);
    if (location != null) {
      frame.setLocation(location[0],location[1]);
    }
 else     if (external && editorLocation != null) {
      int locationX=editorLocation[0] - 20;
      int locationY=editorLocation[1];
      if (locationX - windowW > 10) {
        frame.setLocation(locationX - windowW,locationY);
      }
 else {
        locationX=editorLocation[0] + 66;
        locationY=editorLocation[1] + 66;
        if ((locationX + windowW > applet.displayWidth - 33) || (locationY + windowH > applet.displayHeight - 33)) {
          locationX=(applet.displayWidth - windowW) / 2;
          locationY=(applet.displayHeight - windowH) / 2;
        }
        frame.setLocation(locationX,locationY);
      }
    }
 else {
      frame.setLocation(screenRect.x + (screenRect.width - applet.width) / 2,screenRect.y + (screenRect.height - applet.height) / 2);
    }
    Point frameLoc=frame.getLocation();
    if (frameLoc.y < 0) {
      frame.setLocation(frameLoc.x,30);
    }
    if (backgroundColor != null) {
      ((JFrame)frame).getContentPane().setBackground(backgroundColor);
    }
    applet.setBounds((contentW - applet.width) / 2,(contentH - applet.height) / 2,applet.width,applet.height);
    if (external) {
      applet.setupExternalMessages();
    }
 else {
      frame.addWindowListener(new WindowAdapter(){
        @Override public void windowClosing(        java.awt.event.WindowEvent e){
          System.exit(0);
        }
      }
);
    }
    applet.setupFrameResizeListener();
    if (applet.displayable()) {
      frame.setVisible(true);
      if (platform == LINUX) {
        Insets irlInsets=frame.getInsets();
        if (!irlInsets.equals(insets)) {
          insets=irlInsets;
          windowW=Math.max(applet.width,MIN_WINDOW_WIDTH) + insets.left + insets.right;
          windowH=Math.max(applet.height,MIN_WINDOW_HEIGHT) + insets.top + insets.bottom;
          frame.setSize(windowW,windowH);
        }
      }
    }
  }
}
