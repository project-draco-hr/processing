{
  ensureExistence();
  int exportPlatform=PConstants.MACOSX;
  File destFolder=new File(folder,"application");
  Base.removeDir(destFolder);
  destFolder.mkdirs();
  String foundName=build(destFolder.getPath(),name);
  if (foundName == null)   return false;
  if (!name.equals(foundName)) {
    Base.showWarning("Error during export","Sketch name is " + name + " but the sketch\n"+ "name in the code was "+ foundName,null);
    return false;
  }
  for (int i=0; i < codeCount; i++) {
    try {
      Base.copyFile(code[i].file,new File(destFolder,code[i].file.getName()));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  File jarFolder=new File(destFolder,"lib");
  File dotAppFolder=null;
  if (exportPlatform == PConstants.MACOSX) {
    dotAppFolder=new File(destFolder,name + ".app");
    String APP_SKELETON="skeleton.app";
    File dotAppSkeleton=new File("lib/export/" + APP_SKELETON);
    Base.copyDir(dotAppSkeleton,dotAppFolder);
    File stubFile=new File(dotAppFolder,"Contents/MacOS/JavaApplicationStub");
    String stubPath=stubFile.getAbsolutePath();
    Runtime.getRuntime().exec(new String[]{"chmod","+x",stubPath});
    jarFolder=new File(dotAppFolder,"Contents/Resources/Java");
  }
  Vector jarListVector=new Vector();
  zipFileContents=new Hashtable();
  FileOutputStream zipOutputFile=new FileOutputStream(new File(jarFolder,name + ".jar"));
  ZipOutputStream zos=new ZipOutputStream(zipOutputFile);
  ZipEntry entry;
  addManifest(zos);
  String classfiles[]=destFolder.list();
  for (int i=0; i < classfiles.length; i++) {
    if (classfiles[i].endsWith(".class")) {
      entry=new ZipEntry(classfiles[i]);
      zos.putNextEntry(entry);
      zos.write(Base.grabFile(new File(destFolder,classfiles[i])));
      zos.closeEntry();
    }
  }
  if (dataFolder.exists()) {
    String dataFiles[]=Base.listFiles(dataFolder,false);
    int offset=folder.getAbsolutePath().length() + 1;
    for (int i=0; i < dataFiles.length; i++) {
      if (PApplet.platform == PApplet.WINDOWS) {
        dataFiles[i]=dataFiles[i].replace('\\','/');
      }
      File dataFile=new File(dataFiles[i]);
      if (dataFile.isDirectory())       continue;
      if (dataFile.getName().charAt(0) == '.')       continue;
      entry=new ZipEntry(dataFiles[i].substring(offset));
      zos.putNextEntry(entry);
      zos.write(Base.grabFile(dataFile));
      zos.closeEntry();
    }
  }
  if (codeFolder.exists()) {
    String includes=Compiler.contentsToClassPath(codeFolder);
    packClassPathIntoZipFile(includes,zos);
  }
  zos.flush();
  zos.close();
  jarListVector.add(name + ".jar");
  Base.copyFile(new File("lib/core.jar"),new File(jarFolder,"core.jar"));
  jarListVector.add("core.jar");
  Enumeration en=importedLibraries.elements();
  while (en.hasMoreElements()) {
    File libraryFolder=(File)en.nextElement();
    File exportSettings=new File(libraryFolder,"export.txt");
    String exportList[]=null;
    if (exportSettings.exists()) {
      String info[]=PApplet.loadStrings(exportSettings);
      for (int i=0; i < info.length; i++) {
        if (info[i].startsWith("application")) {
          int idx=info[i].indexOf('=');
          String commas=info[i].substring(idx + 1).trim();
          exportList=PApplet.split(commas,", ");
        }
      }
    }
 else {
      exportList=libraryFolder.list();
    }
    for (int i=0; i < exportList.length; i++) {
      if (exportList[i].equals(".") || exportList[i].equals(".."))       continue;
      exportList[i]=PApplet.trim(exportList[i]);
      if (exportList[i].equals(""))       continue;
      File exportFile=new File(libraryFolder,exportList[i]);
      if (!exportFile.exists()) {
        System.err.println("File " + exportList[i] + " does not exist");
      }
 else       if (exportFile.isDirectory()) {
        System.err.println("Ignoring sub-folder \"" + exportList[i] + "\"");
      }
 else       if (exportFile.getName().toLowerCase().endsWith(".zip") || exportFile.getName().toLowerCase().endsWith(".jar")) {
        Base.copyFile(exportFile,new File(jarFolder,exportList[i]));
        jarListVector.add(exportList[i]);
      }
 else       if ((exportPlatform == PConstants.MACOSX) && (exportFile.getName().toLowerCase().endsWith(".jnilib"))) {
        Base.copyFile(exportFile,new File(jarFolder,exportList[i]));
      }
 else {
        Base.copyFile(exportFile,new File(destFolder,exportFile.getName()));
      }
    }
  }
  String jarList[]=new String[jarListVector.size()];
  jarListVector.copyInto(jarList);
  StringBuffer exportClassPath=new StringBuffer();
  if (exportPlatform == PConstants.MACOSX) {
    for (int i=0; i < jarList.length; i++) {
      if (i != 0)       exportClassPath.append(":");
      exportClassPath.append("$JAVAROOT/" + jarList[i]);
    }
  }
  if (exportPlatform == PConstants.MACOSX) {
    String PLIST_TEMPLATE="template.plist";
    File plistTemplate=new File(folder,PLIST_TEMPLATE);
    if (!plistTemplate.exists()) {
      plistTemplate=new File("lib/export/" + PLIST_TEMPLATE);
    }
    File plistFile=new File(dotAppFolder,"Contents/Info.plist");
    PrintStream ps=new PrintStream(new FileOutputStream(plistFile));
    String lines[]=PApplet.loadStrings(plistTemplate);
    for (int i=0; i < lines.length; i++) {
      if (lines[i].indexOf("@@") != -1) {
        StringBuffer sb=new StringBuffer(lines[i]);
        int index=0;
        while ((index=sb.indexOf("@@sketch@@")) != -1) {
          sb.replace(index,index + "@@sketch@@".length(),name);
        }
        while ((index=sb.indexOf("@@classpath@@")) != -1) {
          sb.replace(index,index + "@@classpath@@".length(),exportClassPath.toString());
        }
        lines[i]=sb.toString();
      }
      ps.println(lines[i]);
    }
    ps.flush();
    ps.close();
  }
  for (int i=0; i < classfiles.length; i++) {
    if (classfiles[i].endsWith(".class")) {
      File deadguy=new File(destFolder,classfiles[i]);
      if (!deadguy.delete()) {
        Base.showWarning("Could not delete",classfiles[i] + " could not \n" + "be deleted from the applet folder.  \n"+ "You'll need to remove it by hand.",null);
      }
    }
  }
  return true;
}
