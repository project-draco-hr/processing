{
  float area=0.0f;
  for (int p=vertex_end - 1, q=vertex_start; q < vertex_end; p=q++) {
    area+=(vertices[q][MX] * vertices[p][MY] - vertices[p][MX] * vertices[q][MY]);
  }
  int j=0;
  if (area > 0) {
    for (int i=vertex_start; i < vertex_end; i++) {
      j=i - vertex_start;
      vertex_order[j]=i;
    }
  }
 else {
    for (int i=vertex_start; i < vertex_end; i++) {
      j=i - vertex_start;
      vertex_order[j]=(vertex_end - 1) - j;
    }
  }
  int vc=vertex_end - vertex_start;
  int count=2 * vc;
  for (int m=0, v=vc - 1; vc > 2; ) {
    boolean snip=true;
    if (0 >= (count--)) {
      break;
    }
    int u=v;
    if (vc <= u)     u=0;
    v=u + 1;
    if (vc <= v)     v=0;
    int w=v + 1;
    if (vc <= w)     w=0;
    float Ax=-vertices[vertex_order[u]][MX];
    float Ay=vertices[vertex_order[u]][MY];
    float Bx=-vertices[vertex_order[v]][MX];
    float By=vertices[vertex_order[v]][MY];
    float Cx=-vertices[vertex_order[w]][MX];
    float Cy=vertices[vertex_order[w]][MY];
    if (EPSILON > (((Bx - Ax) * (Cy - Ay)) - ((By - Ay) * (Cx - Ax)))) {
      continue;
    }
    for (int p=0; p < vc; p++) {
      if ((p == u) || (p == v) || (p == w)) {
        continue;
      }
      float Px=-vertices[vertex_order[p]][MX];
      float Py=vertices[vertex_order[p]][MY];
      float ax=Cx - Bx;
      float ay=Cy - By;
      float bx=Ax - Cx;
      float by=Ay - Cy;
      float cx=Bx - Ax;
      float cy=By - Ay;
      float apx=Px - Ax;
      float apy=Py - Ay;
      float bpx=Px - Bx;
      float bpy=Py - By;
      float cpx=Px - Cx;
      float cpy=Py - Cy;
      float aCROSSbp=ax * bpy - ay * bpx;
      float cCROSSap=cx * apy - cy * apx;
      float bCROSScp=bx * cpy - by * cpx;
      if ((aCROSSbp >= 0.0f) && (bCROSScp >= 0.0f) && (cCROSSap >= 0.0f)) {
        snip=false;
      }
    }
    if (snip) {
      add_triangle(vertex_order[u],vertex_order[v],vertex_order[w]);
      m++;
      for (int s=v, t=v + 1; t < vc; s++, t++) {
        vertex_order[s]=vertex_order[t];
      }
      vc--;
      count=2 * vc;
    }
  }
}
