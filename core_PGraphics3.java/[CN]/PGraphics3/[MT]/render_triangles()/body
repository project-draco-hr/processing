{
  if (recorderRaw != null) {
    recorderRaw.colorMode(RGB,1);
    recorderRaw.noStroke();
    recorderRaw.beginShape(TRIANGLES);
  }
  for (int i=0; i < triangleCount; i++) {
    float a[]=vertices[triangles[i][VERTEX1]];
    float b[]=vertices[triangles[i][VERTEX2]];
    float c[]=vertices[triangles[i][VERTEX3]];
    int tex=triangles[i][TEXTURE_INDEX];
    int index=triangles[i][INDEX];
    triangle.reset();
    float ar=min(1,triangleColors[i][0][TRI_DIFFUSE_R] + triangleColors[i][0][TRI_SPECULAR_R]);
    float ag=min(1,triangleColors[i][0][TRI_DIFFUSE_G] + triangleColors[i][0][TRI_SPECULAR_G]);
    float ab=min(1,triangleColors[i][0][TRI_DIFFUSE_B] + triangleColors[i][0][TRI_SPECULAR_B]);
    float br=min(1,triangleColors[i][1][TRI_DIFFUSE_R] + triangleColors[i][1][TRI_SPECULAR_R]);
    float bg=min(1,triangleColors[i][1][TRI_DIFFUSE_G] + triangleColors[i][1][TRI_SPECULAR_G]);
    float bb=min(1,triangleColors[i][1][TRI_DIFFUSE_B] + triangleColors[i][1][TRI_SPECULAR_B]);
    float cr=min(1,triangleColors[i][2][TRI_DIFFUSE_R] + triangleColors[i][2][TRI_SPECULAR_R]);
    float cg=min(1,triangleColors[i][2][TRI_DIFFUSE_G] + triangleColors[i][2][TRI_SPECULAR_G]);
    float cb=min(1,triangleColors[i][2][TRI_DIFFUSE_B] + triangleColors[i][2][TRI_SPECULAR_B]);
    if (tex > -1 && textures[tex] != null) {
      triangle.setTexture(textures[tex]);
      triangle.setUV(a[U],a[V],b[U],b[V],c[U],c[V]);
    }
    triangle.setIntensities(ar,ag,ab,a[A],br,bg,bb,b[A],cr,cg,cb,c[A]);
    triangle.setVertices(a[X],a[Y],a[Z],b[X],b[Y],b[Z],c[X],c[Y],c[Z]);
    triangle.setIndex(index);
    triangle.render();
    if (recorderRaw != null) {
      recorderRaw.fill(ar,ag,ab,a[A]);
      recorderRaw.vertex(a[X],a[Y]);
      recorderRaw.fill(br,bg,bb,b[A]);
      recorderRaw.vertex(b[X],b[Y]);
      recorderRaw.fill(cr,cg,cb,c[A]);
      recorderRaw.vertex(c[X],c[Y]);
    }
  }
  if (recorderRaw != null) {
    recorderRaw.endShape();
  }
}
