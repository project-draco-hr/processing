{
  mode.prepareExportFolder(destFolder);
  File jarFolder=new File(destFolder,"lib");
  File dotAppFolder=null;
  if (exportPlatform == PConstants.MACOSX) {
    dotAppFolder=new File(destFolder,sketch.getName() + ".app");
    File dotAppSkeleton=mode.getContentFile("application/template.app");
    Base.copyDir(dotAppSkeleton,dotAppFolder);
    String stubName="Contents/MacOS/JavaApplicationStub";
    if (Base.isWindows()) {
      File warningFile=new File(destFolder,"readme.txt");
      PrintWriter pw=PApplet.createWriter(warningFile);
      pw.println("This application was created on Windows, which does not");
      pw.println("properly support setting files as \"executable\",");
      pw.println("a necessity for applications on Mac OS X.");
      pw.println();
      pw.println("To fix this, use the Terminal on Mac OS X, and from this");
      pw.println("directory, type the following:");
      pw.println();
      pw.println("chmod +x " + dotAppFolder.getName() + "/"+ stubName);
      pw.flush();
      pw.close();
    }
 else {
      File stubFile=new File(dotAppFolder,stubName);
      String stubPath=stubFile.getAbsolutePath();
      Runtime.getRuntime().exec(new String[]{"chmod","+x",stubPath});
    }
    jarFolder=new File(dotAppFolder,"Contents/Resources/Java");
  }
  if (!jarFolder.exists())   jarFolder.mkdirs();
  if (exportPlatform == PConstants.WINDOWS) {
    Base.copyFile(mode.getContentFile("application/template.exe"),new File(destFolder,sketch.getName() + ".exe"));
  }
  Vector<String> jarListVector=new Vector<String>();
  HashMap<String,Object> zipFileContents=new HashMap<String,Object>();
  FileOutputStream zipOutputFile=new FileOutputStream(new File(jarFolder,sketch.getName() + ".jar"));
  ZipOutputStream zos=new ZipOutputStream(zipOutputFile);
  addManifest(zos);
  addClasses(zos,binFolder);
  addDataFolder(zos);
  if (sketch.hasCodeFolder()) {
    String includes=Base.contentsToClassPath(sketch.getCodeFolder());
    String[] codeList=PApplet.splitTokens(includes,File.pathSeparator);
    String cp="";
    for (int i=0; i < codeList.length; i++) {
      if (codeList[i].toLowerCase().endsWith(".jar") || codeList[i].toLowerCase().endsWith(".zip")) {
        File exportFile=new File(codeList[i]);
        String exportFilename=exportFile.getName();
        Base.copyFile(exportFile,new File(jarFolder,exportFilename));
        jarListVector.add(exportFilename);
      }
 else {
        cp+=codeList[i] + File.pathSeparator;
      }
    }
    packClassPathIntoZipFile(cp,zos,zipFileContents);
  }
  zos.flush();
  zos.close();
  jarListVector.add(sketch.getName() + ".jar");
  File bagelJar=Base.isMacOS() ? Base.getContentFile("core.jar") : Base.getContentFile("lib/core.jar");
  Base.copyFile(bagelJar,new File(jarFolder,"core.jar"));
  jarListVector.add("core.jar");
  for (  Library library : importedLibraries) {
    for (    File exportFile : library.getApplicationExports(exportPlatform,exportBits)) {
      String exportName=exportFile.getName();
      if (!exportFile.exists()) {
        System.err.println("File " + exportFile.getName() + " does not exist");
      }
 else       if (exportFile.isDirectory()) {
        if (exportPlatform == PConstants.MACOSX) {
          Base.copyDir(exportFile,new File(jarFolder,exportName));
        }
 else {
          Base.copyDir(exportFile,new File(destFolder,exportName));
        }
      }
 else       if (exportFile.getName().toLowerCase().endsWith(".zip") || exportFile.getName().toLowerCase().endsWith(".jar")) {
        Base.copyFile(exportFile,new File(jarFolder,exportName));
        jarListVector.add(exportName);
      }
 else       if ((exportPlatform == PConstants.MACOSX) && (exportFile.getName().toLowerCase().endsWith(".jnilib"))) {
        Base.copyFile(exportFile,new File(jarFolder,exportName));
      }
 else {
        Base.copyFile(exportFile,new File(destFolder,exportName));
      }
    }
  }
  String jarList[]=new String[jarListVector.size()];
  jarListVector.copyInto(jarList);
  StringBuffer exportClassPath=new StringBuffer();
  if (exportPlatform == PConstants.MACOSX) {
    for (int i=0; i < jarList.length; i++) {
      if (i != 0)       exportClassPath.append(":");
      exportClassPath.append("$JAVAROOT/" + jarList[i]);
    }
  }
 else   if (exportPlatform == PConstants.WINDOWS) {
    for (int i=0; i < jarList.length; i++) {
      if (i != 0)       exportClassPath.append(",");
      exportClassPath.append(jarList[i]);
    }
  }
 else {
    for (int i=0; i < jarList.length; i++) {
      if (i != 0)       exportClassPath.append(":");
      exportClassPath.append("$APPDIR/lib/" + jarList[i]);
    }
  }
  String runOptions=Preferences.get("run.options");
  if (Preferences.getBoolean("run.options.memory")) {
    runOptions+=" -Xms" + Preferences.get("run.options.memory.initial") + "m";
    runOptions+=" -Xmx" + Preferences.get("run.options.memory.maximum") + "m";
  }
  if (exportPlatform == PConstants.MACOSX) {
    String PLIST_TEMPLATE="template.plist";
    File plistTemplate=new File(sketch.getFolder(),PLIST_TEMPLATE);
    if (!plistTemplate.exists()) {
      plistTemplate=mode.getContentFile("application/template.plist");
    }
    File plistFile=new File(dotAppFolder,"Contents/Info.plist");
    PrintWriter pw=PApplet.createWriter(plistFile);
    String lines[]=PApplet.loadStrings(plistTemplate);
    for (int i=0; i < lines.length; i++) {
      if (lines[i].indexOf("@@") != -1) {
        StringBuffer sb=new StringBuffer(lines[i]);
        int index=0;
        while ((index=sb.indexOf("@@vmoptions@@")) != -1) {
          sb.replace(index,index + "@@vmoptions@@".length(),runOptions);
        }
        while ((index=sb.indexOf("@@sketch@@")) != -1) {
          sb.replace(index,index + "@@sketch@@".length(),sketch.getName());
        }
        while ((index=sb.indexOf("@@classpath@@")) != -1) {
          sb.replace(index,index + "@@classpath@@".length(),exportClassPath.toString());
        }
        while ((index=sb.indexOf("@@lsuipresentationmode@@")) != -1) {
          sb.replace(index,index + "@@lsuipresentationmode@@".length(),Preferences.getBoolean("export.application.fullscreen") ? "4" : "0");
        }
        lines[i]=sb.toString();
      }
      pw.print(lines[i] + "\n");
    }
    pw.flush();
    pw.close();
  }
 else   if (exportPlatform == PConstants.WINDOWS) {
    File argsFile=new File(destFolder + "/lib/args.txt");
    PrintWriter pw=PApplet.createWriter(argsFile);
    pw.println(runOptions);
    pw.println(sketch.getName());
    pw.println(exportClassPath);
    pw.flush();
    pw.close();
  }
 else {
    File shellScript=new File(destFolder,sketch.getName());
    PrintWriter pw=PApplet.createWriter(shellScript);
    pw.print("#!/bin/sh\n\n");
    pw.print("APPDIR=$(dirname \"$0\")\n");
    pw.print("java " + Preferences.get("run.options") + " -Djava.library.path=\"$APPDIR\""+ " -cp \""+ exportClassPath+ "\""+ " "+ sketch.getName()+ "\n");
    pw.flush();
    pw.close();
    String shellPath=shellScript.getAbsolutePath();
    if (!Base.isWindows()) {
      Runtime.getRuntime().exec(new String[]{"chmod","+x",shellPath});
    }
  }
  File sourceFolder=new File(destFolder,"source");
  sourceFolder.mkdirs();
  for (  SketchCode code : sketch.getCode()) {
    try {
      code.copyTo(new File(sourceFolder,code.getFileName()));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  String preprocFilename=sketch.getName() + ".java";
  File preprocFile=new File(destFolder,preprocFilename);
  if (preprocFile.exists()) {
    preprocFile.renameTo(new File(sourceFolder,preprocFilename));
  }
  return true;
}
