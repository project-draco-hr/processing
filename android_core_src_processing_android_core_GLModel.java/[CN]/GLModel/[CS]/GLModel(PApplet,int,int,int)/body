{
  initModelCommon(parent);
  size=numVert;
  if (mode == POINTS)   vertexMode=GL11.GL_POINTS;
 else   if (mode == POINT_SPRITES) {
    vertexMode=GL11.GL_POINTS;
    usingPointSprites=true;
    float[] tmp={0.0f};
    gl.glGetFloatv(GL11.GL_POINT_SIZE_MAX,tmp,0);
    maxPointSize=tmp[0];
    pointSize=maxPointSize;
    spriteFadeSize=0.6f * pointSize;
  }
 else   if (mode == LINES)   vertexMode=GL11.GL_LINES;
 else   if (mode == LINE_STRIP)   vertexMode=GL11.GL_LINE_STRIP;
 else   if (mode == LINE_LOOP)   vertexMode=GL11.GL_LINE_LOOP;
 else   if (mode == TRIANGLES)   vertexMode=GL11.GL_TRIANGLES;
 else   if (mode == TRIANGLE_FAN)   vertexMode=GL11.GL_TRIANGLE_FAN;
 else   if (mode == TRIANGLE_STRIP)   vertexMode=GL11.GL_TRIANGLE_STRIP;
  if (usage == STATIC)   vboUsage=GL11.GL_STATIC_DRAW;
 else   if (usage == DYNAMIC)   vboUsage=GL11.GL_DYNAMIC_DRAW;
  gl.glGenBuffers(1,vertCoordsVBO,0);
  gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,vertCoordsVBO[0]);
  gl.glBufferData(GL11.GL_ARRAY_BUFFER,size * 4 * SIZEOF_FLOAT,null,vboUsage);
  gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  vertices=FloatBuffer.allocate(size * 3);
  description="Just another GLModel";
}
