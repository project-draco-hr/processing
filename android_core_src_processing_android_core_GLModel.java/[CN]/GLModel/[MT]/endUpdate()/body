{
  if (updateElement == -1) {
    throw new RuntimeException("GLModel: call beginUpdate()");
  }
  if (updateElement != GROUPS && lastUpdateIdx < firstUpdateIdx)   return;
  if (updateElement == VERTICES) {
    if (updateVertexArray == null) {
      throw new RuntimeException("GLModel: vertex array is null");
    }
    int offset=firstUpdateIdx * 3;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 3;
    vertices.put(updateVertexArray,offset,size);
    vertices.position(0);
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,vertices);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == COLORS) {
    if (updateColorArray == null) {
      throw new RuntimeException("GLModel: color array is null");
    }
    int offset=firstUpdateIdx * 4;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 4;
    colors.put(updateColorArray,size,offset);
    colors.position(0);
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,size * SIZEOF_FLOAT,offset * SIZEOF_FLOAT,colors);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == NORMALS) {
    if (updateNormalArray == null) {
      throw new RuntimeException("GLModel: normal array is null");
    }
    int offset=firstUpdateIdx * 3;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 3;
    normals.put(updateNormalArray,offset,size);
    normals.position(0);
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,normals);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == TEXTURES) {
    if (updateTexCoordArray == null) {
      throw new RuntimeException("GLModel: texture coordinates array is null");
    }
    int offset=firstUpdateIdx * 2;
    int size=(lastUpdateIdx - firstUpdateIdx + 1) * 2;
    texCoords[selectedTexture].put(updateNormalArray,offset,size);
    texCoords[selectedTexture].position(0);
    gl.glBufferSubData(GL11.GL_ARRAY_BUFFER,offset * SIZEOF_FLOAT,size * SIZEOF_FLOAT,texCoords[selectedTexture]);
    gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
  }
 else   if (updateElement == GROUPS) {
    createGroups();
  }
  updateElement=-1;
}
