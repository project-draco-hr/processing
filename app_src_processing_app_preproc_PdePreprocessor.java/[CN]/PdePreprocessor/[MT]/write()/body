{
  PdeLexer lexer=new PdeLexer(programReader);
  lexer.setTokenObjectClass("antlr.CommonHiddenStreamToken");
  filter=new TokenStreamCopyingHiddenTokenFilter(lexer);
  filter.hide(PdeRecognizer.SL_COMMENT);
  filter.hide(PdeRecognizer.ML_COMMENT);
  filter.hide(PdeRecognizer.WS);
  filter.copy(PdeRecognizer.SEMI);
  filter.copy(PdeRecognizer.LPAREN);
  filter.copy(PdeRecognizer.RPAREN);
  filter.copy(PdeRecognizer.LCURLY);
  filter.copy(PdeRecognizer.RCURLY);
  filter.copy(PdeRecognizer.COMMA);
  filter.copy(PdeRecognizer.RBRACK);
  filter.copy(PdeRecognizer.LBRACK);
  filter.copy(PdeRecognizer.COLON);
  filter.copy(PdeRecognizer.TRIPLE_DOT);
  filter.copy(PdeRecognizer.LT);
  filter.copy(PdeRecognizer.GT);
  filter.copy(PdeRecognizer.SR);
  filter.copy(PdeRecognizer.BSR);
  PdeRecognizer parser=new PdeRecognizer(this,filter);
  parser.setASTNodeClass("antlr.ExtendedCommonASTWithHiddenTokens");
  parser.pdeProgram();
  ASTFactory factory=new ASTFactory();
  AST parserAST=parser.getAST();
  AST rootNode=factory.create(ROOT_ID,"AST ROOT");
  rootNode.setFirstChild(parserAST);
  makeSimpleMethodsPublic(rootNode);
  CommonAST.setVerboseStringConversion(true,parser.getTokenNames());
  if (programType == ProgramType.JAVA) {
    name=getFirstClassName(parserAST);
  }
  if (name == null)   return null;
  if (false) {
    final ByteArrayOutputStream buf=new ByteArrayOutputStream();
    final PrintStream bufout=new PrintStream(buf);
    writeDeclaration(bufout,name);
    new PdeEmitter(this,bufout).print(rootNode);
    writeFooter(bufout,name);
    debugAST(rootNode,true);
    System.err.println(new String(buf.toByteArray()));
  }
  writeDeclaration(stream,name);
  new PdeEmitter(this,stream).print(rootNode);
  writeFooter(stream,name);
  stream.close();
  if (Preferences.getBoolean("preproc.output_parse_tree")) {
    writeParseTree("parseTree.xml",parserAST);
  }
  return name;
}
