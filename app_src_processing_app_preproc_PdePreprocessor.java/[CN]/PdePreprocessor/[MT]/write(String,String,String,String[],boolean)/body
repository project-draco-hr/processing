{
  foundMain=false;
  program+="\n";
  Sketch.scrubComments(program);
  if (Preferences.getBoolean("preproc.substitute_unicode")) {
    char p[]=program.toCharArray();
    int unicodeCount=0;
    for (int i=0; i < p.length; i++) {
      if (p[i] > 127)       unicodeCount++;
    }
    if (unicodeCount != 0) {
      int index=0;
      char p2[]=new char[p.length + unicodeCount * 5];
      for (int i=0; i < p.length; i++) {
        if (p[i] < 128) {
          p2[index++]=p[i];
        }
 else         if (p[i] == 160) {
          p2[index++]=' ';
        }
 else {
          int c=p[i];
          p2[index++]='\\';
          p2[index++]='u';
          char str[]=Integer.toHexString(c).toCharArray();
          for (int m=0; m < 4 - str.length; m++)           p2[index++]='0';
          System.arraycopy(str,0,p2,index,str.length);
          index+=str.length;
        }
      }
      program=new String(p2,0,index);
    }
  }
  String importRegexp="\\s(import\\s+)(\\S+)(\\s*;)";
  java.util.Vector imports=new java.util.Vector();
  do {
    String[] pieces=PApplet.match(" " + program,importRegexp);
    if (pieces == null)     break;
    String piece=pieces[0] + pieces[1] + pieces[2];
    int len=piece.length();
    imports.add(pieces[1]);
    int idx=program.indexOf(piece);
    program=program.substring(0,idx) + program.substring(idx + len);
  }
 while (true);
  extraImports=new String[imports.size()];
  imports.copyInto(extraImports);
  if (codeFolderPackages != null) {
    codeFolderImports=new String[codeFolderPackages.length];
    for (int i=0; i < codeFolderPackages.length; i++) {
      codeFolderImports[i]=codeFolderPackages[i] + ".*";
    }
  }
 else {
    codeFolderImports=null;
  }
  this.programReader=new StringReader(program);
  this.buildPath=buildPath;
  PdeLexer lexer=new PdeLexer(programReader);
  lexer.setTokenObjectClass("antlr.CommonHiddenStreamToken");
  filter=new TokenStreamCopyingHiddenTokenFilter(lexer);
  filter.hide(PdeRecognizer.SL_COMMENT);
  filter.hide(PdeRecognizer.ML_COMMENT);
  filter.hide(PdeRecognizer.WS);
  filter.copy(PdeRecognizer.SEMI);
  filter.copy(PdeRecognizer.LPAREN);
  filter.copy(PdeRecognizer.RPAREN);
  filter.copy(PdeRecognizer.LCURLY);
  filter.copy(PdeRecognizer.RCURLY);
  filter.copy(PdeRecognizer.COMMA);
  filter.copy(PdeRecognizer.RBRACK);
  filter.copy(PdeRecognizer.LBRACK);
  filter.copy(PdeRecognizer.COLON);
  PdeRecognizer parser=new PdeRecognizer(filter);
  parser.setASTNodeClass("antlr.ExtendedCommonASTWithHiddenTokens");
  parser.pdeProgram();
  ASTFactory factory=new ASTFactory();
  AST parserAST=parser.getAST();
  AST rootNode=factory.create(ROOT_ID,"AST ROOT");
  rootNode.setFirstChild(parserAST);
  CommonAST.setVerboseStringConversion(true,parser.getTokenNames());
  if (programType == JAVA) {
    name=getFirstClassName(parserAST);
  }
  if (name == null)   return null;
  PdeEmitter emitter=new PdeEmitter();
  File streamFile=new File(buildPath,name + ".java");
  PrintStream stream=new PrintStream(new FileOutputStream(streamFile));
  writeHeader(stream,name,pretty);
  emitter.setOut(stream);
  emitter.print(rootNode);
  writeFooter(stream,name,pretty);
  stream.close();
  if (Preferences.getBoolean("preproc.output_parse_tree")) {
    stream=new PrintStream(new FileOutputStream("parseTree.xml"));
    stream.println("<?xml version=\"1.0\"?>");
    stream.println("<document>");
    OutputStreamWriter writer=new OutputStreamWriter(stream);
    if (parserAST != null) {
      ((CommonAST)parserAST).xmlSerialize(writer);
    }
    writer.flush();
    stream.println("</document>");
    writer.close();
  }
  return name;
}
