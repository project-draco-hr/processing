{
  if (yesButton == null) {
    yesButton=new Button(PROMPT_YES);
    noButton=new Button(PROMPT_NO);
    cancelButton=new Button(PROMPT_CANCEL);
    okButton=new Button(PROMPT_OK);
    if (PdeBase.platform == PdeBase.MACOSX) {
      yesButton.setBackground(bgcolor[PROMPT]);
      noButton.setBackground(bgcolor[PROMPT]);
      cancelButton.setBackground(bgcolor[PROMPT]);
      okButton.setBackground(bgcolor[PROMPT]);
    }
    setLayout(null);
    yesButton.addActionListener(this);
    noButton.addActionListener(this);
    cancelButton.addActionListener(this);
    okButton.addActionListener(this);
    add(yesButton);
    add(noButton);
    add(cancelButton);
    add(okButton);
    yesButton.setVisible(false);
    noButton.setVisible(false);
    cancelButton.setVisible(false);
    okButton.setVisible(false);
    editField=new TextField();
    editField.addActionListener(this);
    editField.addKeyListener(new KeyAdapter(){
      public void keyPressed(      KeyEvent event){
        int c=event.getKeyChar();
        int code=event.getKeyCode();
        if (code == KeyEvent.VK_ENTER) {
          editor.skSaveAs2(editField.getText());
          unedit();
          event.consume();
        }
 else         if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_DELETE) || (code == KeyEvent.VK_RIGHT)|| (code == KeyEvent.VK_LEFT)|| (code == KeyEvent.VK_UP)|| (code == KeyEvent.VK_DOWN)|| (code == KeyEvent.VK_HOME)|| (code == KeyEvent.VK_END)|| (code == KeyEvent.VK_SHIFT)) {
        }
 else         if (code == KeyEvent.VK_ESCAPE) {
          unedit();
          editor.buttons.clear();
          event.consume();
        }
 else         if (c == ' ') {
          String t=editField.getText();
          int start=editField.getSelectionStart();
          int end=editField.getSelectionEnd();
          editField.setText(t.substring(0,start) + "_" + t.substring(end));
          event.consume();
        }
 else         if (c == '_') {
        }
 else         if (((code >= 'A') && (code <= 'Z')) && (((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z')))) {
        }
 else         if ((c >= '0') && (c <= '9')) {
          if (editField.getCaretPosition() == 0) {
            event.consume();
          }
        }
 else {
          event.consume();
        }
      }
    }
);
    add(editField);
    editField.setVisible(false);
  }
  Dimension size=getSize();
  if ((size.width != sizeW) || (size.height != sizeH)) {
    if ((size.width > imageW) || (size.height > imageH)) {
      offscreen=null;
    }
 else {
      sizeW=size.width;
      sizeH=size.height;
      setButtonBounds();
    }
  }
  if (offscreen == null) {
    sizeW=size.width;
    sizeH=size.height;
    setButtonBounds();
    imageW=sizeW;
    imageH=sizeH;
    offscreen=createImage(imageW,imageH);
  }
  Graphics g=offscreen.getGraphics();
  if (font == null) {
    font=PdeBase.getFont("editor.status.font",new Font("SansSerif",Font.PLAIN,12));
    g.setFont(font);
    metrics=g.getFontMetrics();
    ascent=metrics.getAscent();
  }
  g.setColor(bgcolor[mode]);
  g.fillRect(0,0,imageW,imageH);
  g.setColor(fgcolor[mode]);
  g.setFont(font);
  g.drawString(message,PdeEditor.INSET_SIZE,(sizeH + ascent) / 2);
  screen.drawImage(offscreen,0,0,null);
}
