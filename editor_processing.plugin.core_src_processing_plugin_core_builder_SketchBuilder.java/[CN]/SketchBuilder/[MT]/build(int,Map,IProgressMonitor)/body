{
  this.sketch=getProject();
  if (sketch == null || !sketch.isAccessible()) {
    System.out.println("Sketch is null!");
    return null;
  }
  this.codeFolder=sketch.getFolder("code");
  this.dataFolder=sketch.getFolder("data");
  this.buildFolder=sketch.getFolder("bin");
  monitor.beginTask("Sketch Build",400);
  if (!sketch.isOpen()) {
    return null;
  }
  if (checkCancel(monitor)) {
    return null;
  }
  deleteP5ProblemMarkers(sketch);
  if (kind == IncrementalProjectBuilder.CLEAN_BUILD || kind == IncrementalProjectBuilder.FULL_BUILD) {
    removeDerived(monitor);
  }
  if (!buildFolder.exists())   buildFolder.create(IResource.NONE,true,null);
  monitor.worked(100);
  if (checkCancel(monitor)) {
    return null;
  }
  PdePreprocessor preproc=new PdePreprocessor(sketch.getName(),4);
  String[] codeFolderPackages=null;
  String classPath=buildFolder.getLocation().toOSString();
  if (codeFolder.exists()) {
    libraryPath=codeFolder.getLocationURI().toString();
    String codeFolderClassPath=Compiler.contentsToClassPath(codeFolder.getLocation().toFile());
    classPath+=File.pathSeparator + codeFolderClassPath;
    codeFolderPackages=Compiler.packageListFromClassPath(codeFolderClassPath);
  }
 else {
    libraryPath="";
  }
  StringBuffer bigCode=new StringBuffer();
  int bigCount=0;
  for (  IResource file : sketch.members()) {
    if (file.getFileExtension() != null && file.getFileExtension().equalsIgnoreCase("pde")) {
      file.setSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc start"),bigCount);
      String content=readFile((IFile)file);
      bigCode.append(content);
      bigCode.append("\n");
      bigCount+=getLineCount(content);
      file.setSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc end"),bigCount);
    }
  }
  monitor.worked(10);
  if (checkCancel(monitor)) {
    return null;
  }
  PreprocessResult result=null;
  try {
    IFile outputFile=buildFolder.getFile(sketch.getName() + ".java");
    StringWriter stream=new StringWriter();
    result=preproc.write(stream,bigCode.toString(),codeFolderPackages);
    ByteArrayInputStream inStream=new ByteArrayInputStream(stream.toString().getBytes());
    if (outputFile.exists()) {
      outputFile.setContents(inStream,true,false,monitor);
    }
 else {
      outputFile.create(inStream,true,monitor);
    }
    outputFile.setDerived(true,monitor);
  }
 catch (  antlr.RecognitionException re) {
    IResource errorFile=null;
    int errorLine=re.getLine() - 1;
    for (    IResource file : sketch.members()) {
      if (file.getFileExtension() != null && file.getFileExtension().equalsIgnoreCase("pde")) {
        int low=(Integer)file.getSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc start"));
        int high=(Integer)file.getSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc end"));
        if (low <= errorLine && high > errorLine) {
          errorFile=file;
          errorLine-=low;
          break;
        }
      }
    }
    if (errorFile == null) {
      errorFile=sketch;
      errorLine=-1;
    }
    String msg=re.getMessage();
    if (msg.equals("expecting RCURLY, found 'null'"))     msg="Found one too many { characters without a } to match it.";
    if (msg.indexOf("expecting RBRACK") != -1)     msg="Syntax error, maybe a missing right ] character?";
    if (msg.indexOf("expecting SEMI") != -1)     msg="Syntax error, maybe a missing semicolon?";
    if (msg.indexOf("expecting RPAREN") != -1)     msg="Syntax error, maybe a missing right parenthesis?";
    if (msg.indexOf("preproc.web_colors") != -1)     msg="A web color (such as #ffcc00) must be six digits.";
    reportProblem(msg,errorFile,errorLine,true);
    return null;
  }
catch (  antlr.TokenStreamRecognitionException tsre) {
    String mess="^line (\\d+):(\\d+):\\s";
    String[] matches=PApplet.match(tsre.toString(),mess);
    IResource errorFile=null;
    int errorLine=-1;
    if (matches != null) {
      errorLine=Integer.parseInt(matches[1]) - 1;
      for (      IResource file : sketch.members()) {
        if (file.getFileExtension() != null && file.getFileExtension().equalsIgnoreCase("pde")) {
          int low=(Integer)file.getSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc start"));
          int high=(Integer)file.getSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc end"));
          if (low <= errorLine && high > errorLine) {
            errorFile=file;
            errorLine-=low;
            break;
          }
        }
      }
    }
    if (errorFile == null) {
      errorFile=sketch;
      errorLine=-1;
    }
    reportProblem(tsre.getMessage(),errorFile,errorLine,true);
    return null;
  }
catch (  CoreException e) {
    throw e;
  }
catch (  Exception e) {
    ProcessingLog.logError(e);
    return null;
  }
  monitor.worked(10);
  if (checkCancel(monitor)) {
    return null;
  }
  importedLibraries=new ArrayList<File>();
  importToLibraryTable=new HashMap<String,File>();
  addLibraries(sketch.getLocation().removeLastSegments(1).append("libraries/").toFile());
  for (  String item : result.extraImports) {
    int dot=item.lastIndexOf('.');
    String entry=(dot == -1) ? item : item.substring(0,dot);
    File libFolder=importToLibraryTable.get(entry);
    if (libFolder.exists()) {
      importedLibraries.add(libFolder);
      classPath+=Compiler.contentsToClassPath(libFolder);
      libraryPath+=File.pathSeparator + libFolder.getAbsolutePath();
    }
  }
  String javaClassPath=System.getProperty("java.class.path");
  if (javaClassPath.startsWith("\"") && javaClassPath.endsWith("\"")) {
    javaClassPath=javaClassPath.substring(1,javaClassPath.length() - 1);
  }
  classPath+=File.pathSeparator + javaClassPath;
  monitor.worked(10);
  if (checkCancel(monitor)) {
    return null;
  }
  for (  IResource file : sketch.members()) {
    if (file.getFileExtension() != null && file.getFileExtension().equalsIgnoreCase("java")) {
      file.copy(buildFolder.getLocation(),IResource.DERIVED,monitor);
    }
 else     if (file.getFileExtension() != null && file.getFileExtension().equalsIgnoreCase("pde")) {
      file.setSessionProperty(new QualifiedName(ProcessingCore.BUILDER_ID,"preproc start"),result.headerOffset);
    }
  }
  boolean foundMain=preproc.getFoundMain();
  monitor.worked(10);
  if (checkCancel(monitor)) {
    return null;
  }
  return null;
}
