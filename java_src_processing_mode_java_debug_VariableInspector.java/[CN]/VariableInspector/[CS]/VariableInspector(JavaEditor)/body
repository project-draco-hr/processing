{
  editor=je;
  dbg=editor.dbg();
  setUndecorated(true);
  editor.addComponentListener(new ComponentListener(){
    @Override public void componentShown(    ComponentEvent e){
    }
    @Override public void componentResized(    ComponentEvent e){
      updateBounds(e);
    }
    @Override public void componentMoved(    ComponentEvent e){
      updateBounds(e);
    }
    @Override public void componentHidden(    ComponentEvent e){
    }
    private void updateBounds(    ComponentEvent e){
      setBounds(editor.getX() + editor.getWidth(),editor.getY() + VERTICAL_OFFSET,getPreferredSize().width,editor.getHeight() - VERTICAL_OFFSET * 2);
    }
  }
);
  initComponents();
  rootNode=new DefaultMutableTreeNode("root");
  builtins=new DefaultMutableTreeNode("Processing");
  treeModel=new DefaultTreeModel(rootNode);
  model=DefaultOutlineModel.createOutlineModel(treeModel,new VariableRowModel(),true,"Name");
  ExpansionHandler expansionHandler=new ExpansionHandler();
  model.getTreePathSupport().addTreeWillExpandListener(expansionHandler);
  model.getTreePathSupport().addTreeExpansionListener(expansionHandler);
  tree.setModel(model);
  tree.setRootVisible(false);
  tree.setRenderDataProvider(new OutlineRenderer());
  tree.setColumnHidingAllowed(false);
  tree.setAutoscrolls(false);
  TableColumn valueColumn=tree.getColumnModel().getColumn(1);
  valueColumn.setCellRenderer(new ValueCellRenderer());
  valueColumn.setCellEditor(new ValueCellEditor());
  callStack=new ArrayList<DefaultMutableTreeNode>();
  locals=new ArrayList<VariableNode>();
  thisFields=new ArrayList<VariableNode>();
  declaredThisFields=new ArrayList<VariableNode>();
}
