{
  frame=new JDialog(editor,"Preferences",true);
  Container pain=frame.getContentPane();
  pain.setLayout(null);
  int top=GUI_BIG;
  int left=GUI_BIG;
  int right=0;
  JLabel label;
  JButton button, button2;
  JComboBox combo;
  Dimension d, d2, d3;
  int h, v, vmax;
  sketchPromptBox=new JCheckBox("Prompt for name when opening or creating a sketch");
  pain.add(sketchPromptBox);
  d=sketchPromptBox.getPreferredSize();
  sketchPromptBox.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  sketchCleanBox=new JCheckBox("Delete empty sketches on Quit");
  pain.add(sketchCleanBox);
  d=sketchCleanBox.getPreferredSize();
  sketchCleanBox.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  label=new JLabel("Sketchbook location:");
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height;
  sketchbookLocationField=new JTextField(40);
  pain.add(sketchbookLocationField);
  d=sketchbookLocationField.getPreferredSize();
  button=new JButton(PROMPT_BROWSE);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fc=new JFileChooser();
      fc.setSelectedFile(new File(sketchbookLocationField.getText()));
      fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int returned=fc.showOpenDialog(new JDialog());
      if (returned == JFileChooser.APPROVE_OPTION) {
        File file=fc.getSelectedFile();
        sketchbookLocationField.setText(file.getAbsolutePath());
      }
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  vmax=Math.max(d.height,d2.height);
  sketchbookLocationField.setBounds(left,top + (vmax - d.height) / 2,d.width,d.height);
  h=left + d.width + GUI_SMALL;
  button.setBounds(h,top + (vmax - d2.height) / 2,d2.width,d2.height);
  right=Math.max(right,h + d2.width + GUI_BIG);
  top+=vmax + GUI_BETWEEN;
  Container box=Box.createHorizontalBox();
  label=new JLabel("Editor font size: ");
  box.add(label);
  fontSizeField=new JTextField(4);
  box.add(fontSizeField);
  pain.add(box);
  d=box.getPreferredSize();
  box.setBounds(left,top,d.width,d.height);
  Font editorFont=Preferences.getFont("editor.font");
  fontSizeField.setText(String.valueOf(editorFont.getSize()));
  top+=d.height + GUI_BETWEEN;
  externalEditorBox=new JCheckBox("Use external editor");
  pain.add(externalEditorBox);
  d=externalEditorBox.getPreferredSize();
  externalEditorBox.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  checkUpdatesBox=new JCheckBox("Check for updates on startup");
  pain.add(checkUpdatesBox);
  d=checkUpdatesBox.getPreferredSize();
  checkUpdatesBox.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  label=new JLabel("More preferences can be edited directly in the file");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  top+=d.height;
  label=new JLabel(preferencesFile.getAbsolutePath());
  label.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      Base.openURL(preferencesFile.getAbsolutePath());
    }
  }
);
  label.setForeground(new Color(51,25,153));
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width + GUI_BETWEEN+ BUTTON_WIDTH+ GUI_SMALL+ BUTTON_WIDTH);
  button=new JButton(PROMPT_OK);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      applyFrame();
      disposeFrame();
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  BUTTON_HEIGHT=d2.height;
  top-=BUTTON_HEIGHT;
  h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  h+=BUTTON_WIDTH + GUI_SMALL;
  button=new JButton(PROMPT_CANCEL);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      disposeFrame();
    }
  }
);
  pain.add(button);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  top+=BUTTON_HEIGHT + GUI_BETWEEN;
  wide=right + GUI_BIG;
  high=top + GUI_BIG;
  setSize(wide,high);
  frame.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      disposeFrame();
    }
  }
);
  Container content=frame.getContentPane();
  content.setLayout(new BorderLayout());
  content.add(this,BorderLayout.CENTER);
  frame.pack();
  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
  frame.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      KeyStroke wc=Editor.WINDOW_CLOSE_KEYSTROKE;
      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
        disposeFrame();
      }
    }
  }
);
}
