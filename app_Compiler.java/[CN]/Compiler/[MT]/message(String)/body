{
  System.err.println(s);
  if (s.indexOf("Caution") != -1)   return;
  String buildPathSubst=buildPath.replace(File.separatorChar,'/') + "/";
  String partialTempPath=null;
  int partialStartIndex=-1;
  int fileIndex=-1;
  for (int i=0; i < sketch.codeCount; i++) {
    if (sketch.code[i].preprocName == null)     continue;
    partialTempPath=buildPathSubst + sketch.code[i].preprocName;
    partialStartIndex=s.indexOf(partialTempPath);
    if (partialStartIndex != -1) {
      fileIndex=i;
      break;
    }
  }
  if (partialStartIndex != -1) {
    String s1=s.substring(partialStartIndex + partialTempPath.length() + 1);
    int colon=s1.indexOf(':');
    int lineNumber=Integer.parseInt(s1.substring(0,colon));
    if (fileIndex == 0) {
      for (int i=1; i < sketch.codeCount; i++) {
        if (sketch.code[i].flavor == Sketch.PDE) {
          if (sketch.code[i].preprocOffset < lineNumber) {
            fileIndex=i;
          }
        }
      }
      if (fileIndex != 0) {
        lineNumber-=sketch.code[fileIndex].preprocOffset;
      }
    }
    int err=s1.indexOf("Error:");
    if (err != -1) {
      if (firstErrorFound) {
        secondErrorFound=true;
        return;
      }
      firstErrorFound=true;
      String description=s1.substring(err + "Error:".length());
      description=description.trim();
      String hasLoop="The method \"void loop();\" with default access";
      if (description.indexOf(hasLoop) != -1) {
        description="Rename loop() to draw() in Processing 0070 and higher";
      }
      String constructorProblem="No applicable overload was found for a constructor of type";
      if (description.indexOf(constructorProblem) != -1) {
        int nextSentence=description.indexOf("\".") + 3;
        description=description.substring(nextSentence);
      }
      String overloadProblem="No applicable overload";
      if (description.indexOf(overloadProblem) != -1) {
        int nextSentence=description.indexOf("\".") + 3;
        description=description.substring(nextSentence);
      }
      String classpathProblem="You need to modify your classpath";
      if (description.indexOf(classpathProblem) != -1) {
        if (description.indexOf("quicktime/std") != -1) {
          description="To run sketches that use the Processing video library, " + "you must first install QuickTime for Java.";
        }
 else {
          int nextSentence=description.indexOf(". Package") + 2;
          description=description.substring(nextSentence,description.indexOf(':')) + " the code folder or in any libraries.";
        }
      }
      if ((description.indexOf("\";\" inserted " + "to complete BlockStatement") != -1) || (description.indexOf("; expected instead of this token") != -1)) {
        System.err.println(description);
        description="Compiler error, maybe a missing semicolon?";
      }
      exception=new RunnerException(description,fileIndex,lineNumber - 1,-1);
    }
 else {
      System.err.println("i suck: " + s);
    }
  }
 else {
    if (!secondErrorFound) {
      System.err.println(s);
    }
  }
}
