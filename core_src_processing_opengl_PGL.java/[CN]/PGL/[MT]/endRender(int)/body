{
  if (fboLayerEnabled) {
    syncBackTexture();
    bindFramebufferImpl(FRAMEBUFFER,0);
    if (presentMode) {
      float wa=((windowColor >> 24) & 0xff) / 255.0f;
      float wr=((windowColor >> 16) & 0xff) / 255.0f;
      float wg=((windowColor >> 8) & 0xff) / 255.0f;
      float wb=(windowColor & 0xff) / 255.0f;
      clearDepth(1);
      clearColor(wr,wg,wb,wa);
      clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);
      if (showStopButton) {
        if (closeButtonTex == null) {
          closeButtonTex=allocateIntBuffer(1);
          genTextures(1,closeButtonTex);
          bindTexture(TEXTURE_2D,closeButtonTex.get(0));
          texParameteri(TEXTURE_2D,TEXTURE_MIN_FILTER,NEAREST);
          texParameteri(TEXTURE_2D,TEXTURE_MAG_FILTER,NEAREST);
          texParameteri(TEXTURE_2D,TEXTURE_WRAP_S,CLAMP_TO_EDGE);
          texParameteri(TEXTURE_2D,TEXTURE_WRAP_T,CLAMP_TO_EDGE);
          texImage2D(TEXTURE_2D,0,RGBA,stopButtonWidth,stopButtonHeight,0,RGBA,UNSIGNED_BYTE,null);
          int[] color=new int[closeButtonPix.length];
          PApplet.arrayCopy(closeButtonPix,color);
          float ba=((stopButtonColor >> 24) & 0xFF) / 255f;
          float br=((stopButtonColor >> 16) & 0xFF) / 255f;
          float bg=((stopButtonColor >> 8) & 0xFF) / 255f;
          float bb=((stopButtonColor >> 0) & 0xFF) / 255f;
          for (int i=0; i < color.length; i++) {
            int c=closeButtonPix[i];
            int a=(int)(ba * ((c >> 24) & 0xFF));
            int r=(int)(br * ((c >> 16) & 0xFF));
            int g=(int)(bg * ((c >> 8) & 0xFF));
            int b=(int)(bb * ((c >> 0) & 0xFF));
            color[i]=javaToNativeARGB((a << 24) | (r << 16) | (g << 8)| b);
          }
          IntBuffer buf=allocateIntBuffer(color);
          copyToTexture(TEXTURE_2D,RGBA,closeButtonTex.get(0),0,0,stopButtonWidth,stopButtonHeight,buf);
          bindTexture(TEXTURE_2D,0);
        }
        drawTexture(TEXTURE_2D,closeButtonTex.get(0),stopButtonWidth,stopButtonHeight,0,0,stopButtonX + stopButtonWidth,closeButtonY + stopButtonHeight,0,stopButtonHeight,stopButtonWidth,0,stopButtonX,closeButtonY,stopButtonX + stopButtonWidth,closeButtonY + stopButtonHeight);
      }
    }
 else {
      clearDepth(1);
      clearColor(0,0,0,0);
      clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);
    }
    disable(BLEND);
    int x=0;
    int y=0;
    if (presentMode) {
      x=(int)presentX;
      y=(int)presentY;
    }
    float scale=getPixelScale();
    drawTexture(TEXTURE_2D,glColorTex.get(backTex),fboWidth,fboHeight,x,y,graphics.width,graphics.height,0,0,(int)(scale * graphics.width),(int)(scale * graphics.height),0,0,graphics.width,graphics.height);
    int temp=frontTex;
    frontTex=backTex;
    backTex=temp;
    if (fboLayerDisableReq) {
      fboLayerEnabled=false;
      fboLayerDisableReq=false;
    }
  }
 else {
    if (SINGLE_BUFFERED && sketch.frameCount == 0) {
      saveFirstFrame();
    }
    if (!clearColor && 0 < sketch.frameCount || !sketch.isLooping()) {
      enableFBOLayer();
      if (SINGLE_BUFFERED) {
        createFBOLayer();
      }
    }
  }
}
