{
  float scale=graphics.getPixelScale();
  if (hasNpotTexSupport()) {
    fboWidth=(int)(scale * graphics.width);
    fboHeight=(int)(scale * graphics.height);
  }
 else {
    fboWidth=nextPowerOfTwo((int)(scale * graphics.width));
    fboHeight=nextPowerOfTwo((int)(scale * graphics.height));
  }
  int maxs=maxSamples();
  if (hasFboMultisampleSupport() && 1 < maxs) {
    numSamples=PApplet.min(reqNumSamples,maxs);
  }
 else {
    numSamples=1;
  }
  boolean multisample=1 < numSamples;
  boolean packed=hasPackedDepthStencilSupport();
  int depthBits=PApplet.min(REQUESTED_DEPTH_BITS,getDepthBits());
  int stencilBits=PApplet.min(REQUESTED_STENCIL_BITS,getStencilBits());
  genTextures(2,glColorTex);
  for (int i=0; i < 2; i++) {
    bindTexture(TEXTURE_2D,glColorTex.get(i));
    texParameteri(TEXTURE_2D,TEXTURE_MIN_FILTER,NEAREST);
    texParameteri(TEXTURE_2D,TEXTURE_MAG_FILTER,NEAREST);
    texParameteri(TEXTURE_2D,TEXTURE_WRAP_S,CLAMP_TO_EDGE);
    texParameteri(TEXTURE_2D,TEXTURE_WRAP_T,CLAMP_TO_EDGE);
    texImage2D(TEXTURE_2D,0,RGBA,fboWidth,fboHeight,0,RGBA,UNSIGNED_BYTE,null);
    initTexture(TEXTURE_2D,RGBA,fboWidth,fboHeight,graphics.backgroundColor);
  }
  bindTexture(TEXTURE_2D,0);
  backTex=0;
  frontTex=1;
  genFramebuffers(1,glColorFbo);
  bindFramebufferImpl(FRAMEBUFFER,glColorFbo.get(0));
  framebufferTexture2D(FRAMEBUFFER,COLOR_ATTACHMENT0,TEXTURE_2D,glColorTex.get(backTex),0);
  if (!multisample || graphics.getHint(PConstants.ENABLE_BUFFER_READING)) {
    createDepthAndStencilBuffer(false,depthBits,stencilBits,packed);
  }
  if (multisample) {
    genFramebuffers(1,glMultiFbo);
    bindFramebufferImpl(FRAMEBUFFER,glMultiFbo.get(0));
    genRenderbuffers(1,glMultiColor);
    bindRenderbuffer(RENDERBUFFER,glMultiColor.get(0));
    renderbufferStorageMultisample(RENDERBUFFER,numSamples,RGBA8,fboWidth,fboHeight);
    framebufferRenderbuffer(FRAMEBUFFER,COLOR_ATTACHMENT0,RENDERBUFFER,glMultiColor.get(0));
    createDepthAndStencilBuffer(true,depthBits,stencilBits,packed);
  }
  validateFramebuffer();
  clearDepth(1);
  clearStencil(0);
  int argb=graphics.backgroundColor;
  float a=((argb >> 24) & 0xff) / 255.0f;
  float r=((argb >> 16) & 0xff) / 255.0f;
  float g=((argb >> 8) & 0xff) / 255.0f;
  float b=((argb) & 0xff) / 255.0f;
  clearColor(r,g,b,a);
  clear(DEPTH_BUFFER_BIT | STENCIL_BUFFER_BIT | COLOR_BUFFER_BIT);
  bindFramebufferImpl(FRAMEBUFFER,0);
  if (0 < sketch.frameCount) {
    if (pclearColor || 0 < pgeomCount || !sketch.isLooping()) {
      readBuffer(FRONT);
    }
 else {
      readBuffer(BACK);
    }
    bindFramebufferImpl(DRAW_FRAMEBUFFER,glColorFbo.get(0));
    framebufferTexture2D(FRAMEBUFFER,COLOR_ATTACHMENT0,TEXTURE_2D,glColorTex.get(frontTex),0);
    drawBuffer(COLOR_ATTACHMENT0);
    blitFramebuffer(0,0,fboWidth,fboHeight,0,0,fboWidth,fboHeight,COLOR_BUFFER_BIT,NEAREST);
    readBuffer(BACK);
    bindFramebufferImpl(DRAW_FRAMEBUFFER,glColorFbo.get(0));
    framebufferTexture2D(FRAMEBUFFER,COLOR_ATTACHMENT0,TEXTURE_2D,glColorTex.get(backTex),0);
    drawBuffer(COLOR_ATTACHMENT0);
    blitFramebuffer(0,0,fboWidth,fboHeight,0,0,fboWidth,fboHeight,COLOR_BUFFER_BIT,NEAREST);
    bindFramebufferImpl(FRAMEBUFFER,0);
  }
  fboLayerCreated=true;
}
