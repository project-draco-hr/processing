{
  PGL ppgl=initTex2DShader();
  if (0 < ppgl.tex2DShaderProgram) {
    boolean depthTest=getDepthTest();
    disable(DEPTH_TEST);
    boolean depthMask=getDepthWriteMask();
    depthMask(false);
    viewBuffer.rewind();
    getIntegerv(VIEWPORT,viewBuffer);
    viewport((int)offsetX,(int)offsetY,scrW,scrH);
    useProgram(ppgl.tex2DShaderProgram);
    enableVertexAttribArray(ppgl.tex2DVertLoc);
    enableVertexAttribArray(ppgl.tex2DTCoordLoc);
    texCoords[0]=2 * (float)scrX0 / scrW - 1;
    texCoords[1]=2 * (float)scrY0 / scrH - 1;
    texCoords[2]=(float)texX0 / texW;
    texCoords[3]=(float)texY0 / texH;
    texCoords[4]=2 * (float)scrX1 / scrW - 1;
    texCoords[5]=2 * (float)scrY0 / scrH - 1;
    texCoords[6]=(float)texX1 / texW;
    texCoords[7]=(float)texY0 / texH;
    texCoords[8]=2 * (float)scrX0 / scrW - 1;
    texCoords[9]=2 * (float)scrY1 / scrH - 1;
    texCoords[10]=(float)texX0 / texW;
    texCoords[11]=(float)texY1 / texH;
    texCoords[12]=2 * (float)scrX1 / scrW - 1;
    texCoords[13]=2 * (float)scrY1 / scrH - 1;
    texCoords[14]=(float)texX1 / texW;
    texCoords[15]=(float)texY1 / texH;
    texData.rewind();
    texData.put(texCoords);
    activeTexture(TEXTURE0);
    boolean enabledTex=false;
    if (!texturingIsEnabled(TEXTURE_2D)) {
      enableTexturing(TEXTURE_2D);
      enabledTex=true;
    }
    bindTexture(TEXTURE_2D,id);
    uniform1i(ppgl.tex2DSamplerLoc,0);
    texData.position(0);
    bindBuffer(ARRAY_BUFFER,ppgl.tex2DGeoVBO);
    bufferData(ARRAY_BUFFER,16 * SIZEOF_FLOAT,texData,STATIC_DRAW);
    vertexAttribPointer(ppgl.tex2DVertLoc,2,FLOAT,false,4 * SIZEOF_FLOAT,0);
    vertexAttribPointer(ppgl.tex2DTCoordLoc,2,FLOAT,false,4 * SIZEOF_FLOAT,2 * SIZEOF_FLOAT);
    drawArrays(TRIANGLE_STRIP,0,4);
    bindBuffer(ARRAY_BUFFER,0);
    bindTexture(TEXTURE_2D,0);
    if (enabledTex) {
      disableTexturing(TEXTURE_2D);
    }
    disableVertexAttribArray(ppgl.tex2DVertLoc);
    disableVertexAttribArray(ppgl.tex2DTCoordLoc);
    useProgram(0);
    if (depthTest) {
      enable(DEPTH_TEST);
    }
 else {
      disable(DEPTH_TEST);
    }
    depthMask(depthMask);
    viewport(viewBuffer.get(0),viewBuffer.get(1),viewBuffer.get(2),viewBuffer.get(3));
  }
}
