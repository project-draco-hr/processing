{
  if (canvas != null) {
    keyPoller.requestStop();
    mousePoller.requestStop();
    try {
      Display.setParent(null);
    }
 catch (    LWJGLException e) {
      e.printStackTrace();
    }
    Display.destroy();
    pg.parent.remove(canvas);
  }
  canvas=new Canvas();
  canvas.setFocusable(true);
  canvas.requestFocus();
  canvas.setBackground(new Color(pg.backgroundColor,true));
  canvas.setBounds(0,0,pg.parent.width,pg.parent.height);
  pg.parent.setLayout(new BorderLayout());
  pg.parent.add(canvas,BorderLayout.CENTER);
  try {
    DisplayMode[] modes=Display.getAvailableDisplayModes();
    int bpp=0;
    for (int i=0; i < modes.length; i++) {
      bpp=PApplet.max(modes[i].getBitsPerPixel(),bpp);
    }
    PixelFormat format;
    if (USE_FBOLAYER_BY_DEFAULT) {
      format=new PixelFormat(bpp,REQUESTED_ALPHA_BITS,REQUESTED_DEPTH_BITS,REQUESTED_STENCIL_BITS,1);
      reqNumSamples=qualityToSamples(antialias);
      fboLayerRequested=true;
    }
 else {
      format=new PixelFormat(bpp,REQUESTED_ALPHA_BITS,REQUESTED_DEPTH_BITS,REQUESTED_STENCIL_BITS,antialias);
      fboLayerRequested=false;
    }
    Display.setDisplayMode(new DisplayMode(pg.parent.width,pg.parent.height));
    int argb=pg.backgroundColor;
    float r=((argb >> 16) & 0xff) / 255.0f;
    float g=((argb >> 8) & 0xff) / 255.0f;
    float b=((argb) & 0xff) / 255.0f;
    Display.setInitialBackground(r,g,b);
    Display.setParent(canvas);
    Display.create(format);
  }
 catch (  LWJGLException e) {
    e.printStackTrace();
  }
  glContext=Display.getDrawable().hashCode();
  registerListeners();
  fboLayerCreated=false;
  fboLayerInUse=false;
  firstFrame=true;
  setFps=false;
}
