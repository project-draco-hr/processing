{
  Map<String,String> settings;
  if (compilerSettings == null) {
    settings=new HashMap<>();
    settings.put(CompilerOptions.OPTION_LineNumberAttribute,CompilerOptions.GENERATE);
    settings.put(CompilerOptions.OPTION_SourceFileAttribute,CompilerOptions.GENERATE);
    settings.put(CompilerOptions.OPTION_Source,CompilerOptions.VERSION_1_6);
    settings.put(CompilerOptions.OPTION_SuppressWarnings,CompilerOptions.DISABLED);
  }
 else {
    settings=compilerSettings;
  }
  CompileRequestorImpl requestor=new CompileRequestorImpl();
  Compiler compiler=new Compiler(new NameEnvironmentImpl(unit),DefaultErrorHandlingPolicies.proceedWithAllProblems(),new CompilerOptions(settings),requestor,new DefaultProblemFactory(Locale.getDefault()));
  compiler.compile(new ICompilationUnit[]{unit});
  List<IProblem> problems=requestor.getProblems();
  prob=new IProblem[problems.size()];
  int count=0;
  for (Iterator<IProblem> it=problems.iterator(); it.hasNext(); ) {
    IProblem problem=it.next();
    prob[count++]=problem;
  }
}
