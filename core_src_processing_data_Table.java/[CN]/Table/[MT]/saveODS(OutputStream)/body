{
  ZipOutputStream zos=new ZipOutputStream(os);
  final String xmlHeader="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
  ZipEntry entry=new ZipEntry("META-INF/manifest.xml");
  String[] lines=new String[]{xmlHeader,"<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\">","  <manifest:file-entry manifest:media-type=\"application/vnd.oasis.opendocument.spreadsheet\" manifest:version=\"1.2\" manifest:full-path=\"/\"/>","  <manifest:file-entry manifest:media-type=\"text/xml\" manifest:full-path=\"content.xml\"/>","  <manifest:file-entry manifest:media-type=\"text/xml\" manifest:full-path=\"styles.xml\"/>","  <manifest:file-entry manifest:media-type=\"text/xml\" manifest:full-path=\"meta.xml\"/>","  <manifest:file-entry manifest:media-type=\"text/xml\" manifest:full-path=\"settings.xml\"/>","</manifest:manifest>"};
  zos.putNextEntry(entry);
  zos.write(PApplet.join(lines,"\n").getBytes());
  zos.closeEntry();
  final String[] dummyFiles=new String[]{"meta.xml","settings.xml","styles.xml"};
  lines=new String[]{xmlHeader,"<office:document-meta office:version=\"1.0\"" + " xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" />"};
  byte[] dummyBytes=PApplet.join(lines,"\n").getBytes();
  for (  String filename : dummyFiles) {
    entry=new ZipEntry(filename);
    zos.putNextEntry(entry);
    zos.write(dummyBytes);
    zos.closeEntry();
  }
  entry=new ZipEntry("mimetype");
  zos.putNextEntry(entry);
  zos.write("application/vnd.oasis.opendocument.spreadsheet".getBytes());
  zos.closeEntry();
  entry=new ZipEntry("content.xml");
  zos.putNextEntry(entry);
  writeUTF(zos,new String[]{xmlHeader,"<office:document-content" + " xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\"" + " xmlns:text=\"urn:oasis:names:tc:opendocument:xmlns:text:1.0\""+ " xmlns:table=\"urn:oasis:names:tc:opendocument:xmlns:table:1.0\""+ " office:version=\"1.2\">","  <office:body>","    <office:spreadsheet>","      <table:table table:name=\"Sheet1\" table:print=\"false\">"});
  byte[] rowStart="        <table:table-row>\n".getBytes();
  byte[] rowStop="        </table:table-row>\n".getBytes();
  if (hasColumnTitles()) {
    zos.write(rowStart);
    for (int i=0; i < getColumnCount(); i++) {
      saveStringODS(zos,columnTitles[i]);
    }
    zos.write(rowStop);
  }
  for (  TableRow row : rows()) {
    zos.write(rowStart);
    for (int i=0; i < getColumnCount(); i++) {
      if (columnTypes[i] == STRING || columnTypes[i] == CATEGORY) {
        saveStringODS(zos,row.getString(i));
      }
 else {
        saveNumberODS(zos,row.getString(i));
      }
    }
    zos.write(rowStop);
  }
  writeUTF(zos,new String[]{"      </table:table>","    </office:spreadsheet>","  </office:body>","</office:document-content>"});
  zos.closeEntry();
  zos.flush();
  zos.close();
}
