{
  return new Iterator<TableRow>(){
    boolean already;
    public boolean hasNext(){
      already=true;
      try {
        return rs.next();
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
    public TableRow next(){
      if (!already) {
        try {
          rs.next();
        }
 catch (        SQLException e) {
          throw new RuntimeException(e);
        }
      }
 else {
        already=false;
      }
      return new TableRow(){
        public double getDouble(        int column){
          try {
            return rs.getDouble(column);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public double getDouble(        String columnName){
          try {
            return rs.getDouble(columnName);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public float getFloat(        int column){
          try {
            return rs.getFloat(column);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public float getFloat(        String columnName){
          try {
            return rs.getFloat(columnName);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public int getInt(        int column){
          try {
            return rs.getInt(column);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public int getInt(        String columnName){
          try {
            return rs.getInt(columnName);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public long getLong(        int column){
          try {
            return rs.getLong(column);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public long getLong(        String columnName){
          try {
            return rs.getLong(columnName);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public String getString(        int column){
          try {
            return rs.getString(column);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public String getString(        String columnName){
          try {
            return rs.getString(columnName);
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
        public void setString(        int column,        String value){
          immutable();
        }
        public void setString(        String columnName,        String value){
          immutable();
        }
        public void setInt(        int column,        int value){
          immutable();
        }
        public void setInt(        String columnName,        int value){
          immutable();
        }
        public void setLong(        int column,        long value){
          immutable();
        }
        public void setLong(        String columnName,        long value){
          immutable();
        }
        public void setFloat(        int column,        float value){
          immutable();
        }
        public void setFloat(        String columnName,        float value){
          immutable();
        }
        public void setDouble(        int column,        double value){
          immutable();
        }
        public void setDouble(        String columnName,        double value){
          immutable();
        }
        private void immutable(){
          throw new IllegalArgumentException("This TableRow cannot be modified.");
        }
        public int getColumnCount(){
          try {
            return rs.getMetaData().getColumnCount();
          }
 catch (          SQLException e) {
            e.printStackTrace();
            return -1;
          }
        }
      }
;
    }
    public void remove(){
      throw new IllegalArgumentException("remove() not supported");
    }
  }
;
}
