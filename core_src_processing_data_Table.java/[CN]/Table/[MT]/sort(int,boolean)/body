{
  final int[] order=IntList.fromRange(getRowCount()).array();
  Sort s=new Sort(){
    @Override public int size(){
      return getRowCount();
    }
    @Override public float compare(    int index1,    int index2){
      int a=reverse ? order[index2] : order[index1];
      int b=reverse ? order[index1] : order[index2];
switch (getColumnType(column)) {
case INT:
        return getInt(a,column) - getInt(b,column);
case LONG:
      return getLong(a,column) - getLong(b,column);
case FLOAT:
    return getFloat(a,column) - getFloat(b,column);
case DOUBLE:
  return (float)(getDouble(a,column) - getDouble(b,column));
case STRING:
return getString(a,column).compareToIgnoreCase(getString(b,column));
case CATEGORY:
return getInt(a,column) - getInt(b,column);
default :
throw new IllegalArgumentException("Invalid column type: " + getColumnType(column));
}
}
@Override public void swap(int a,int b){
int temp=order[a];
order[a]=order[b];
order[b]=temp;
}
}
;
s.run();
for (int col=0; col < getColumnCount(); col++) {
switch (getColumnType(col)) {
case INT:
case CATEGORY:
int[] oldInt=(int[])columns[col];
int[] newInt=new int[rowCount];
for (int row=0; row < getRowCount(); row++) {
newInt[row]=oldInt[order[row]];
}
columns[col]=newInt;
break;
case LONG:
long[] oldLong=(long[])columns[col];
long[] newLong=new long[rowCount];
for (int row=0; row < getRowCount(); row++) {
newLong[row]=oldLong[order[row]];
}
columns[col]=newLong;
break;
case FLOAT:
float[] oldFloat=(float[])columns[col];
float[] newFloat=new float[rowCount];
for (int row=0; row < getRowCount(); row++) {
newFloat[row]=oldFloat[order[row]];
}
columns[col]=newFloat;
break;
case DOUBLE:
double[] oldDouble=(double[])columns[col];
double[] newDouble=new double[rowCount];
for (int row=0; row < getRowCount(); row++) {
newDouble[row]=oldDouble[order[row]];
}
columns[col]=newDouble;
break;
case STRING:
String[] oldString=(String[])columns[col];
String[] newString=new String[rowCount];
for (int row=0; row < getRowCount(); row++) {
newString[row]=oldString[order[row]];
}
columns[col]=newString;
break;
}
}
}
