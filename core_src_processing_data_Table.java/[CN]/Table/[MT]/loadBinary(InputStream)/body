{
  DataInputStream input=new DataInputStream(new BufferedInputStream(is));
  int magic=input.readInt();
  if (magic != 0x9007AB1E) {
    throw new IOException("Not a compatible binary table (magic was " + PApplet.hex(magic) + ")");
  }
  int rowCount=input.readInt();
  setRowCount(rowCount);
  int columnCount=input.readInt();
  setColumnCount(columnCount);
  boolean hasTitles=input.readBoolean();
  if (hasTitles) {
    columnTitles=new String[getColumnCount()];
    for (int i=0; i < columnCount; i++) {
      setColumnTitle(i,input.readUTF());
    }
  }
  for (int column=0; column < columnCount; column++) {
    int newType=input.readInt();
    columnTypes[column]=newType;
switch (newType) {
case INT:
      columns[column]=new int[rowCount];
    break;
case LONG:
  columns[column]=new long[rowCount];
;
break;
case FLOAT:
columns[column]=new float[rowCount];
;
break;
case DOUBLE:
columns[column]=new double[rowCount];
;
break;
case STRING:
columns[column]=new String[rowCount];
;
break;
case CATEGORY:
columns[column]=new int[rowCount];
;
break;
default :
throw new IllegalArgumentException(newType + " is not a valid column type.");
}
}
for (int i=0; i < columnCount; i++) {
if (columnTypes[i] == CATEGORY) {
columnCategories[i]=new HashMapBlows(input);
}
}
if (input.readBoolean()) {
missingString=input.readUTF();
}
 else {
missingString=null;
}
missingInt=input.readInt();
missingLong=input.readLong();
missingFloat=input.readFloat();
missingDouble=input.readDouble();
missingCategory=input.readInt();
for (int row=0; row < rowCount; row++) {
for (int col=0; col < columnCount; col++) {
switch (columnTypes[col]) {
case STRING:
String str=null;
if (input.readBoolean()) {
str=input.readUTF();
}
setString(row,col,str);
break;
case INT:
setInt(row,col,input.readInt());
break;
case LONG:
setLong(row,col,input.readLong());
break;
case FLOAT:
setFloat(row,col,input.readFloat());
break;
case DOUBLE:
setDouble(row,col,input.readDouble());
break;
case CATEGORY:
int index=input.readInt();
setInt(row,col,index);
break;
}
}
}
input.close();
}
