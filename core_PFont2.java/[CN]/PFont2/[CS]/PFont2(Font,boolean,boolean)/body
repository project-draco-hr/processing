{
  this.charCount=all ? 65536 : charset.length;
  this.mbox=font.getSize();
  fwidth=fheight=mbox;
  PImage bitmaps[]=new PImage[charCount];
  value=new int[charCount];
  height=new int[charCount];
  width=new int[charCount];
  setWidth=new int[charCount];
  topExtent=new int[charCount];
  leftExtent=new int[charCount];
  ascii=new int[128];
  for (int i=0; i < 128; i++)   ascii[i]=-1;
  int mbox3=mbox * 3;
  BufferedImage playground=new BufferedImage(mbox3,mbox3,BufferedImage.TYPE_INT_RGB);
  Graphics2D g=(Graphics2D)playground.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,smooth ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);
  g.setFont(font);
  FontMetrics metrics=g.getFontMetrics();
  int maxWidthHeight=0;
  int index=0;
  for (int i=0; i < charCount; i++) {
    char c=all ? (char)i : charset[i];
    if (!font.canDisplay(c)) {
      continue;
    }
    g.setColor(Color.white);
    g.fillRect(0,0,mbox3,mbox3);
    g.setColor(Color.black);
    g.drawString(String.valueOf(c),mbox,mbox * 2);
    Raster raster=playground.getData();
    int minX=1000, maxX=0;
    int minY=1000, maxY=0;
    boolean pixelFound=false;
    for (int y=0; y < mbox3; y++) {
      for (int x=0; x < mbox3; x++) {
        int sample=raster.getSample(x,y,0);
        if (sample != 255) {
          if (x < minX)           minX=x;
          if (y < minY)           minY=y;
          if (x > maxX)           maxX=x;
          if (y > maxY)           maxY=y;
          pixelFound=true;
        }
      }
    }
    if (!pixelFound) {
      minX=minY=0;
      maxX=maxY=0;
    }
    value[index]=c;
    height[index]=(maxY - minY) + 1;
    width[index]=(maxX - minX) + 1;
    setWidth[index]=metrics.charWidth(c);
    if (c < 128)     ascii[c]=index;
    topExtent[index]=mbox * 2 - minY;
    leftExtent[index]=minX - mbox;
    if (c == 'd') {
      ascent=topExtent[index];
    }
    if (c == 'p') {
      descent=-topExtent[index] + height[index];
    }
    if (width[index] > maxWidthHeight)     maxWidthHeight=width[index];
    if (height[index] > maxWidthHeight)     maxWidthHeight=height[index];
    bitmaps[index]=new PImage(new int[width[index] * height[index]],width[index],height[index],ALPHA);
    for (int y=minY; y <= maxY; y++) {
      for (int x=minX; x <= maxX; x++) {
        int value=255 - raster.getSample(x,y,0);
        int pindex=(y - minY) * width[index] + (x - minX);
        bitmaps[index].pixels[pindex]=value;
      }
    }
    index++;
  }
  charCount=index;
  if ((ascent == 0) && (descent == 0)) {
    for (int i=0; i < charCount; i++) {
      char cc=(char)value[i];
      if (Character.isWhitespace(cc) || (cc == '\u00A0') || (cc == '\u2007')|| (cc == '\u202F')) {
        continue;
      }
      if (topExtent[i] > ascent) {
        ascent=topExtent[i];
      }
      int d=-topExtent[i] + height[i];
      if (d > descent) {
        descent=d;
      }
    }
  }
  mbox2=(int)Math.pow(2,Math.ceil(Math.log(maxWidthHeight) / Math.log(2)));
  twidth=theight=mbox2;
  images=new PImage[charCount];
  for (int i=0; i < charCount; i++) {
    images[i]=new PImage(new int[mbox2 * mbox2],mbox2,mbox2,ALPHA);
    for (int y=0; y < height[i]; y++) {
      System.arraycopy(bitmaps[i].pixels,y * width[i],images[i].pixels,y * mbox2,width[i]);
    }
    bitmaps[i]=null;
  }
}
