{
  ArrayList<PVector> vertices=new ArrayList<PVector>();
  ArrayList<PVector> normals=new ArrayList<PVector>();
  ArrayList<PVector> textures=new ArrayList<PVector>();
  ArrayList<OBJFace> faces=new ArrayList<OBJFace>();
  ArrayList<OBJMaterial> materials=new ArrayList<OBJMaterial>();
  BufferedReader reader=pg.parent.createReader(filename);
  parseOBJ(pg.parent,reader,vertices,normals,textures,faces,materials);
  int prevColorMode=pg.colorMode;
  float prevColorModeX=pg.colorModeX;
  float prevColorModeY=pg.colorModeY;
  float prevColorModeZ=pg.colorModeZ;
  float prevColorModeA=pg.colorModeA;
  boolean prevStroke=pg.stroke;
  int prevTextureMode=pg.textureMode;
  pg.colorMode(RGB,1);
  pg.stroke=false;
  pg.textureMode=NORMAL;
  PShape root=createShapeImpl(pg.parent,GROUP);
  int mtlIdxCur=-1;
  OBJMaterial mtl=null;
  for (int i=0; i < faces.size(); i++) {
    OBJFace face=faces.get(i);
    if (mtlIdxCur != face.matIdx) {
      mtlIdxCur=PApplet.max(0,face.matIdx);
      mtl=materials.get(mtlIdxCur);
    }
    PShape child;
    if (face.vertIdx.size() == 3) {
      child=createShapeImpl(pg.parent,TRIANGLES);
    }
 else     if (face.vertIdx.size() == 4) {
      child=createShapeImpl(pg.parent,QUADS);
    }
 else {
      child=createShapeImpl(pg.parent,POLYGON);
    }
    child.fill(mtl.kd.x,mtl.kd.y,mtl.kd.z);
    child.ambient(mtl.ka.x,mtl.ka.y,mtl.ka.z);
    child.specular(mtl.ks.x,mtl.ks.y,mtl.ks.z);
    child.shininess(mtl.ns);
    if (mtl.kdMap != null) {
      child.tint(mtl.kd.x,mtl.kd.y,mtl.kd.z,mtl.d);
    }
    for (int j=0; j < face.vertIdx.size(); j++) {
      int vertIdx, normIdx;
      PVector vert, norms;
      vert=norms=null;
      vertIdx=face.vertIdx.get(j).intValue() - 1;
      vert=vertices.get(vertIdx);
      if (j < face.normIdx.size()) {
        normIdx=face.normIdx.get(j).intValue() - 1;
        if (-1 < normIdx) {
          norms=normals.get(normIdx);
        }
      }
      if (mtl != null && mtl.kdMap != null) {
        int texIdx;
        PVector tex=null;
        if (j < face.texIdx.size()) {
          texIdx=face.texIdx.get(j).intValue() - 1;
          if (-1 < texIdx) {
            tex=textures.get(texIdx);
          }
        }
        child.texture(mtl.kdMap);
        if (norms != null) {
          child.normal(norms.x,norms.y,norms.z);
        }
        if (tex != null) {
          child.vertex(vert.x,vert.y,vert.z,tex.x,tex.y);
        }
 else {
          child.vertex(vert.x,vert.y,vert.z);
        }
      }
 else {
        if (norms != null) {
          child.normal(norms.x,norms.y,norms.z);
        }
        child.vertex(vert.x,vert.y,vert.z);
      }
    }
    child.end(CLOSE);
    root.addChild(child);
  }
  pg.colorMode(prevColorMode,prevColorModeX,prevColorModeY,prevColorModeZ,prevColorModeA);
  pg.stroke=prevStroke;
  pg.textureMode=prevTextureMode;
  return root;
}
