{
  final File soundFile=soundFileField.getText().trim().length() == 0 ? null : new File(soundFileField.getText().trim());
  final File imageFolder=imageFolderField.getText().trim().length() == 0 ? null : new File(imageFolderField.getText().trim());
  final String streaming="fastStartCompressed";
  if (soundFile == null && imageFolder == null) {
    JOptionPane.showMessageDialog(this,"<html>You need to specify a folder with<br>image files and/or a sound file.");
    return;
  }
  final double fps;
  try {
    width=Integer.parseInt(widthField.getText());
    height=Integer.parseInt(heightField.getText());
    fps=Double.parseDouble(fpsField.getText());
  }
 catch (  Throwable t) {
    JOptionPane.showMessageDialog(this,"<html>Width, Height and FPS must be numeric.");
    return;
  }
  if (width < 1 || height < 1 || fps < 1) {
    JOptionPane.showMessageDialog(this,"<html>Width, Height and FPS must be greater than zero.");
    return;
  }
  final QuickTimeWriter.VideoFormat videoFormat;
switch (compressionBox.getSelectedIndex()) {
case 0:
    videoFormat=QuickTimeWriter.VideoFormat.RLE;
  break;
case 1:
videoFormat=QuickTimeWriter.VideoFormat.JPG;
break;
case 2:
default :
videoFormat=QuickTimeWriter.VideoFormat.PNG;
break;
}
prefs.put("movie.imageFolder",imageFolderField.getText());
prefs.put("movie.soundFile",soundFileField.getText());
prefs.putInt("movie.width",width);
prefs.putInt("movie.height",height);
prefs.putDouble("movie.fps",fps);
prefs.putInt("movie.compression",compressionBox.getSelectedIndex());
prefs.putBoolean("movie.passThrough",passThroughCheckBox.isSelected());
if (movieFileChooser == null) {
movieFileChooser=new JFileChooser();
if (prefs.get("movie.outputFile",null) != null) {
movieFileChooser.setSelectedFile(new File(prefs.get("movie.outputFile",null)));
}
 else {
if (imageFolderField.getText().length() > 0) {
movieFileChooser.setCurrentDirectory(new File(imageFolderField.getText()).getParentFile());
}
 else if (soundFileField.getText().length() > 0) {
movieFileChooser.setCurrentDirectory(new File(soundFileField.getText()).getParentFile());
}
}
}
if (JFileChooser.APPROVE_OPTION != movieFileChooser.showSaveDialog(this)) {
return;
}
final File movieFile=movieFileChooser.getSelectedFile().getPath().toLowerCase().endsWith(".mov") ? movieFileChooser.getSelectedFile() : new File(movieFileChooser.getSelectedFile().getPath() + ".mov");
prefs.put("movie.outputFile",movieFile.getPath());
createMovieButton.setEnabled(false);
final boolean passThrough=passThroughCheckBox.isSelected();
SwingWorker w=new SwingWorker(){
@Override protected Object doInBackground(){
try {
File[] imgFiles=null;
if (imageFolder != null) {
imgFiles=imageFolder.listFiles(new FileFilter(){
FileSystemView fsv=FileSystemView.getFileSystemView();
public boolean accept(File f){
  return f.isFile() && !fsv.isHiddenFile(f) && !f.getName().equals("Thumbs.db");
}
}
);
Arrays.sort(imgFiles);
}
if (passThrough) {
ImageIcon temp=new ImageIcon(imgFiles[0].getAbsolutePath());
width=temp.getIconWidth();
height=temp.getIconHeight();
}
if (movieFile.exists()) {
movieFile.delete();
}
if (imageFolder != null && soundFile != null) {
writeVideoAndAudio(movieFile,imgFiles,soundFile,width,height,fps,videoFormat,streaming);
}
 else if (imageFolder != null) {
writeVideoOnlyVFR(movieFile,imgFiles,width,height,fps,videoFormat,streaming);
}
 else {
writeAudioOnly(movieFile,soundFile,streaming);
}
return null;
}
 catch (Throwable t) {
return t;
}
}
@Override protected void done(){
Object o;
try {
o=get();
}
 catch (Exception ex) {
o=ex;
}
if (o instanceof Throwable) {
Throwable t=(Throwable)o;
t.printStackTrace();
JOptionPane.showMessageDialog(MovieMaker.this,"<html>Creating the QuickTime Movie failed.<br>" + (t.getMessage() == null ? t.toString() : t.getMessage()),"Sorry",JOptionPane.ERROR_MESSAGE);
}
createMovieButton.setEnabled(true);
}
}
;
w.execute();
}
