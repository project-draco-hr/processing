{
  PApplet sketch=surface.sketch;
  GraphicsDevice displayDevice=null;
  GraphicsEnvironment environment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  int displayNum=sketch.sketchDisplay();
  if (displayNum > 0) {
    GraphicsDevice[] devices=environment.getScreenDevices();
    if (displayNum <= devices.length) {
      displayDevice=devices[displayNum - 1];
    }
 else {
      System.err.format("Display %d does not exist, " + "using the default display instead.%n",displayNum);
      for (int i=0; i < devices.length; i++) {
        System.err.format("Display %d is %s%n",(i + 1),devices[i]);
      }
    }
  }
  if (displayDevice == null) {
    displayDevice=environment.getDefaultScreenDevice();
  }
  boolean fullScreen=sketch.sketchFullScreen();
  boolean spanDisplays=sketch.sketchDisplay() == PConstants.SPAN;
  Rectangle primaryScreenRect=displayDevice.getDefaultConfiguration().getBounds();
  Rectangle screenRect=primaryScreenRect;
  if (fullScreen || spanDisplays) {
    double minX=screenRect.getMinX();
    double maxX=screenRect.getMaxX();
    double minY=screenRect.getMinY();
    double maxY=screenRect.getMaxY();
    if (spanDisplays) {
      for (      GraphicsDevice s : environment.getScreenDevices()) {
        Rectangle bounds=s.getDefaultConfiguration().getBounds();
        minX=Math.min(minX,bounds.getMinX());
        maxX=Math.max(maxX,bounds.getMaxX());
        minY=Math.min(minY,bounds.getMinY());
        maxY=Math.max(maxY,bounds.getMaxY());
      }
    }
    if (minY < 0) {
      System.err.format("FX can't place window at negative Y coordinate " + "[x=%d, y=%d]. Please make sure that your secondary " + "display does not extend above the main display.",(int)minX,(int)minY);
      screenRect=primaryScreenRect;
    }
 else {
      screenRect=new Rectangle((int)minX,(int)minY,(int)(maxX - minX),(int)(maxY - minY));
    }
  }
  sketch.displayWidth=(int)screenRect.getWidth();
  sketch.displayHeight=(int)screenRect.getHeight();
  int sketchWidth=sketch.sketchWidth();
  int sketchHeight=sketch.sketchHeight();
  if (fullScreen || spanDisplays) {
    sketchWidth=(int)screenRect.getWidth();
    sketchHeight=(int)screenRect.getHeight();
    stage.initStyle(StageStyle.UNDECORATED);
    stage.setX(screenRect.getMinX());
    stage.setY(screenRect.getMinY());
    stage.setWidth(screenRect.getWidth());
    stage.setHeight(screenRect.getHeight());
  }
  Canvas canvas=surface.canvas;
  surface.fx.context=canvas.getGraphicsContext2D();
  StackPane stackPane=new StackPane();
  stackPane.getChildren().add(canvas);
  canvas.widthProperty().bind(stackPane.widthProperty());
  canvas.heightProperty().bind(stackPane.heightProperty());
  int width=sketchWidth;
  int height=sketchHeight;
  int smooth=sketch.sketchSmooth();
  if ((PApplet.platform == PConstants.MACOSX || PApplet.platform == PConstants.LINUX) && PApplet.javaVersionName.compareTo("1.8.0_60") >= 0) {
    System.err.println("smooth() disabled for JavaFX with this Java version due to Oracle bug");
    System.err.println("https://github.com/processing/processing/issues/3795");
    smooth=0;
  }
  SceneAntialiasing sceneAntialiasing=(smooth == 0) ? SceneAntialiasing.DISABLED : SceneAntialiasing.BALANCED;
  stage.setScene(new Scene(stackPane,width,height,false,sceneAntialiasing));
  surface.stage=stage;
}
