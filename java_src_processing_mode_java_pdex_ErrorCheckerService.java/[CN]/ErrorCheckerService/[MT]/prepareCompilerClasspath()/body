{
  if (!loadCompClass) {
    return;
  }
synchronized (classpathJars) {
    classpathJars=new ArrayList<URL>();
    String entry="";
    boolean codeFolderChecked=false;
    for (    ImportStatement impstat : programImports) {
      String item=impstat.getImportName();
      int dot=item.lastIndexOf('.');
      entry=(dot == -1) ? item : item.substring(0,dot);
      entry=entry.substring(6).trim();
      if (ignorableImport(entry)) {
        continue;
      }
      Library library=null;
      try {
        library=editor.getMode().getLibrary(entry);
        String[] libraryPath=PApplet.split(library.getClassPath().substring(1).trim(),File.pathSeparatorChar);
        for (        String pathItem : libraryPath) {
          classpathJars.add(new File(pathItem).toURI().toURL());
        }
      }
 catch (      Exception e) {
        if (library == null && !codeFolderChecked) {
          if (editor.getSketch().hasCodeFolder()) {
            File codeFolder=editor.getSketch().getCodeFolder();
            String codeFolderClassPath=Util.contentsToClassPath(codeFolder);
            codeFolderChecked=true;
            if (codeFolderClassPath.equalsIgnoreCase("")) {
              System.err.format("Cannot find \"%s\" library. Line %d in tab %s%n",entry,impstat.getLineNumber(),editor.getSketch().getCode(impstat.getTab()).getPrettyName());
              System.err.println("Make sure that the library is installed properly.");
            }
 else {
              String codeFolderPath[]=PApplet.split(codeFolderClassPath.substring(1).trim(),File.pathSeparatorChar);
              try {
                for (                String pathItem : codeFolderPath) {
                  classpathJars.add(new File(pathItem).toURI().toURL());
                }
              }
 catch (              Exception e2) {
                e2.printStackTrace();
              }
            }
          }
 else {
            System.err.format("Cannot find \"%s\" library. Line %d in tab %s%n",entry,impstat.getLineNumber(),editor.getSketch().getCode(impstat.getTab()).getPrettyName());
          }
        }
 else {
          new Exception("Error while handling '" + entry + "'",e).printStackTrace();
        }
      }
    }
  }
  new Thread(new Runnable(){
    public void run(){
      astGenerator.loadJars();
    }
  }
).start();
}
