{
  CodeCheckResult result=new CodeCheckResult();
  StringBuilder rawCode=new StringBuilder();
  List<ImportStatement> coreAndDefaultImports=new ArrayList<>();
  List<ImportStatement> codeFolderImports=new ArrayList<>();
  List<ImportStatement> programImports=new ArrayList<>();
  Sketch sketch=editor.getSketch();
{
    for (    SketchCode sc : sketch.getCode()) {
      if (sc.isExtension("pde")) {
        if (sketch.getCurrentCode().equals(sc)) {
          try {
            rawCode.append(sc.getDocumentText());
          }
 catch (          BadLocationException e) {
            e.printStackTrace();
          }
        }
 else {
          rawCode.append(sc.getProgram());
        }
        rawCode.append('\n');
      }
    }
  }
  String className=sketch.getName();
{
    PdePreprocessor p=editor.createPreprocessor(null);
    String[] defaultImports=p.getDefaultImports();
    String[] coreImports=p.getCoreImports();
    for (    String imp : coreImports) {
      coreAndDefaultImports.add(ImportStatement.parse(imp));
    }
    for (    String imp : defaultImports) {
      coreAndDefaultImports.add(ImportStatement.parse(imp));
    }
  }
{
    if (sketch.hasCodeFolder()) {
      File codeFolder=sketch.getCodeFolder();
      String codeFolderClassPath=Util.contentsToClassPath(codeFolder);
      StringList codeFolderPackages=Util.packageListFromClassPath(codeFolderClassPath);
      for (      String item : codeFolderPackages) {
        codeFolderImports.add(ImportStatement.wholePackage(item));
      }
    }
  }
  SourceUtils.substituteUnicode(rawCode);
  try {
    SourceUtils.scrubCommentsAndStrings(rawCode);
  }
 catch (  RuntimeException e) {
  }
  PdePreprocessor.Mode mode=PdePreprocessor.parseMode(rawCode);
  SourceMapping mapping=new SourceMapping();
  mapping.addAll(SourceUtils.insertImports(coreAndDefaultImports));
  mapping.addAll(SourceUtils.insertImports(codeFolderImports));
  mapping.addAll(SourceUtils.parseProgramImports(rawCode,programImports));
  mapping.addAll(SourceUtils.replaceTypeConstructors(rawCode));
  mapping.addAll(SourceUtils.replaceHexLiterals(rawCode));
  mapping.addAll(SourceUtils.wrapSketch(mode,className,rawCode.length()));
  result.sourceCode=mapping.apply(rawCode);
  List<IProblem> problems;
{
{
      result.syntaxErrors=true;
      result.containsErrors=true;
      parser.setSource(result.sourceCode.toCharArray());
      parser.setKind(ASTParser.K_COMPILATION_UNIT);
      parser.setCompilerOptions(COMPILER_OPTIONS);
      parser.setStatementsRecovery(true);
      result.compilationUnit=(CompilationUnit)parser.createAST(null);
      problems=Arrays.asList(result.compilationUnit.getProblems());
      if (problems.isEmpty()) {
        result.syntaxErrors=false;
        result.containsErrors=false;
      }
 else {
        result.syntaxErrors=true;
        result.containsErrors=true;
      }
    }
  }
  if (problems.isEmpty() && !editor.hasJavaTabs()) {
    SourceMapping mapping2=new SourceMapping();
    mapping2.addAll(SourceUtils.addPublicToTopLeveMethods(result.compilationUnit));
    mapping2.addAll(SourceUtils.replaceColorAndFixFloats(result.compilationUnit));
    result.sourceCode=mapping2.apply(result.sourceCode);
    char[] chars=result.sourceCode.toCharArray();
{
      parser.setSource(chars);
      parser.setKind(ASTParser.K_COMPILATION_UNIT);
      parser.setCompilerOptions(COMPILER_OPTIONS);
      parser.setStatementsRecovery(true);
      result.compilationUnit=(CompilationUnit)parser.createAST(null);
    }
{
{
        boolean importsChanged=true;
        List<String> classPath;
        URLClassLoader classLoader=null;
        if (!importsChanged) {
        }
 else {
          classPath=prepareCompilerClasspath(programImports,sketch);
          List<URL> urls=new ArrayList<>();
          for (          String path : classPath) {
            try {
              urls.add(new File(path).toURI().toURL());
            }
 catch (            MalformedURLException e) {
            }
          }
          URL[] classPathArray=urls.toArray(new URL[urls.size()]);
          classLoader=new URLClassLoader(classPathArray,null);
        }
        try {
          problems=compileAndReturnProblems(className,chars,COMPILER_OPTIONS,classLoader);
        }
 catch (        NoClassDefFoundError e) {
          e.printStackTrace();
        }
      }
    }
  }
  if (problems != null) {
    for (    IProblem problem : problems) {
      if (problem.getMessage().contains("Syntax error, insert \":: IdentifierOrNew\"")) {
        continue;
      }
      int sourceLine=problem.getSourceLineNumber();
      int[] a=calculateTabIndexAndLineNumber(sourceLine);
      Problem p=new Problem(problem,a[0],a[1]);
      if (p.isError()) {
        result.containsErrors=true;
      }
 else       if (p.isWarning() && !JavaMode.warningsEnabled) {
        continue;
      }
      result.problems.add(p);
    }
  }
  return result;
}
