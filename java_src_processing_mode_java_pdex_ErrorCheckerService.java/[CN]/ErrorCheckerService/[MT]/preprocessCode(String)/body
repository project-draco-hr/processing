{
  programImports=new ArrayList<ImportStatement>();
  StringBuilder rawCode=new StringBuilder();
  final Sketch sketch=editor.getSketch();
  try {
    for (    SketchCode sc : sketch.getCode()) {
      if (sc.isExtension("pde")) {
        try {
          if (sketch.getCurrentCode().equals(sc)) {
            rawCode.append(scrapImportStatements(sc.getDocumentText(),sketch.getCodeIndex(sc)));
          }
 else {
            rawCode.append(scrapImportStatements(sc.getProgram(),sketch.getCodeIndex(sc)));
          }
          rawCode.append('\n');
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        rawCode.append('\n');
      }
    }
  }
 catch (  Exception e) {
    Messages.log("Exception in preprocessCode()");
  }
  String sourceAlt=rawCode.toString();
  String dataTypeFunc[]={"int","char","float","boolean","byte"};
  for (  String dataType : dataTypeFunc) {
    String dataTypeRegexp="\\b" + dataType + "\\s*\\(";
    Pattern pattern=Pattern.compile(dataTypeRegexp);
    Matcher matcher=pattern.matcher(sourceAlt);
    sourceAlt=matcher.replaceAll("PApplet.parse" + Character.toUpperCase(dataType.charAt(0)) + dataType.substring(1)+ "(");
  }
  final String webColorRegexp="#{1}[A-F|a-f|0-9]{6}\\W";
  Pattern webPattern=Pattern.compile(webColorRegexp);
  Matcher webMatcher=webPattern.matcher(sourceAlt);
  while (webMatcher.find()) {
    String found=sourceAlt.substring(webMatcher.start(),webMatcher.end());
    sourceAlt=webMatcher.replaceFirst("0xff" + found.substring(1));
    webMatcher=webPattern.matcher(sourceAlt);
  }
  final String colorTypeRegex="color(?![a-zA-Z0-9_])(?=\\[*)(?!(\\s*\\())";
  Pattern colorPattern=Pattern.compile(colorTypeRegex);
  Matcher colorMatcher=colorPattern.matcher(sourceAlt);
  sourceAlt=colorMatcher.replaceAll("int");
  checkForChangedImports();
  className=(editor == null) ? "DefaultClass" : editor.getSketch().getName();
  Matcher matcher=FUNCTION_DECL.matcher(sourceAlt);
  staticMode=!matcher.find();
  StringBuilder sb=new StringBuilder();
  sb.append(xqpreproc.prepareImports(programImports));
  sb.append("public class " + className + " extends PApplet {\n");
  if (staticMode) {
    sb.append("public void setup() {\n");
  }
  sb.append(sourceAlt);
  if (staticMode) {
    sb.append("\nnoLoop();\n}");
  }
  sb.append("\n}");
  sourceAlt=sb.toString();
  int position=sourceAlt.indexOf("{") + 1;
  mainClassOffset=1;
  for (int i=0; i <= position; i++) {
    if (sourceAlt.charAt(i) == '\n') {
      mainClassOffset++;
    }
  }
  if (staticMode) {
    mainClassOffset++;
  }
  sourceAlt=substituteUnicode(sourceAlt);
  sourceCode=sourceAlt;
  return sourceAlt;
}
