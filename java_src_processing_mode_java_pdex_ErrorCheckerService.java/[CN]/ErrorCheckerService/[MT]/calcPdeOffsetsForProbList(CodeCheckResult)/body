{
  try {
    PlainDocument javaSource=new PlainDocument();
    javaSource.insertString(0,codeCheckResult.sourceCode,null);
    List<Document> pdeTabs=new ArrayList<>();
    for (    SketchCode sc : editor.getSketch().getCode()) {
      PlainDocument tab=new PlainDocument();
      if (editor.getSketch().getCurrentCode().equals(sc)) {
        tab.insertString(0,sc.getDocumentText(),null);
      }
 else {
        tab.insertString(0,sc.getProgram(),null);
      }
      pdeTabs.add(tab);
    }
    int pkgNameOffset=("package " + className + ";\n").length();
    if (codeCheckResult.sourceCodeOffset == 0) {
      pkgNameOffset=0;
    }
    for (    Problem p : codeCheckResult.problems) {
      int prbStart=p.getIProblem().getSourceStart() - pkgNameOffset;
      int prbEnd=p.getIProblem().getSourceEnd() - pkgNameOffset;
      int javaLineNumber=p.getSourceLineNumber() - 1;
      javaLineNumber-=codeCheckResult.sourceCodeOffset;
      if (javaLineNumber < 0) {
        javaLineNumber=0;
      }
      Element lineElement=javaSource.getDefaultRootElement().getElement(javaLineNumber);
      if (lineElement == null) {
        Messages.log("calcPDEOffsetsForProbList(): " + "Couldn't fetch Java line number " + javaLineNumber + "\nProblem: "+ p);
        p.setPDEOffsets(-1,-1);
        continue;
      }
      int lineStart=lineElement.getStartOffset();
      int lineLength=lineElement.getEndOffset() - lineStart;
      String javaLine=javaSource.getText(lineStart,lineLength);
      Document doc=pdeTabs.get(p.getTabIndex());
      Element pdeLineElement=doc.getDefaultRootElement().getElement(p.getLineNumber());
      if (pdeLineElement == null) {
        Messages.log("calcPDEOffsetsForProbList(): " + "Couldn't fetch pde line number " + javaLineNumber + "\nProblem: "+ p);
        p.setPDEOffsets(-1,-1);
        continue;
      }
      int pdeLineStart=pdeLineElement.getStartOffset();
      int pdeLineLength=pdeLineElement.getEndOffset() - pdeLineStart;
      String pdeLine=pdeTabs.get(p.getTabIndex()).getText(pdeLineStart,pdeLineLength);
      OffsetMatcher ofm=new OffsetMatcher(pdeLine,javaLine);
      int pdeOffset=ofm.getPdeOffForJavaOff(prbStart - lineStart,prbEnd - prbStart + 1);
      p.setPDEOffsets(pdeOffset,pdeOffset + prbEnd - prbStart);
    }
  }
 catch (  BadLocationException ble) {
    ble.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}
