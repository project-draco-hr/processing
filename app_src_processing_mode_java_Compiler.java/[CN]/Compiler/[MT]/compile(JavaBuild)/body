{
  SketchException exception=null;
  boolean success=false;
  String baseCommand[]=new String[]{"-Xemacs","-source","1.6","-target","1.6","-classpath",build.getClassPath(),"-nowarn","-d",build.getBinFolder().getAbsolutePath()};
  String[] sourceFiles=Base.listFiles(build.getSrcFolder(),false,".java");
  String[] command=PApplet.concat(baseCommand,sourceFiles);
  try {
    final StringBuffer errorBuffer=new StringBuffer();
    Writer internalWriter=new Writer(){
      public void write(      char[] buf,      int off,      int len){
        errorBuffer.append(buf,off,len);
      }
      public void flush(){
      }
      public void close(){
      }
    }
;
    PrintWriter writer=new PrintWriter(internalWriter);
    PrintWriter outWriter=new PrintWriter(System.out);
    ClassLoader loader=build.mode.getClassLoader();
    try {
      Class batchClass=Class.forName("org.eclipse.jdt.core.compiler.batch.BatchCompiler",false,loader);
      Class progressClass=Class.forName("org.eclipse.jdt.core.compiler.CompilationProgress",false,loader);
      Class[] compileArgs=new Class[]{String[].class,PrintWriter.class,PrintWriter.class,progressClass};
      Method compileMethod=batchClass.getMethod("compile",compileArgs);
      success=(Boolean)compileMethod.invoke(null,new Object[]{command,outWriter,writer,null});
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new SketchException("Unknown error inside the compiler.");
    }
    writer.flush();
    writer.close();
    BufferedReader reader=new BufferedReader(new StringReader(errorBuffer.toString()));
    String line=null;
    while ((line=reader.readLine()) != null) {
      String errorFormat="([\\w\\d_]+.java):(\\d+):\\s*(.*):\\s*(.*)\\s*";
      String[] pieces=PApplet.match(line,errorFormat);
      if (pieces == null) {
        exception=new SketchException("Cannot parse error text: " + line);
        exception.hideStackTrace();
        System.err.println(line);
        while ((line=reader.readLine()) != null) {
          System.err.println(line);
        }
        break;
      }
      String dotJavaFilename=pieces[1];
      int dotJavaLineIndex=PApplet.parseInt(pieces[2]) - 1;
      String errorMessage=pieces[4];
      exception=build.placeException(errorMessage,dotJavaFilename,dotJavaLineIndex);
      if (exception == null) {
        exception=new SketchException(errorMessage);
      }
      if (errorMessage.startsWith("The import ") && errorMessage.endsWith("cannot be resolved")) {
        String[] m=PApplet.match(errorMessage,"The import (.*) cannot be resolved");
        if (m != null) {
          if (m[1].equals("processing.xml")) {
            exception.setMessage("processing.xml no longer exists, this code needs to be updated for 2.0.");
            System.err.println("The processing.xml library has been replaced " + "with a new 'XML' class that's built-in.");
            handleCrustyCode();
          }
 else {
            exception.setMessage("The package " + "\u201C" + m[1] + "\u201D"+ " does not exist. "+ "You might be missing a library.");
            System.err.println("Libraries must be " + "installed in a folder named 'libraries' " + "inside the 'sketchbook' folder.");
          }
        }
      }
 else       if (errorMessage.endsWith("cannot be resolved to a type")) {
        String what=errorMessage.substring(0,errorMessage.indexOf(' '));
        if (what.equals("BFont") || what.equals("BGraphics") || what.equals("BImage")) {
          exception.setMessage(what + " has been replaced with P" + what.substring(1));
          handleCrustyCode();
        }
 else {
          exception.setMessage("Cannot find a class or type " + "named \u201C" + what + "\u201D");
        }
      }
 else       if (errorMessage.endsWith("cannot be resolved")) {
        String what=errorMessage.substring(0,errorMessage.indexOf(' '));
        if (what.equals("LINE_LOOP") || what.equals("LINE_STRIP")) {
          exception.setMessage("LINE_LOOP and LINE_STRIP are not available, " + "please update your code.");
          handleCrustyCode();
        }
 else         if (what.equals("framerate")) {
          exception.setMessage("framerate should be changed to frameRate.");
          handleCrustyCode();
        }
 else         if (what.equals("screen")) {
          exception.setMessage("Change screen.width and screen.height to " + "displayWidth and displayHeight.");
          handleCrustyCode();
        }
 else         if (what.equals("screenWidth") || what.equals("screenHeight")) {
          exception.setMessage("Change screenWidth and screenHeight to " + "displayWidth and displayHeight.");
          handleCrustyCode();
        }
 else {
          exception.setMessage("Cannot find anything " + "named \u201C" + what + "\u201D");
        }
      }
 else       if (errorMessage.startsWith("Duplicate")) {
      }
 else {
        String[] parts=null;
        String undefined="The method (\\S+\\(.*\\)) is undefined for the type (.*)";
        parts=PApplet.match(errorMessage,undefined);
        if (parts != null) {
          if (parts[1].equals("framerate(int)")) {
            exception.setMessage("framerate() no longer exists, use frameRate() instead.");
            handleCrustyCode();
          }
 else           if (parts[1].equals("push()")) {
            exception.setMessage("push() no longer exists, use pushMatrix() instead.");
            handleCrustyCode();
          }
 else           if (parts[1].equals("pop()")) {
            exception.setMessage("pop() no longer exists, use popMatrix() instead.");
            handleCrustyCode();
          }
 else {
            String mess="The function " + parts[1] + " does not exist.";
            exception.setMessage(mess);
          }
          break;
        }
      }
      if (exception != null) {
        exception.hideStackTrace();
        break;
      }
    }
  }
 catch (  IOException e) {
    String bigSigh="Error while compiling. (" + e.getMessage() + ")";
    exception=new SketchException(bigSigh);
    e.printStackTrace();
    success=false;
  }
  if (exception != null)   throw exception;
  return success;
}
