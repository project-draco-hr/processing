{
  curveDetail=segments;
  if (curve_basis == null) {
    curve_basis=new float[4][4];
    curve_forward=new float[4][4];
    curve_draw=new float[4][4];
    curve_inited=true;
  }
  float c[][]=curve_basis;
  c[0][0]=s - 1;
  c[0][1]=s + 3;
  c[0][2]=-3 - s;
  c[0][3]=1 - s;
  c[1][0]=2 * (1 - s);
  c[1][1]=-5 - s;
  c[1][2]=2 * (s + 2);
  c[1][3]=s - 1;
  c[2][0]=s - 1;
  c[2][1]=0;
  c[2][2]=1 - s;
  c[2][3]=0;
  c[3][0]=0;
  c[3][1]=2;
  c[3][2]=0;
  c[3][3]=0;
  for (int i=0; i < 4; i++) {
    for (int j=0; j < 4; j++) {
      c[i][j]/=2f;
    }
  }
  setup_spline_forward(segments,curve_forward);
  if (bezierBasisInverse == null) {
    bezierBasisInverse=new PMatrix(bezierBasis).invert();
  }
  curveToBezierMatrix=new PMatrix(c[0][0],c[0][1],c[0][2],c[0][3],c[1][0],c[1][1],c[1][2],c[1][3],c[2][0],c[2][1],c[2][2],c[2][3],c[3][0],c[3][1],c[3][2],c[3][3]);
  curveToBezierMatrix.preApply(bezierBasisInverse);
  mult_spline_matrix(curve_forward,curve_basis,curve_draw,4);
}
