{
  int len=p.length;
  if (kind == POINT) {
    if (is3D() && len != 2 && len != 3) {
      throw new IllegalArgumentException("Use createShape(POINT, x, y) or createShape(POINT, x, y, z)");
    }
 else     if (len != 2) {
      throw new IllegalArgumentException("Use createShape(POINT, x, y)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == LINE) {
    if (is3D() && len != 4 && len != 6) {
      throw new IllegalArgumentException("Use createShape(LINE, x1, y1, x2, y2) or createShape(LINE, x1, y1, z1, x2, y2, z1)");
    }
 else     if (len != 4) {
      throw new IllegalArgumentException("Use createShape(LINE, x1, y1, x2, y2)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == TRIANGLE) {
    if (len != 6) {
      throw new IllegalArgumentException("Use createShape(TRIANGLE, x1, y1, x2, y2, x3, y3)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == QUAD) {
    if (len != 8) {
      throw new IllegalArgumentException("Use createShape(QUAD, x1, y1, x2, y2, x3, y3, x4, y4)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == RECT) {
    if (len != 4 && len != 5 && len != 8 && len != 9) {
      throw new IllegalArgumentException("Wrong number of parameters for createShape(RECT), see the reference");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == ELLIPSE) {
    if (len != 4 && len != 5) {
      throw new IllegalArgumentException("Use createShape(ELLIPSE, x, y, w, h) or createShape(ELLIPSE, x, y, w, h, mode)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == ARC) {
    if (len != 6 && len != 7) {
      throw new IllegalArgumentException("Use createShape(ARC, x, y, w, h, start, stop)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == BOX) {
    if (!is3D()) {
      throw new IllegalArgumentException("createShape(BOX) is not supported in 2D");
    }
 else     if (len != 1 && len != 3) {
      throw new IllegalArgumentException("Use createShape(BOX, size) or createShape(BOX, width, height, depth)");
    }
    return createShapePrimitive(kind,p);
  }
 else   if (kind == SPHERE) {
    if (!is3D()) {
      throw new IllegalArgumentException("createShape(SPHERE) is not supported in 2D");
    }
 else     if (len != 1) {
      throw new IllegalArgumentException("Use createShape(SPHERE, radius)");
    }
    return createShapePrimitive(kind,p);
  }
  throw new IllegalArgumentException("Unknown shape type passed to createShape()");
}
