{
  float x1=splineVertices[offset + 0][MX];
  float x2=splineVertices[offset + 1][MX];
  float x3=splineVertices[offset + 2][MX];
  float x4=splineVertices[offset + 3][MX];
  float x0=splineVertices[start][MX];
  float y1=splineVertices[offset + 0][MY];
  float y2=splineVertices[offset + 1][MY];
  float y3=splineVertices[offset + 2][MY];
  float y4=splineVertices[offset + 3][MY];
  float y0=splineVertices[start][MY];
  float xplot1=m[1][0] * x1 + m[1][1] * x2 + m[1][2] * x3 + m[1][3] * x4;
  float xplot2=m[2][0] * x1 + m[2][1] * x2 + m[2][2] * x3 + m[2][3] * x4;
  float xplot3=m[3][0] * x1 + m[3][1] * x2 + m[3][2] * x3 + m[3][3] * x4;
  float yplot1=m[1][0] * y1 + m[1][1] * y2 + m[1][2] * y3 + m[1][3] * y4;
  float yplot2=m[2][0] * y1 + m[2][1] * y2 + m[2][2] * y3 + m[2][3] * y4;
  float yplot3=m[3][0] * y1 + m[3][1] * y2 + m[3][2] * y3 + m[3][3] * y4;
  int cvertexSaved=splineVertexCount;
  if (dimensions == 3) {
    float z1=splineVertices[offset + 0][MZ];
    float z2=splineVertices[offset + 1][MZ];
    float z3=splineVertices[offset + 2][MZ];
    float z4=splineVertices[offset + 3][MZ];
    float z0=splineVertices[start][MZ];
    float zplot1=m[1][0] * z1 + m[1][1] * z2 + m[1][2] * z3 + m[1][3] * z4;
    float zplot2=m[2][0] * z1 + m[2][1] * z2 + m[2][2] * z3 + m[2][3] * z4;
    float zplot3=m[3][0] * z1 + m[3][1] * z2 + m[3][2] * z3 + m[3][3] * z4;
    vertex(x0,y0,z0);
    for (int j=0; j < segments; j++) {
      x0+=xplot1;
      xplot1+=xplot2;
      xplot2+=xplot3;
      y0+=yplot1;
      yplot1+=yplot2;
      yplot2+=yplot3;
      z0+=zplot1;
      zplot1+=zplot2;
      zplot2+=zplot3;
      vertex(x0,y0,z0);
    }
  }
 else {
    vertex(x0,y0);
    for (int j=0; j < segments; j++) {
      x0+=xplot1;
      xplot1+=xplot2;
      xplot2+=xplot3;
      y0+=yplot1;
      yplot1+=yplot2;
      yplot2+=yplot3;
      vertex(x0,y0);
    }
  }
  splineVertexCount=cvertexSaved;
}
