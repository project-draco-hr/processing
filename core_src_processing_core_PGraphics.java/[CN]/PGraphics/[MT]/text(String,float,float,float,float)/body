{
  if (textFont == null) {
    throw new RuntimeException("use textFont() before text()");
  }
  if (textMode == SCREEN)   loadPixels();
  float hradius, vradius;
switch (rectMode) {
case CORNER:
    x2+=x1;
  y2+=y1;
break;
case RADIUS:
hradius=x2;
vradius=y2;
x2=x1 + hradius;
y2=y1 + vradius;
x1-=hradius;
y1-=vradius;
break;
case CENTER:
hradius=x2 / 2.0f;
vradius=y2 / 2.0f;
x2=x1 + hradius;
y2=y1 + vradius;
x1-=hradius;
y1-=vradius;
}
if (x2 < x1) {
float temp=x1;
x1=x2;
x2=temp;
}
if (y2 < y1) {
float temp=y1;
y1=y2;
y2=temp;
}
float currentY=y1;
float boxWidth=x2 - x1;
float lineX=x1;
if (textAlign == CENTER) {
lineX=lineX + boxWidth / 2f;
}
 else if (textAlign == RIGHT) {
lineX=x2;
}
currentY+=textAscent();
if (currentY > y2) return;
float spaceWidth=textWidth(' ');
int length=str.length();
if (length + 1 > textBuffer.length) {
textBuffer=new char[length + 1];
textBreakBuffer=new int[length + 1];
}
str.getChars(0,length,textBuffer,0);
textBuffer[length++]='\n';
int sentenceStart=0;
for (int i=0; i < length; i++) {
if (textBuffer[i] == '\n') {
currentY=textSentence(textBuffer,sentenceStart,i,lineX,boxWidth,currentY,y2,spaceWidth);
if (Float.isNaN(currentY)) break;
if (currentY > y2) break;
sentenceStart=i + 1;
}
}
if (textMode == SCREEN) updatePixels();
}
