{
  float x1=splineVertices[offset + 0][X];
  float x2=splineVertices[offset + 1][X];
  float x3=splineVertices[offset + 2][X];
  float x4=splineVertices[offset + 3][X];
  float x0=splineVertices[start][X];
  float y1=splineVertices[offset + 0][Y];
  float y2=splineVertices[offset + 1][Y];
  float y3=splineVertices[offset + 2][Y];
  float y4=splineVertices[offset + 3][Y];
  float y0=splineVertices[start][Y];
  float xplot1=basis.m10 * x1 + basis.m11 * x2 + basis.m12 * x3 + basis.m13 * x4;
  float xplot2=basis.m20 * x1 + basis.m21 * x2 + basis.m22 * x3 + basis.m23 * x4;
  float xplot3=basis.m30 * x1 + basis.m31 * x2 + basis.m32 * x3 + basis.m33 * x4;
  float yplot1=basis.m10 * y1 + basis.m11 * y2 + basis.m12 * y3 + basis.m13 * y4;
  float yplot2=basis.m20 * y1 + basis.m21 * y2 + basis.m22 * y3 + basis.m23 * y4;
  float yplot3=basis.m30 * y1 + basis.m31 * y2 + basis.m32 * y3 + basis.m33 * y4;
  int cvertexSaved=splineVertexCount;
  if (dimensions == 3) {
    float z1=splineVertices[offset + 0][Z];
    float z2=splineVertices[offset + 1][Z];
    float z3=splineVertices[offset + 2][Z];
    float z4=splineVertices[offset + 3][Z];
    float z0=splineVertices[start][Z];
    float zplot1=basis.m10 * z1 + basis.m11 * z2 + basis.m12 * z3 + basis.m13 * z4;
    float zplot2=basis.m20 * z1 + basis.m21 * z2 + basis.m22 * z3 + basis.m23 * z4;
    float zplot3=basis.m30 * z1 + basis.m31 * z2 + basis.m32 * z3 + basis.m33 * z4;
    vertex(x0,y0,z0);
    for (int j=0; j < segments; j++) {
      x0+=xplot1;
      xplot1+=xplot2;
      xplot2+=xplot3;
      y0+=yplot1;
      yplot1+=yplot2;
      yplot2+=yplot3;
      z0+=zplot1;
      zplot1+=zplot2;
      zplot2+=zplot3;
      vertex(x0,y0,z0);
    }
  }
 else {
    vertex(x0,y0);
    for (int j=0; j < segments; j++) {
      x0+=xplot1;
      xplot1+=xplot2;
      xplot2+=xplot3;
      y0+=yplot1;
      yplot1+=yplot2;
      yplot2+=yplot3;
      vertex(x0,y0);
    }
  }
  splineVertexCount=cvertexSaved;
}
