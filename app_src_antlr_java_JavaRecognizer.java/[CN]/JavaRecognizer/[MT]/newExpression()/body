{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST newExpression_AST=null;
  AST tmp189_AST=null;
  tmp189_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp189_AST);
  match(LITERAL_new);
  type();
  astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case LPAREN:
{
        match(LPAREN);
        argList();
        astFactory.addASTChild(currentAST,returnAST);
        match(RPAREN);
{
switch (LA(1)) {
case LCURLY:
{
              classBlock();
              astFactory.addASTChild(currentAST,returnAST);
              break;
            }
case SEMI:
case LBRACK:
case RBRACK:
case DOT:
case STAR:
case RCURLY:
case COMMA:
case RPAREN:
case ASSIGN:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case QUESTION:
case LOR:
case LAND:
case BOR:
case BXOR:
case BAND:
case NOT_EQUAL:
case EQUAL:
case LT:
case GT:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case SR:
case BSR:
case PLUS:
case MINUS:
case DIV:
case MOD:
case INC:
case DEC:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  break;
}
case LBRACK:
{
newArrayDeclarator();
astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case LCURLY:
{
      arrayInitializer();
      astFactory.addASTChild(currentAST,returnAST);
      break;
    }
case SEMI:
case LBRACK:
case RBRACK:
case DOT:
case STAR:
case RCURLY:
case COMMA:
case RPAREN:
case ASSIGN:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case QUESTION:
case LOR:
case LAND:
case BOR:
case BXOR:
case BAND:
case NOT_EQUAL:
case EQUAL:
case LT:
case GT:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case SR:
case BSR:
case PLUS:
case MINUS:
case DIV:
case MOD:
case INC:
case DEC:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
newExpression_AST=(AST)currentAST.root;
returnAST=newExpression_AST;
}
