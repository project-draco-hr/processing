{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST modifier_AST=null;
switch (LA(1)) {
case LITERAL_private:
{
      AST tmp29_AST=null;
      tmp29_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp29_AST);
      match(LITERAL_private);
      modifier_AST=(AST)currentAST.root;
      break;
    }
case LITERAL_public:
{
    AST tmp30_AST=null;
    tmp30_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp30_AST);
    match(LITERAL_public);
    modifier_AST=(AST)currentAST.root;
    break;
  }
case LITERAL_protected:
{
  AST tmp31_AST=null;
  tmp31_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp31_AST);
  match(LITERAL_protected);
  modifier_AST=(AST)currentAST.root;
  break;
}
case LITERAL_static:
{
AST tmp32_AST=null;
tmp32_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp32_AST);
match(LITERAL_static);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_transient:
{
AST tmp33_AST=null;
tmp33_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp33_AST);
match(LITERAL_transient);
modifier_AST=(AST)currentAST.root;
break;
}
case FINAL:
{
AST tmp34_AST=null;
tmp34_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp34_AST);
match(FINAL);
modifier_AST=(AST)currentAST.root;
break;
}
case ABSTRACT:
{
AST tmp35_AST=null;
tmp35_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp35_AST);
match(ABSTRACT);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_native:
{
AST tmp36_AST=null;
tmp36_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp36_AST);
match(LITERAL_native);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_threadsafe:
{
AST tmp37_AST=null;
tmp37_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp37_AST);
match(LITERAL_threadsafe);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_synchronized:
{
AST tmp38_AST=null;
tmp38_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp38_AST);
match(LITERAL_synchronized);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_volatile:
{
AST tmp39_AST=null;
tmp39_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp39_AST);
match(LITERAL_volatile);
modifier_AST=(AST)currentAST.root;
break;
}
case STRICTFP:
{
AST tmp40_AST=null;
tmp40_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp40_AST);
match(STRICTFP);
modifier_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=modifier_AST;
}
