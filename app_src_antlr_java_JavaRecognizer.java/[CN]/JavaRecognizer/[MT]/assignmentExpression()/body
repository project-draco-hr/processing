{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST assignmentExpression_AST=null;
  conditionalExpression();
  astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case ASSIGN:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
{
{
switch (LA(1)) {
case ASSIGN:
{
              AST tmp122_AST=null;
              tmp122_AST=astFactory.create(LT(1));
              astFactory.makeASTRoot(currentAST,tmp122_AST);
              match(ASSIGN);
              break;
            }
case PLUS_ASSIGN:
{
            AST tmp123_AST=null;
            tmp123_AST=astFactory.create(LT(1));
            astFactory.makeASTRoot(currentAST,tmp123_AST);
            match(PLUS_ASSIGN);
            break;
          }
case MINUS_ASSIGN:
{
          AST tmp124_AST=null;
          tmp124_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp124_AST);
          match(MINUS_ASSIGN);
          break;
        }
case STAR_ASSIGN:
{
        AST tmp125_AST=null;
        tmp125_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp125_AST);
        match(STAR_ASSIGN);
        break;
      }
case DIV_ASSIGN:
{
      AST tmp126_AST=null;
      tmp126_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp126_AST);
      match(DIV_ASSIGN);
      break;
    }
case MOD_ASSIGN:
{
    AST tmp127_AST=null;
    tmp127_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp127_AST);
    match(MOD_ASSIGN);
    break;
  }
case SR_ASSIGN:
{
  AST tmp128_AST=null;
  tmp128_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp128_AST);
  match(SR_ASSIGN);
  break;
}
case BSR_ASSIGN:
{
AST tmp129_AST=null;
tmp129_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp129_AST);
match(BSR_ASSIGN);
break;
}
case SL_ASSIGN:
{
AST tmp130_AST=null;
tmp130_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp130_AST);
match(SL_ASSIGN);
break;
}
case BAND_ASSIGN:
{
AST tmp131_AST=null;
tmp131_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp131_AST);
match(BAND_ASSIGN);
break;
}
case BXOR_ASSIGN:
{
AST tmp132_AST=null;
tmp132_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp132_AST);
match(BXOR_ASSIGN);
break;
}
case BOR_ASSIGN:
{
AST tmp133_AST=null;
tmp133_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp133_AST);
match(BOR_ASSIGN);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
assignmentExpression();
astFactory.addASTChild(currentAST,returnAST);
break;
}
case SEMI:
case RBRACK:
case RCURLY:
case COMMA:
case RPAREN:
case COLON:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
assignmentExpression_AST=(AST)currentAST.root;
returnAST=assignmentExpression_AST;
}
