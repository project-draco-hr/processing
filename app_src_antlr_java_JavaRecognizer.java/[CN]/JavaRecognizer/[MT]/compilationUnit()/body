{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST compilationUnit_AST=null;
{
switch (LA(1)) {
case LITERAL_package:
{
        packageDefinition();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case SEMI:
case LITERAL_import:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_static:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LITERAL_class:
case LITERAL_interface:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
{
_loop4: do {
if ((LA(1) == LITERAL_import)) {
  importDefinition();
  astFactory.addASTChild(currentAST,returnAST);
}
 else {
  break _loop4;
}
}
 while (true);
}
{
_loop6: do {
if ((_tokenSet_0.member(LA(1)))) {
  typeDefinition();
  astFactory.addASTChild(currentAST,returnAST);
}
 else {
  break _loop6;
}
}
 while (true);
}
match(Token.EOF_TYPE);
compilationUnit_AST=(AST)currentAST.root;
returnAST=compilationUnit_AST;
}
