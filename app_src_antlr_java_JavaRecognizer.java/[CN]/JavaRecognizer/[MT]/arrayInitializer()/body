{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST arrayInitializer_AST=null;
  Token lc=null;
  AST lc_AST=null;
  lc=LT(1);
  lc_AST=astFactory.create(lc);
  astFactory.makeASTRoot(currentAST,lc_AST);
  match(LCURLY);
  if (inputState.guessing == 0) {
    lc_AST.setType(ARRAY_INIT);
  }
{
switch (LA(1)) {
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case IDENT:
case LCURLY:
case LPAREN:
case LITERAL_this:
case LITERAL_super:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case LITERAL_new:
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
{
        initializer();
        astFactory.addASTChild(currentAST,returnAST);
{
          _loop69:           do {
            if ((LA(1) == COMMA) && (_tokenSet_19.member(LA(2)))) {
              match(COMMA);
              initializer();
              astFactory.addASTChild(currentAST,returnAST);
            }
 else {
              break _loop69;
            }
          }
 while (true);
        }
{
switch (LA(1)) {
case COMMA:
{
              match(COMMA);
              break;
            }
case RCURLY:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  break;
}
case RCURLY:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
match(RCURLY);
arrayInitializer_AST=(AST)currentAST.root;
returnAST=arrayInitializer_AST;
}
