{
  this.leechErr=new PrintStream(new PdeMessageStream(this));
  Point parentLoc=editor.getLocation();
  Insets parentInsets=editor.getInsets();
  int x1=parentLoc.x - 20;
  int y1=parentLoc.y;
  try {
    if (sketch.externalRuntime) {
      String location=(windowLocation != null) ? (PApplet.EXTERNAL_EXACT_LOCATION + windowLocation.x + ","+ windowLocation.y) : (x1 + "," + y1);
      String command[]=new String[]{"java","-Djava.library.path=" + sketch.libraryPath,"-cp",sketch.classPath,"PApplet",PApplet.EXTERNAL_FLAG + location,sketch.mainClassName};
      process=Runtime.getRuntime().exec(command);
      new SystemOutSiphon(process.getInputStream());
      new PdeMessageSiphon(process.getErrorStream(),this);
      processOutput=process.getOutputStream();
    }
 else {
      Class c=Class.forName(sketch.mainClassName);
      applet=(PApplet)c.newInstance();
      applet.leechErr=leechErr;
      applet.init();
      if (applet.exception != null) {
        throw new PdeException(applet.exception.getMessage());
      }
      applet.start();
      boolean drawMode=false;
      try {
        Method meth[]=c.getDeclaredMethods();
        for (int i=0; i < meth.length; i++) {
          if (meth[i].getName().equals("draw"))           drawMode=true;
        }
      }
 catch (      SecurityException e) {
        e.printStackTrace();
      }
      if (drawMode) {
        while ((applet.frame != 1) && (!applet.finished)) {
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
        }
      }
      if (editor.presenting) {
        window=new Window(editor.presentationWindow);
      }
 else {
        window=new Frame(sketch.name);
        ((Frame)window).setResizable(false);
        if (editor.icon != null) {
          ((Frame)window).setIconImage(editor.icon);
        }
        window.pack();
        window.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent e){
            stop();
            editor.doClose();
          }
        }
);
        applet.addKeyListener(new KeyAdapter(){
          public void keyPressed(          KeyEvent e){
            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
              stop();
              editor.doClose();
            }
          }
        }
);
        y1+=parentInsets.top;
      }
      window.add(applet);
      Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
      window.setLayout(null);
      if (editor.presenting) {
        window.setBounds((screen.width - applet.width) / 2,(screen.height - applet.height) / 2,applet.width,applet.height);
        applet.setBounds(0,0,applet.width,applet.height);
      }
 else {
        Insets insets=window.getInsets();
        int minW=PdePreferences.getInteger("run.window.width.minimum");
        int minH=PdePreferences.getInteger("run.window.height.minimum");
        int windowW=Math.max(applet.width,minW) + insets.left + insets.right;
        int windowH=Math.max(applet.height,minH) + insets.top + insets.bottom;
        if (x1 - windowW > 10) {
          window.setBounds(x1 - windowW,y1,windowW,windowH);
        }
 else {
          x1=parentLoc.x + PdePreferences.GRID_SIZE * 2;
          y1=parentLoc.y + PdePreferences.GRID_SIZE * 2;
          if ((x1 + windowW > screen.width - PdePreferences.GRID_SIZE) || (y1 + windowH > screen.height - PdePreferences.GRID_SIZE)) {
            x1=(screen.width - windowW) / 2;
            y1=(screen.height - windowH) / 2;
          }
          window.setBounds(x1,y1,windowW,windowH);
        }
        Color windowBgColor=PdePreferences.getColor("run.window.bgcolor");
        window.setBackground(windowBgColor);
        applet.setBounds((windowW - applet.width) / 2,insets.top + ((windowH - insets.top - insets.bottom) - applet.height) / 2,windowW,windowH);
      }
      applet.setVisible(true);
      if (windowLocation != null) {
        window.setLocation(windowLocation);
      }
      window.show();
      applet.requestFocus();
    }
  }
 catch (  Exception e) {
    applet.finished=true;
    leechErr.println(PApplet.LEECH_WAKEUP);
    e.printStackTrace(this.leechErr);
  }
}
