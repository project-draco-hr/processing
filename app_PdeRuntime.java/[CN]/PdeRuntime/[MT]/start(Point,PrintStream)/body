{
  this.leechErr=leechErr;
  Point parentLoc=editor.base.getLocation();
  Insets parentInsets=editor.base.getInsets();
  int x1=parentLoc.x - 20;
  int y1=parentLoc.y;
  try {
    if (externalRuntime) {
      String command[]=new String[]{"java","-cp",externalPaths,"BApplet",BApplet.EXTERNAL_FLAG + ((windowLocation != null) ? ("e" + windowLocation.x + ","+ windowLocation.y) : (x1 + "," + y1)),className};
      process=Runtime.getRuntime().exec(command);
      new PdeMessageSiphon(process.getInputStream(),this);
      new PdeMessageSiphon(process.getErrorStream(),this);
      processOutput=process.getOutputStream();
    }
 else {
      Class c=Class.forName(className);
      applet=(BApplet)c.newInstance();
      applet.leechErr=leechErr;
      applet.serialProperties(PdeBase.properties);
      applet.init();
      if (applet.exception != null) {
        if (applet.exception instanceof PortInUseException) {
          throw new PdeException("Another program is already " + "using the serial port.");
        }
 else {
          throw new PdeException(applet.exception.getMessage());
        }
      }
      applet.start();
      boolean drawMode=false;
      try {
        Method meth[]=c.getDeclaredMethods();
        for (int i=0; i < meth.length; i++) {
          if (meth[i].getName().equals("draw"))           drawMode=true;
        }
      }
 catch (      SecurityException e) {
        e.printStackTrace();
      }
      if (drawMode) {
        while ((applet.frame != 1) && (!applet.finished)) {
          try {
            Thread.sleep(5);
          }
 catch (          InterruptedException e) {
          }
        }
      }
      if (editor.presenting) {
        window=new Window(editor.presentationWindow);
      }
 else {
        window=new Frame(editor.sketchName);
        ((Frame)window).setResizable(false);
        if (PdeBase.icon != null) {
          ((Frame)window).setIconImage(PdeBase.icon);
        }
        window.pack();
        window.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent e){
            stop();
            editor.doClose();
          }
        }
);
        applet.addKeyListener(new KeyAdapter(){
          public void keyPressed(          KeyEvent e){
            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
              stop();
              editor.doClose();
            }
          }
        }
);
        y1+=parentInsets.top;
      }
      window.add(applet);
      Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
      window.setLayout(null);
      if (editor.presenting) {
        window.setBounds((screen.width - applet.width) / 2,(screen.height - applet.height) / 2,applet.width,applet.height);
        applet.setBounds(0,0,applet.width,applet.height);
      }
 else {
        Insets insets=window.getInsets();
        int minW=PdeBase.getInteger("run.window.width.minimum",120);
        int minH=PdeBase.getInteger("run.window.height.minimum",120);
        int windowW=Math.max(applet.width,minW) + insets.left + insets.right;
        int windowH=Math.max(applet.height,minH) + insets.top + insets.bottom;
        if (x1 - windowW > 10) {
          window.setBounds(x1 - windowW,y1,windowW,windowH);
        }
 else {
          x1=parentLoc.x + PdeEditor.GRID_SIZE * 2;
          y1=parentLoc.y + PdeEditor.GRID_SIZE * 2;
          if ((x1 + windowW > screen.width - PdeEditor.GRID_SIZE) || (y1 + windowH > screen.height - PdeEditor.GRID_SIZE)) {
            x1=(screen.width - windowW) / 2;
            y1=(screen.height - windowH) / 2;
          }
          window.setBounds(x1,y1,windowW,windowH);
        }
        Color windowBgColor=PdeBase.getColor("run.window.bgcolor",SystemColor.control);
        window.setBackground(windowBgColor);
        applet.setBounds((windowW - applet.width) / 2,insets.top + ((windowH - insets.top - insets.bottom) - applet.height) / 2,windowW,windowH);
      }
      applet.setVisible(true);
      if (windowLocation != null) {
        window.setLocation(windowLocation);
      }
      window.show();
      applet.requestFocus();
    }
  }
 catch (  Exception e) {
    leechErr.println(BApplet.LEECH_WAKEUP);
    e.printStackTrace(this.leechErr);
  }
}
