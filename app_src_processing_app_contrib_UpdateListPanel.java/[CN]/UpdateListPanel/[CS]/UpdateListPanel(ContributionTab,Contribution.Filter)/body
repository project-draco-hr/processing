{
  this.contributionTab=contributionTab;
  this.filter=filter;
  setOpaque(true);
  setBackground(Color.WHITE);
  model=new DefaultTableModel(){
    @Override public boolean isCellEditable(    int row,    int column){
      return false;
    }
    @Override public Class<?> getColumnClass(    int columnIndex){
      return (columnIndex == 0) ? Icon.class : String.class;
    }
  }
;
  model.setColumnIdentifiers(new String[]{"","Name","Author","Installed","Update To"});
  table=new JTable(model){
    @Override public Component prepareRenderer(    TableCellRenderer renderer,    int row,    int column){
      Component c=super.prepareRenderer(renderer,row,column);
      String title=(String)getValueAt(row,1);
      if (title.equals("<html><i>Library</i></html>") || title.equals("<html><i>Tools</i></html>") || title.equals("<html><i>Modes</i></html>")|| title.equals("<html><i>Examples</i></html>")) {
        ((JComponent)c).setBorder(BorderFactory.createMatteBorder(row == 0 ? 0 : 2,0,2,0,Color.BLACK));
      }
      return c;
    }
    @Override public void changeSelection(    int rowIndex,    int columnIndex,    boolean toggle,    boolean extend){
      String title=(String)getValueAt(rowIndex,1);
      if (title.equals("<html><i>Library</i></html>") || title.equals("<html><i>Tools</i></html>") || title.equals("<html><i>Modes</i></html>")|| title.equals("<html><i>Examples</i></html>")) {
        return;
      }
      super.changeSelection(rowIndex,columnIndex,toggle,extend);
    }
  }
;
  scrollPane=new JScrollPane(table);
  table.setFillsViewportHeight(true);
  table.setSelectionBackground(new Color(0xe0fffd));
  table.setSelectionForeground(table.getForeground());
  table.setFont(Toolkit.getSansFont(14,Font.PLAIN));
  table.setRowHeight(30);
  table.setRowMargin(6);
  table.getColumnModel().setColumnMargin(-1);
  table.getColumnModel().getColumn(0).setMaxWidth(60);
  table.setShowGrid(false);
  table.setCellSelectionEnabled(false);
  table.setRowSelectionAllowed(true);
  table.setAutoCreateColumnsFromModel(true);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.setDefaultRenderer(String.class,new DefaultTableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      return super.getTableCellRendererComponent(table,value,isSelected,false,row,column);
    }
  }
);
  table.getTableHeader().setDefaultRenderer(new ContribHeaderRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      JTableHeader tableHeader=table.getTableHeader();
      if (tableHeader != null) {
        setForeground(tableHeader.getForeground());
      }
      setIcon(getIcon(table,column));
      setBackground(new Color(0xebebeb));
      return this;
    }
  }
);
  GroupLayout layout=new GroupLayout(this);
  layout.setHorizontalGroup(layout.createParallelGroup().addComponent(scrollPane));
  layout.setVerticalGroup(layout.createSequentialGroup().addComponent(scrollPane));
  setLayout(layout);
  table.setVisible(true);
  panelByContribution=new TreeMap<Contribution,ContributionPanel>(new Comparator<Contribution>(){
    @Override public int compare(    Contribution o1,    Contribution o2){
      int diff=ContributionManager.getTypeIndex(o1.getType()) - ContributionManager.getTypeIndex(o2.getType());
      if (diff == 0) {
        diff=o1.getName().toLowerCase().compareTo(o2.getName().toLowerCase());
      }
      return diff;
    }
  }
);
}
