{
  String currentRenderer=(g == null) ? null : g.getClass().getName();
  if (currentRenderer != null) {
    if (currentRenderer.equals(renderer)) {
      if ((iwidth == g.width) && (iheight == g.height)) {
        return;
      }
    }
 else {
      if (frameCount > 0) {
        throw new RuntimeException("size() cannot be called to change " + "the renderer outside of setup()");
      }
    }
  }
  String openglError="Before using OpenGL, first select " + "Import Library > opengl from the Sketch menu.";
  try {
    Class rendererClass=Class.forName(renderer);
    Class constructorParams[]=new Class[]{Integer.TYPE,Integer.TYPE,PApplet.class};
    Constructor constructor=rendererClass.getConstructor(constructorParams);
    Object constructorValues[]=new Object[]{new Integer(iwidth),new Integer(iheight),this};
    g=(PGraphics)constructor.newInstance(constructorValues);
    this.width=iwidth;
    this.height=iheight;
    defaultSize=false;
    setSize(width,height);
  }
 catch (  InvocationTargetException ite) {
    String msg=ite.getTargetException().getMessage();
    if ((msg != null) && (msg.indexOf("no jogl in java.library.path") != -1)) {
      throw new RuntimeException(openglError);
    }
 else {
      ite.getTargetException().printStackTrace();
    }
  }
catch (  ClassNotFoundException cnfe) {
    if (cnfe.getMessage().indexOf("processing.opengl.PGraphicsGL") != -1) {
      throw new RuntimeException(openglError);
    }
 else {
      throw new RuntimeException("You need to use \"Import Library\" " + "to add " + renderer + " to your sketch.");
    }
  }
catch (  Exception e) {
    e.printStackTrace();
    die("Could not start because of a problem with size()",e);
  }
  if ((currentRenderer != null) && !currentRenderer.equals(renderer)) {
    throw new RuntimeException(NEW_RENDERER);
  }
  Object methodArgs[]=new Object[]{new Integer(width),new Integer(height)};
  sizeMethods.handle(methodArgs);
}
