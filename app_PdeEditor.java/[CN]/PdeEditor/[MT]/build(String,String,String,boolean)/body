{
  boolean extendsNormal=base.normalItem.getState();
  externalRuntime=false;
  externalPaths=null;
  externalCode=new File(sketchDir,"code");
  if (externalCode.exists()) {
    externalRuntime=true;
    externalPaths=PdeCompiler.includeFolder(externalCode);
  }
 else {
    externalCode=null;
  }
  String imports[]=null;
  if (externalCode != null) {
    imports=PdeCompiler.magicImports(externalPaths);
  }
  PdePreprocessor preprocessor=null;
  if (PdeBase.getBoolean("preprocessor.antlr",true)) {
    preprocessor=new PdePreprocessor(program,buildPath);
    try {
      className=preprocessor.writeJava(className,imports,extendsNormal,false);
    }
 catch (    antlr.RecognitionException ae) {
      throw new PdeException(ae.getMessage(),ae.getLine() - 1,ae.getColumn());
    }
catch (    PdeException pe) {
      throw pe;
    }
catch (    Exception ex) {
      System.err.println("Uncaught exception type:" + ex.getClass());
      ex.printStackTrace();
      throw new PdeException(ex.toString());
    }
  }
 else {
    preprocessor=new PdePreprocessorOro(program,buildPath);
    className=preprocessor.writeJava(className,imports,extendsNormal,false);
  }
  if (PdePreprocessor.programType == PdePreprocessor.ADVANCED) {
    externalRuntime=true;
  }
  PdeCompiler compiler=new PdeCompiler(buildPath,className,externalCode,this);
  messageStream=new PdeMessageStream(compiler);
  boolean success=compiler.compileJava(new PrintStream(messageStream));
  return success ? className : null;
}
