{
  doClose();
  running=true;
  buttons.run();
  for (int i=0; i < 10; i++)   System.out.println();
  if (PdePreferences.getBoolean("editor.external")) {
    String historySaved=history.lastRecorded;
    handleOpen(sketch);
    history.lastRecorded=historySaved;
  }
  presenting=present;
  try {
    if (presenting) {
      presentationWindow.show();
      presentationWindow.toFront();
    }
    String program=textarea.getText();
    history.record(program,PdeHistory.RUN);
    tempBuildPath="lib" + File.separator + "build";
    File buildDir=new File(tempBuildPath);
    if (!buildDir.exists()) {
      buildDir.mkdirs();
    }
    String dataPath=sketchFile.getParent() + File.separator + "data";
    File dataDir=new File(dataPath);
    if (dataDir.exists()) {
      PdeBase.copyDir(dataDir,buildDir);
    }
    int numero1=(int)(Math.random() * 10000);
    int numero2=(int)(Math.random() * 10000);
    String className=TEMP_CLASS + "_" + numero1+ "_"+ numero2;
    className=build(program,className,tempBuildPath,false);
    if (className != null) {
      if (externalPaths == null) {
        externalPaths=PdeCompiler.calcClassPath(null) + File.pathSeparator + tempBuildPath;
      }
 else {
        externalPaths=tempBuildPath + File.pathSeparator + PdeCompiler.calcClassPath(null)+ File.pathSeparator+ externalPaths;
      }
      String codeFolderPath="";
      if (externalCode != null) {
        codeFolderPath=externalCode.getCanonicalPath();
      }
      runtime=new PdeRuntime(this,className,externalRuntime,codeFolderPath,externalPaths);
      PdeMessageStream messageStream=new PdeMessageStream(runtime);
      runtime.start(presenting ? presentLocation : appletLocation,new PrintStream(messageStream));
      watcher=new RunButtonWatcher();
    }
 else {
      cleanTempFiles();
    }
  }
 catch (  PdeException e) {
    if (runtime != null)     runtime.stop();
    cleanTempFiles();
    error(e);
  }
catch (  Exception e) {
    e.printStackTrace();
    if (runtime != null)     runtime.stop();
    cleanTempFiles();
  }
}
