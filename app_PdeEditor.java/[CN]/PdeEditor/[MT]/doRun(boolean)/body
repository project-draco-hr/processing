{
  doClose();
  running=true;
  buttons.run();
  if (externalEditor) {
    String historySaved=historyLast;
    handleOpen(sketchName,sketchFile,sketchDir);
    historyLast=historySaved;
  }
  presenting=present;
  try {
    if (presenting) {
      presentationWindow.show();
      presentationWindow.toFront();
    }
    String program=textarea.getText();
    makeHistory(program,RUN);
    buildPath="lib" + File.separator + "build";
    File buildDir=new File(buildPath);
    if (!buildDir.exists()) {
      buildDir.mkdirs();
    }
    String dataPath=sketchFile.getParent() + File.separator + "data";
    if (dataPath != null) {
      File dataDir=new File(dataPath);
      if (dataDir.exists()) {
        PdeEditor.copyDir(dataDir,buildDir);
      }
    }
    int numero1=(int)(Math.random() * 10000);
    int numero2=(int)(Math.random() * 10000);
    String className=TEMP_CLASS + "_" + numero1+ "_"+ numero2;
    PdePreprocessor preprocessorOro=new PdePreprocessorOro(program,buildPath);
    className=preprocessorOro.writeJava(className,base.normalItem.getState(),false);
    PdeCompiler compiler=((PdeBase.platform == PdeBase.MACOS9) ? new PdeCompilerJavac(buildPath,className,this) : new PdeCompiler(buildPath,className,this));
    messageStream=new PdeMessageStream(this,compiler);
    leechErr=new PrintStream(messageStream);
    boolean result=compiler.compileJava(leechErr);
    if (result) {
      pdeRuntime=new PdeRuntime(this,className);
      messageStream.setMessageConsumer(pdeRuntime);
      pdeRuntime.start(presenting ? presentLocation : appletLocation,leechErr);
      watcher=new RunButtonWatcher();
    }
 else {
      cleanTempFiles(buildPath);
    }
  }
 catch (  PdeException e) {
    if (pdeRuntime != null) {
      pdeRuntime.stop();
    }
    cleanTempFiles(buildPath);
    e.printStackTrace();
    error(e);
  }
catch (  Exception e) {
    e.printStackTrace();
    if (pdeRuntime != null) {
      pdeRuntime.stop();
    }
    cleanTempFiles(buildPath);
  }
}
