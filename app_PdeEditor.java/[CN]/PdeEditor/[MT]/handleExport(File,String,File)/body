{
  try {
    String program=textarea.getText();
    KjcEngine engine=new KjcEngine(program,appletDir.getPath(),null,this);
    appletDir.mkdirs();
    exportSketchName=engine.writeJava(exportSketchName,false);
    if (!engine.compileJava()) {
      return;
    }
    int wide=BApplet.DEFAULT_WIDTH;
    int high=BApplet.DEFAULT_HEIGHT;
    int index=program.indexOf("size(");
    if (index != -1) {
      try {
        String str=program.substring(index + 5);
        int comma=str.indexOf(',');
        int paren=str.indexOf(')');
        wide=Integer.parseInt(str.substring(0,comma).trim());
        high=Integer.parseInt(str.substring(comma + 1,paren).trim());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    File htmlOutputFile=new File(appletDir,"index.html");
    FileOutputStream fos=new FileOutputStream(htmlOutputFile);
    PrintStream ps=new PrintStream(fos);
    ps.println("<HTML> <BODY BGCOLOR=\"white\">");
    ps.println();
    ps.println("<BR> <BR> <BR> <CENTER>");
    ps.println();
    ps.print("<APPLET CODE=\"" + exportSketchName + "\" ARCHIVE=\"");
    ps.print(exportSketchName + ".jar");
    ps.println("\" WIDTH=" + wide + " HEIGHT="+ high+ ">");
    ps.println("</APPLET>");
    ps.println();
    ps.println("<A HREF=\"" + exportSketchName + ".java\">source code</A>");
    ps.println();
    ps.println("</CENTER>");
    ps.println("</BODY> </HTML>");
    ps.flush();
    ps.close();
    String exportDir=("lib" + File.separator + "export"+ File.separator);
    String bagelClasses[]=new File(exportDir).list();
    FileOutputStream zipOutputFile=new FileOutputStream(new File(appletDir,exportSketchName + ".jar"));
    ZipOutputStream zos=new ZipOutputStream(zipOutputFile);
    ZipEntry entry;
    for (int i=0; i < bagelClasses.length; i++) {
      if (!bagelClasses[i].endsWith(".class"))       continue;
      entry=new ZipEntry(bagelClasses[i]);
      zos.putNextEntry(entry);
      zos.write(grabFile(new File(exportDir + bagelClasses[i])));
      zos.closeEntry();
    }
    if (dataDir != null) {
      String datafiles[]=dataDir.list();
      for (int i=0; i < datafiles.length; i++) {
        if (datafiles[i].equals(".") || datafiles[i].equals("..")) {
          continue;
        }
        entry=new ZipEntry(datafiles[i]);
        zos.putNextEntry(entry);
        zos.write(grabFile(new File(dataDir,datafiles[i])));
        zos.closeEntry();
      }
    }
    String classfiles[]=appletDir.list();
    for (int i=0; i < classfiles.length; i++) {
      if (classfiles[i].endsWith(".class")) {
        entry=new ZipEntry(classfiles[i]);
        zos.putNextEntry(entry);
        zos.write(grabFile(new File(appletDir,classfiles[i])));
        zos.closeEntry();
      }
    }
    for (int i=0; i < classfiles.length; i++) {
      if (classfiles[i].endsWith(".class")) {
        new File(appletDir,classfiles[i]).delete();
      }
    }
    zos.flush();
    zos.close();
    message("Done exporting.");
  }
 catch (  Exception e) {
    message("Error during export.");
    e.printStackTrace();
  }
  buttons.clear();
}
