{
  if (s.indexOf(PApplet.EXTERNAL_QUIT) == 0) {
    editor.closeRunner();
    return;
  }
  if (s.indexOf(PApplet.EXTERNAL_MOVE) == 0) {
    String nums=s.substring(s.indexOf(' ') + 1).trim();
    int space=nums.indexOf(' ');
    int left=Integer.parseInt(nums.substring(0,space));
    int top=Integer.parseInt(nums.substring(space + 1));
    editor.appletLocation=new Point(left,top);
    return;
  }
  if (s.indexOf(PApplet.LEECH_WAKEUP) == 0) {
    newMessage=true;
    return;
  }
  System.err.print(s);
  System.err.flush();
  if (s.trim().length() == 0)   return;
  if (newMessage) {
    exception=new RunnerException(s);
    exception.hideStackTrace=true;
    newMessage=false;
    foundMessageSource=false;
    messageLineCount=0;
  }
 else {
    messageLineCount++;
    if (!foundMessageSource) {
      int atIndex=s.indexOf("at ");
      if (atIndex == -1) {
        return;
      }
      s=s.substring(atIndex + 3);
      if (s.startsWith("processing."))       return;
      if (s.startsWith("java."))       return;
      int startParen=s.indexOf('(');
      int codeIndex=-1;
      int lineNumber=-1;
      if (startParen == -1) {
      }
 else {
        String fileAndLine=s.substring(startParen + 1);
        int stopParen=fileAndLine.indexOf(')');
        fileAndLine=fileAndLine.substring(0,stopParen);
        int colonIndex=fileAndLine.indexOf(':');
        if (colonIndex != -1) {
          String filename=fileAndLine.substring(0,colonIndex);
          lineNumber=Integer.parseInt(fileAndLine.substring(colonIndex + 1)) - 1;
          for (int i=0; i < sketch.codeCount; i++) {
            SketchCode code=sketch.code[i];
            if (((code.preprocName == null) && (lineNumber >= code.preprocOffset)) || ((code.preprocName != null) && code.preprocName.equals(filename))) {
              codeIndex=i;
            }
          }
          if (codeIndex != -1) {
            lineNumber-=sketch.code[codeIndex].preprocOffset;
            exception=new RunnerException(exception.getMessage(),codeIndex,lineNumber,-1);
            exception.hideStackTrace=true;
            foundMessageSource=true;
          }
        }
      }
      editor.error(exception);
    }
 else     if (messageLineCount > 10) {
      messageLineCount=-100;
      exception=new RunnerException(exception.getMessage());
      exception.hideStackTrace=true;
      editor.error(exception);
    }
 else {
    }
  }
}
