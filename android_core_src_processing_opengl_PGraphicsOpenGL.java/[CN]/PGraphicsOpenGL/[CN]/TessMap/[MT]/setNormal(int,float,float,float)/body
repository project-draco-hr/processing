{
  float[] normals=tess.fillNormals;
  if (-1 < firstFillIndex) {
    int tessIdx=firstFillIndex + inIdx;
    normals[3 * tessIdx + 0]=nx;
    normals[3 * tessIdx + 1]=ny;
    normals[3 * tessIdx + 2]=nz;
  }
 else {
    float nx0=in.normals[3 * inIdx + 0];
    float ny0=in.normals[3 * inIdx + 1];
    float nz0=in.normals[3 * inIdx + 2];
    int[] indices=fillIndices[inIdx];
    float[] weights=fillWeights[inIdx];
    for (int i=0; i < indices.length; i++) {
      int tessIdx=indices[i];
      float weight=weights[i];
      float tnx0=normals[3 * tessIdx + 0];
      float tny0=normals[3 * tessIdx + 1];
      float tnz0=normals[3 * tessIdx + 2];
      float tnx=tnx0 + weight * (nx - nx0);
      float tny=tny0 + weight * (ny - ny0);
      float tnz=tnz0 + weight * (nz - nz0);
      float sum=tnx * tnx + tny * tny + tnz * tnz;
      float len=PApplet.sqrt(sum);
      tnx/=len;
      tny/=len;
      tnz/=len;
      normals[3 * tessIdx + 0]=tnx;
      normals[3 * tessIdx + 1]=tny;
      normals[3 * tessIdx + 2]=tnz;
    }
  }
}
