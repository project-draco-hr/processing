{
  super.start();
  if (-1 < inVertexLoc)   pgl.glEnableVertexAttribArray(inVertexLoc);
  if (-1 < inColorLoc)   pgl.glEnableVertexAttribArray(inColorLoc);
  if (-1 < inNormalLoc)   pgl.glEnableVertexAttribArray(inNormalLoc);
  if (-1 < inAmbientLoc)   pgl.glEnableVertexAttribArray(inAmbientLoc);
  if (-1 < inSpecularLoc)   pgl.glEnableVertexAttribArray(inSpecularLoc);
  if (-1 < inEmissiveLoc)   pgl.glEnableVertexAttribArray(inEmissiveLoc);
  if (-1 < inShineLoc)   pgl.glEnableVertexAttribArray(inShineLoc);
  if (pgCurrent != null) {
    pgCurrent.updateGLProjmodelview();
    set4x4MatUniform(projmodelviewMatrixLoc,pgCurrent.glProjmodelview);
    pgCurrent.updateGLModelview();
    set4x4MatUniform(modelviewMatrixLoc,pgCurrent.glModelview);
    pgCurrent.updateGLNormal();
    set3x3MatUniform(normalMatrixLoc,pgCurrent.glNormal);
    set1IntUniform(lightCountLoc,pgCurrent.lightCount);
    set4FloatVecUniform(lightPositionLoc,pgCurrent.lightPosition);
    set3FloatVecUniform(lightNormalLoc,pgCurrent.lightNormal);
    set3FloatVecUniform(lightAmbientLoc,pgCurrent.lightAmbient);
    set3FloatVecUniform(lightDiffuseLoc,pgCurrent.lightDiffuse);
    set3FloatVecUniform(lightSpecularLoc,pgCurrent.lightSpecular);
    set3FloatVecUniform(lightFalloffCoefficientsLoc,pgCurrent.lightFalloffCoefficients);
    set2FloatVecUniform(lightSpotParametersLoc,pgCurrent.lightSpotParameters);
  }
}
