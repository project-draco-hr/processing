{
  super.start();
  if (-1 < inVertexLoc)   pgl.glEnableVertexAttribArray(inVertexLoc);
  if (-1 < inColorLoc)   pgl.glEnableVertexAttribArray(inColorLoc);
  if (-1 < inNormalLoc)   pgl.glEnableVertexAttribArray(inNormalLoc);
  if (-1 < inAmbientLoc)   pgl.glEnableVertexAttribArray(inAmbientLoc);
  if (-1 < inSpecularLoc)   pgl.glEnableVertexAttribArray(inSpecularLoc);
  if (-1 < inEmissiveLoc)   pgl.glEnableVertexAttribArray(inEmissiveLoc);
  if (-1 < inShineLoc)   pgl.glEnableVertexAttribArray(inShineLoc);
  if (renderer != null) {
    renderer.updateGLProjmodelview();
    set4x4MatUniform(projmodelviewMatrixLoc,renderer.glProjmodelview);
    renderer.updateGLModelview();
    set4x4MatUniform(modelviewMatrixLoc,renderer.glModelview);
    renderer.updateGLNormal();
    set3x3MatUniform(normalMatrixLoc,renderer.glNormal);
    setIntUniform(lightCountLoc,renderer.lightCount);
    set4FloatVecUniform(lightPositionLoc,renderer.lightPosition);
    set3FloatVecUniform(lightNormalLoc,renderer.lightNormal);
    set3FloatVecUniform(lightAmbientLoc,renderer.lightAmbient);
    set3FloatVecUniform(lightDiffuseLoc,renderer.lightDiffuse);
    set3FloatVecUniform(lightSpecularLoc,renderer.lightSpecular);
    set3FloatVecUniform(lightFalloffCoefficientsLoc,renderer.lightFalloffCoefficients);
    set2FloatVecUniform(lightSpotParametersLoc,renderer.lightSpotParameters);
  }
}
