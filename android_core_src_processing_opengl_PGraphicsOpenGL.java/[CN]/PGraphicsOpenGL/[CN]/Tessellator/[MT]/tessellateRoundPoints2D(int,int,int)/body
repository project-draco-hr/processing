{
  int perim=nPtVert - 1;
  tess.polyVertexCheck(nvertTot);
  tess.polyIndexCheck(nindTot);
  int vertIdx=tess.firstPolyVertex;
  int indIdx=tess.firstPolyIndex;
  IndexCache cache=tess.polyIndexCache;
  int index=in.renderMode == RETAINED ? cache.addNew() : cache.getLast();
  firstPointIndexCache=index;
  for (int i=in.firstVertex; i <= in.lastVertex; i++) {
    int count=cache.vertexCount[index];
    if (PGL.MAX_VERTEX_INDEX1 <= count + nPtVert) {
      index=cache.addNew();
      count=0;
    }
    float x0=in.vertices[3 * i + 0];
    float y0=in.vertices[3 * i + 1];
    int rgba=in.strokeColors[i];
    float val=0;
    float inc=(float)SINCOS_LENGTH / perim;
    tess.setPolyVertex(vertIdx,x0,y0,0,rgba,false);
    vertIdx++;
    for (int k=0; k < perim; k++) {
      tess.setPolyVertex(vertIdx,x0 + 0.5f * cosLUT[(int)val] * strokeWeight,y0 + 0.5f * sinLUT[(int)val] * strokeWeight,0,rgba,false);
      vertIdx++;
      val=(val + inc) % SINCOS_LENGTH;
    }
    for (int k=1; k < nPtVert - 1; k++) {
      tess.polyIndices[indIdx++]=(short)(count + 0);
      tess.polyIndices[indIdx++]=(short)(count + k);
      tess.polyIndices[indIdx++]=(short)(count + k + 1);
    }
    tess.polyIndices[indIdx++]=(short)(count + 0);
    tess.polyIndices[indIdx++]=(short)(count + 1);
    tess.polyIndices[indIdx++]=(short)(count + nPtVert - 1);
    cache.incCounts(index,3 * (nPtVert - 1),nPtVert);
  }
  lastPointIndexCache=lastPolyIndexCache=index;
}
