{
  if (PGL.MAX_VERTEX_INDEX1 <= vertFirst + vertCount) {
    cacheIndex=cache.addNew();
    vertFirst=0;
  }
  int indCount=0;
switch (primitive) {
case TRIANGLE_FAN:
    indCount=3 * (vertCount - 2);
  for (int i=1; i < vertCount - 1; i++) {
    addIndex(0);
    addIndex(i);
    addIndex(i + 1);
    if (calcNormals)     calcTriNormal(0,i,i + 1);
  }
break;
case TRIANGLE_STRIP:
indCount=3 * (vertCount - 2);
for (int i=1; i < vertCount - 1; i++) {
if (i % 2 == 0) {
addIndex(i + 1);
addIndex(i);
addIndex(i - 1);
if (calcNormals) calcTriNormal(i + 1,i,i - 1);
}
 else {
addIndex(i - 1);
addIndex(i);
addIndex(i + 1);
if (calcNormals) calcTriNormal(i - 1,i,i + 1);
}
}
break;
case TRIANGLES:
indCount=vertCount;
for (int i=0; i < vertCount; i++) {
addIndex(i);
}
if (calcNormals) {
for (int tr=0; tr < vertCount / 3; tr++) {
int i0=3 * tr + 0;
int i1=3 * tr + 1;
int i2=3 * tr + 2;
calcTriNormal(i0,i1,i2);
}
}
break;
}
cache.incCounts(cacheIndex,indCount,vertCount);
lastFillIndexCache=cacheIndex;
}
