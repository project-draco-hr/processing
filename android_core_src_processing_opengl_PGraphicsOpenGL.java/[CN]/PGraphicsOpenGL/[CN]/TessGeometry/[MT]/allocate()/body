{
  polyVertices=new float[4 * PGL.DEFAULT_TESS_VERTICES];
  polyColors=new int[PGL.DEFAULT_TESS_VERTICES];
  polyNormals=new float[3 * PGL.DEFAULT_TESS_VERTICES];
  polyTexcoords=new float[2 * PGL.DEFAULT_TESS_VERTICES];
  polyAmbient=new int[PGL.DEFAULT_TESS_VERTICES];
  polySpecular=new int[PGL.DEFAULT_TESS_VERTICES];
  polyEmissive=new int[PGL.DEFAULT_TESS_VERTICES];
  polyShininess=new float[PGL.DEFAULT_TESS_VERTICES];
  polyIndices=new short[PGL.DEFAULT_TESS_VERTICES];
  lineVertices=new float[4 * PGL.DEFAULT_TESS_VERTICES];
  lineColors=new int[PGL.DEFAULT_TESS_VERTICES];
  lineAttribs=new float[4 * PGL.DEFAULT_TESS_VERTICES];
  lineIndices=new short[PGL.DEFAULT_TESS_VERTICES];
  pointVertices=new float[4 * PGL.DEFAULT_TESS_VERTICES];
  pointColors=new int[PGL.DEFAULT_TESS_VERTICES];
  pointAttribs=new float[2 * PGL.DEFAULT_TESS_VERTICES];
  pointIndices=new short[PGL.DEFAULT_TESS_VERTICES];
  if (PGL.USE_DIRECT_VERTEX_BUFFERS) {
    polyVerticesBuffer=PGL.allocateDirectFloatBuffer(4 * PGL.DEFAULT_TESS_VERTICES);
    polyColorsBuffer=PGL.allocateDirectIntBuffer(PGL.DEFAULT_TESS_VERTICES);
    polyNormalsBuffer=PGL.allocateDirectFloatBuffer(3 * PGL.DEFAULT_TESS_VERTICES);
    polyTexcoordsBuffer=PGL.allocateDirectFloatBuffer(2 * PGL.DEFAULT_TESS_VERTICES);
    polyAmbientBuffer=PGL.allocateDirectIntBuffer(PGL.DEFAULT_TESS_VERTICES);
    polySpecularBuffer=PGL.allocateDirectIntBuffer(PGL.DEFAULT_TESS_VERTICES);
    polyEmissiveBuffer=PGL.allocateDirectIntBuffer(PGL.DEFAULT_TESS_VERTICES);
    polyShininessBuffer=PGL.allocateDirectFloatBuffer(PGL.DEFAULT_TESS_VERTICES);
    polyIndicesBuffer=PGL.allocateDirectShortBuffer(PGL.DEFAULT_TESS_VERTICES);
    lineVerticesBuffer=PGL.allocateDirectFloatBuffer(4 * PGL.DEFAULT_TESS_VERTICES);
    lineColorsBuffer=PGL.allocateDirectIntBuffer(PGL.DEFAULT_TESS_VERTICES);
    lineAttribsBuffer=PGL.allocateDirectFloatBuffer(4 * PGL.DEFAULT_TESS_VERTICES);
    lineIndicesBuffer=PGL.allocateDirectShortBuffer(PGL.DEFAULT_TESS_VERTICES);
    pointVerticesBuffer=PGL.allocateDirectFloatBuffer(4 * PGL.DEFAULT_TESS_VERTICES);
    pointColorsBuffer=PGL.allocateDirectIntBuffer(PGL.DEFAULT_TESS_VERTICES);
    pointAttribsBuffer=PGL.allocateDirectFloatBuffer(2 * PGL.DEFAULT_TESS_VERTICES);
    pointIndicesBuffer=PGL.allocateDirectShortBuffer(PGL.DEFAULT_TESS_VERTICES);
  }
 else {
    polyVerticesBuffer=FloatBuffer.wrap(polyVertices);
    polyColorsBuffer=IntBuffer.wrap(polyColors);
    polyNormalsBuffer=FloatBuffer.wrap(polyNormals);
    polyTexcoordsBuffer=FloatBuffer.wrap(polyTexcoords);
    polyAmbientBuffer=IntBuffer.wrap(polyAmbient);
    polySpecularBuffer=IntBuffer.wrap(polySpecular);
    polyEmissiveBuffer=IntBuffer.wrap(polyEmissive);
    polyShininessBuffer=FloatBuffer.wrap(polyShininess);
    polyIndicesBuffer=ShortBuffer.wrap(polyIndices);
    lineVerticesBuffer=FloatBuffer.wrap(lineVertices);
    lineColorsBuffer=IntBuffer.wrap(lineColors);
    lineAttribsBuffer=FloatBuffer.wrap(lineAttribs);
    lineIndicesBuffer=ShortBuffer.wrap(lineIndices);
    pointVerticesBuffer=FloatBuffer.wrap(pointVertices);
    pointColorsBuffer=IntBuffer.wrap(pointColors);
    pointAttribsBuffer=FloatBuffer.wrap(pointAttribs);
    pointIndicesBuffer=ShortBuffer.wrap(pointIndices);
  }
  clear();
}
