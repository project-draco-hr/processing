{
  BaseShader shader;
  if (lit) {
    if (tex) {
      if (polyTexlightShader == null) {
        if (defPolyTexlightShader == null) {
          defPolyTexlightShader=new PolyTexlightShader(parent,defPolyTexlightShaderVertURL,defPolyTexShaderFragURL);
        }
        shader=defPolyTexlightShader;
        texlightShaderCheck();
      }
 else {
        shader=polyTexlightShader;
      }
    }
 else {
      if (polyLightShader == null) {
        if (defPolyLightShader == null) {
          defPolyLightShader=new PolyLightShader(parent,defPolyLightShaderVertURL,defPolyNoTexShaderFragURL);
        }
        shader=defPolyLightShader;
        lightShaderCheck();
      }
 else {
        shader=polyLightShader;
      }
    }
  }
 else {
    if (tex) {
      if (polyTexShader == null) {
        if (defPolyTexShader == null) {
          defPolyTexShader=new PolyTexShader(parent,defPolyTexShaderVertURL,defPolyTexShaderFragURL);
        }
        shader=defPolyTexShader;
        texShaderCheck();
      }
 else {
        shader=polyTexShader;
      }
    }
 else {
      if (polyColorShader == null) {
        if (defPolyColorShader == null) {
          defPolyColorShader=new PolyColorShader(parent,defPolyColorShaderVertURL,defPolyNoTexShaderFragURL);
        }
        shader=defPolyColorShader;
        colorShaderCheck();
      }
 else {
        shader=polyColorShader;
      }
    }
  }
  shader.setRenderer(this);
  shader.loadAttributes();
  shader.loadUniforms();
  return shader;
}
