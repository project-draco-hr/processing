{
  PShader shader;
  if (kind == PShader.FLAT_SHADER) {
    shader=new PolyFlatShader(parent);
    shader.setVertexShader(defPolyFlatShaderVertURL);
  }
 else   if (kind == PShader.LIGHT_SHADER) {
    shader=new PolyLightShader(parent);
    shader.setVertexShader(defPolyLightShaderVertURL);
  }
 else   if (kind == PShader.TEXTURE_SHADER) {
    shader=new PolyTexShader(parent);
    shader.setVertexShader(defPolyTexShaderVertURL);
  }
 else   if (kind == PShader.FULL_SHADER) {
    shader=new PolyFullShader(parent);
    shader.setVertexShader(defPolyFullShaderVertURL);
  }
 else   if (kind == PShader.LINE3D_SHADER) {
    shader=new LineShader(parent);
    shader.setVertexShader(defLineShaderVertURL);
  }
 else   if (kind == PShader.POINT3D_SHADER) {
    shader=new PointShader(parent);
    shader.setVertexShader(defPointShaderVertURL);
  }
 else {
    PGraphics.showWarning("Wrong shader type");
    return null;
  }
  shader.setFragmentShader(fragFilename);
  return shader;
}
