{
  int len=w * h;
  if (nativePixels == null || nativePixels.length < len) {
    nativePixels=new int[len];
    nativePixelBuffer=PGL.allocateIntBuffer(nativePixels);
  }
  try {
    if (0 < x || 0 < y || w < width || h < height) {
      int offset0=y * width + x;
      int offset1=0;
      for (int yc=y; yc < y + h; yc++) {
        System.arraycopy(pixels,offset0,nativePixels,offset1,w);
        offset0+=width;
        offset1+=w;
      }
    }
 else {
      PApplet.arrayCopy(pixels,0,nativePixels,0,len);
    }
    PGL.javaToNativeARGB(nativePixels,w,h);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  PGL.putIntArray(nativePixelBuffer,nativePixels);
  if (primarySurface && !pgl.isFBOBacked()) {
    loadTextureImpl(POINT,false);
  }
  boolean needToDrawTex=primarySurface && (!pgl.isFBOBacked() || (pgl.isFBOBacked() && pgl.isMultisampled())) || offscreenMultisample;
  if (needToDrawTex) {
    pgl.copyToTexture(texture.glTarget,texture.glFormat,texture.glName,x,y,w,h,nativePixelBuffer);
    beginPixelsOp(OP_WRITE);
    drawTexture(x,y,w,h);
    endPixelsOp();
  }
 else {
    pgl.copyToTexture(texture.glTarget,texture.glFormat,texture.glName,x,height - (y + h),w,h,nativePixelBuffer);
  }
}
