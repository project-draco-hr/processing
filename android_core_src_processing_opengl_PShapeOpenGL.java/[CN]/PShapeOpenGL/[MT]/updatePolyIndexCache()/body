{
  IndexCache cache=tessGeo.polyIndexCache;
  if (family == GROUP) {
    firstPolyIndexCache=lastPolyIndexCache=-1;
    int gindex=-1;
    for (int i=0; i < childCount; i++) {
      PShapeOpenGL child=(PShapeOpenGL)children[i];
      int first=child.firstPolyIndexCache;
      int count=-1 < first ? child.lastPolyIndexCache - first + 1 : -1;
      for (int n=first; n < first + count; n++) {
        if (gindex == -1) {
          gindex=cache.addNew(n);
          firstPolyIndexCache=gindex;
        }
 else {
          if (cache.vertexOffset[gindex] == cache.vertexOffset[n]) {
            cache.incCounts(gindex,cache.indexCount[n],cache.vertexCount[n]);
          }
 else {
            gindex=cache.addNew(n);
          }
        }
      }
      if (-1 < child.firstPolyVertex) {
        if (firstPolyVertex == -1)         firstPolyVertex=Integer.MAX_VALUE;
        firstPolyVertex=PApplet.min(firstPolyVertex,child.firstPolyVertex);
      }
      if (-1 < child.lastPolyVertex) {
        lastPolyVertex=PApplet.max(lastPolyVertex,child.lastPolyVertex);
      }
    }
    lastPolyIndexCache=gindex;
  }
 else {
    firstPolyVertex=lastPolyVertex=cache.vertexOffset[firstPolyIndexCache];
    for (int n=firstPolyIndexCache; n <= lastPolyIndexCache; n++) {
      int ioffset=cache.indexOffset[n];
      int icount=cache.indexCount[n];
      int vcount=cache.vertexCount[n];
      if (PGL.MAX_VERTEX_INDEX1 <= root.polyVertexRel + vcount || (is2D() && startStrokedTex(n))) {
        root.polyVertexRel=0;
        root.polyVertexOffset=root.polyVertexAbs;
        cache.indexOffset[n]=root.polyIndexOffset;
      }
 else       tessGeo.incPolyIndices(ioffset,ioffset + icount - 1,root.polyVertexRel);
      cache.vertexOffset[n]=root.polyVertexOffset;
      if (is2D())       setFirstStrokeVertex(n,lastPolyVertex);
      root.polyIndexOffset+=icount;
      root.polyVertexAbs+=vcount;
      root.polyVertexRel+=vcount;
      lastPolyVertex+=vcount;
    }
    lastPolyVertex--;
    if (is2D())     setLastStrokeVertex(lastPolyVertex);
  }
}
