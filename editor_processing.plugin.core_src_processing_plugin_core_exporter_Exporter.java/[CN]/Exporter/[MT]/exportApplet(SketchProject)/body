{
  if (sp == null)   return false;
  if (!sp.getProject().isAccessible())   return false;
  try {
    sp.fullBuild(null);
  }
 catch (  CoreException e) {
    ProcessingLog.logError(e);
    return false;
  }
  if (!sp.wasLastBuildSuccessful()) {
    ProcessingLog.logError("Could not export " + sp.getProject().getName() + ". There were erros building the project.",null);
    return false;
  }
  IFile code=sp.getMainFile();
  if (code == null)   return false;
  String codeContents=ProcessingUtilities.readFile(code);
  IFolder exportFolder=sp.getAppletFolder(true);
  HashMap<String,Object> zipFileContents=new HashMap<String,Object>();
  int wide=sp.getWidth();
  int high=sp.getHeight();
  String renderer=sp.getRenderer();
  String description="";
  String[] javadoc=ProcessingUtilities.match(codeContents,"/\\*{2,}(.*)\\*+/");
  if (javadoc != null) {
    StringBuffer dbuffer=new StringBuffer();
    String[] pieces=ProcessingUtilities.split(javadoc[1],'\n');
    for (    String line : pieces) {
      String[] m=ProcessingUtilities.match(line,"^\\s*\\*+(.*)");
      dbuffer.append(m != null ? m[1] : line);
      dbuffer.append('\n');
    }
    description=dbuffer.toString();
  }
  StringBuffer sources=new StringBuffer();
  try {
    for (    IResource r : sp.getProject().members()) {
      if (!(r instanceof IFile))       continue;
      if (r.getName().startsWith("."))       continue;
      if ("pde".equalsIgnoreCase(r.getFileExtension())) {
        try {
          r.copy(exportFolder.getFullPath().append(r.getName()),true,null);
          sources.append("<a href=\"" + r.getName() + "\">"+ r.getName().subSequence(0,r.getName().lastIndexOf(".") - 1)+ "</a> ");
        }
 catch (        CoreException e) {
          ProcessingLog.logError("Sketch source files could not be included in export of " + sp.getProject().getName() + ". Trying to continue export anyway.",e);
        }
      }
    }
  }
 catch (  CoreException e) {
    ProcessingLog.logError(e);
  }
  boolean separateJar=true;
  String LOADING_IMAGE="loading.gif";
  IFile loadingImage=sp.getProject().getFile(LOADING_IMAGE);
  try {
    loadingImage.copy(exportFolder.getFullPath().append(LOADING_IMAGE),true,null);
  }
 catch (  CoreException e) {
    try {
      File exportResourcesFolder=new File(ProcessingCore.getProcessingCore().getPluginResourceFolder().getCanonicalPath(),"export");
      File loadingImageCoreResource=new File(exportResourcesFolder,LOADING_IMAGE);
      ProcessingUtilities.copyFile(loadingImageCoreResource,new File(exportFolder.getLocation().toFile(),LOADING_IMAGE));
    }
 catch (    Exception ex) {
      ProcessingLog.logError("Could not access the Processing Plug-in Core resources. " + "Export aborted.",ex);
      return false;
    }
  }
  FileOutputStream zipOutputFile;
  try {
    zipOutputFile=new FileOutputStream(new File(exportFolder.getLocation().toFile(),sp.getProject().getName() + ".jar"));
  }
 catch (  FileNotFoundException fnfe) {
    ProcessingLog.logError(" ",fnfe);
    return false;
  }
  ZipOutputStream zos=new ZipOutputStream(zipOutputFile);
  ZipEntry entry;
  StringBuffer archives=new StringBuffer();
  archives.append(sp.getProject().getName() + ".jar");
  IFolder codeFolder=sp.getCodeFolder();
  if (codeFolder != null) {
    try {
      for (      IResource r : codeFolder.members()) {
        if (!(r instanceof IFile))         continue;
        if (r.getName().startsWith("."))         continue;
        if ("jar".equalsIgnoreCase(r.getFileExtension()) || "zip".equalsIgnoreCase(r.getFileExtension())) {
          r.copy(exportFolder.getFullPath().append(r.getName()),true,null);
        }
      }
    }
 catch (    CoreException e) {
      ProcessingLog.logError("Code Folder entries could not be included in export." + "Export for " + sp.getProject().getName() + " may not function properly.",e);
    }
  }
  File openglLibrary=new File(ProcessingCore.getProcessingCore().getCoreLibsFolder(),"opengl/library/opengl.jar");
  String openglLibraryPath=openglLibrary.getAbsolutePath();
  boolean openglApplet=false;
  ArrayList<IPath> sketchLibraryImportPaths=sp.getLibraryPaths();
  if (sketchLibraryImportPaths != null) {
    for (    IPath path : sketchLibraryImportPaths) {
      if (path.toOSString().equals(openglLibraryPath))       openglApplet=true;
    }
  }
  ProcessingLog.logInfo("Could not export " + sp.getProject().getName() + " because the exporting applets is not finished.");
  return false;
}
