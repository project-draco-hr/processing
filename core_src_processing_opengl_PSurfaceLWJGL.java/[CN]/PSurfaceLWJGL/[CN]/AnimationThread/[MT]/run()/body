{
  int WIDTH=sketchWidth;
  int HEIGHT=sketchHeight;
  window=glfwCreateWindow(WIDTH,HEIGHT,"Hello World!",NULL,NULL);
  if (window == NULL)   throw new RuntimeException("Failed to create the GLFW window");
  glfwSetKeyCallback(window,keyCallback=new GLFWKeyCallback(){
    @Override public void invoke(    long window,    int key,    int scancode,    int action,    int mods){
      System.out.println("Key pressed: " + key + ", "+ scancode+ " "+ action);
      if (key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE)       glfwSetWindowShouldClose(window,GL_TRUE);
    }
  }
);
  glfwSetMouseButtonCallback(window,mouseCallback=new GLFWMouseButtonCallback(){
    @Override public void invoke(    long window,    int button,    int action,    int mods){
      System.out.println("mouse pressed: " + button + ", "+ action+ " "+ mods);
    }
  }
);
  glfwSetCursorPosCallback(window,posCallback=new GLFWCursorPosCallback(){
    @Override public void invoke(    long window,    double xpos,    double ypos){
      System.out.println("mouse moved: " + xpos + " "+ ypos);
      long millis=System.currentTimeMillis();
      int modifiers=0;
      int x=(int)xpos;
      int y=(int)ypos;
      int button=0;
      int action=0;
      action=MouseEvent.MOVE;
      int count=0;
      MouseEvent me=new MouseEvent(null,millis,action,modifiers,x,y,button,count);
      sketch.postEvent(me);
    }
  }
);
  glfwSetScrollCallback(window,scrollCallback=new GLFWScrollCallback(){
    @Override public void invoke(    long window,    double xoffset,    double yoffset){
      System.out.println("mouse scrolled: " + xoffset + " "+ yoffset);
    }
  }
);
  ByteBuffer vidmode=glfwGetVideoMode(glfwGetPrimaryMonitor());
  glfwSetWindowPos(window,(GLFWvidmode.width(vidmode) - WIDTH) / 2,(GLFWvidmode.height(vidmode) - HEIGHT) / 2);
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  glfwShowWindow(window);
  GLContext.createFromCurrent();
  glClearColor(1.0f,0.0f,0.0f,0.0f);
  while (glfwWindowShouldClose(window) == GL_FALSE) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    pgl.setThread(thread);
    checkPause();
    sketch.handleDraw();
    glfwSwapBuffers(window);
    glfwPollEvents();
  }
}
