{
  if (screen == null)   return;
  Sketch sketch=editor.getSketch();
  if (sketch == null)   return;
  Dimension size=getSize();
  if ((size.width != sizeW) || (size.height != sizeH)) {
    if ((size.width > imageW) || (size.height > imageH)) {
      offscreen=null;
    }
 else {
      sizeW=size.width;
      sizeH=size.height;
    }
  }
  if (offscreen == null) {
    sizeW=size.width;
    sizeH=size.height;
    imageW=sizeW;
    imageH=sizeH;
    if (Toolkit.highResDisplay()) {
      offscreen=createImage(imageW * 2,imageH * 2);
    }
 else {
      offscreen=createImage(imageW,imageH);
    }
  }
  Graphics g=offscreen.getGraphics();
  g.setFont(font);
  if (fontAscent == 0) {
    fontAscent=(int)Toolkit.getAscent(g);
  }
  Graphics2D g2=(Graphics2D)g;
  if (Toolkit.highResDisplay()) {
    g2.scale(2,2);
    if (Base.isUsableOracleJava()) {
      g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    }
  }
 else {
    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  }
  g.setColor(hiding ? hideColor : bgColor);
  g.fillRect(0,0,imageW,imageH);
  if (!hiding) {
    editor.getMode().drawBackground(g,Preferences.GRID_SIZE);
  }
  if (tabs.length != sketch.getCodeCount()) {
    tabs=new Tab[sketch.getCodeCount()];
    for (int i=0; i < tabs.length; i++) {
      tabs[i]=new Tab(i);
    }
    visitOrder=new Tab[sketch.getCodeCount() - 1];
  }
  int leftover=ARROW_GAP_WIDTH + ARROW_WIDTH + MARGIN_WIDTH;
  int tabMax=getWidth() - leftover;
  for (  Tab tab : tabs) {
    SketchCode code=sketch.getCode(tab.index);
    tab.textVisible=true;
    tab.lastVisited=code.lastVisited();
    boolean hide=editor.getMode().hideExtension(code.getExtension());
    tab.text=hide ? code.getPrettyName() : code.getFileName();
    tab.textWidth=(int)font.getStringBounds(tab.text,g2.getFontRenderContext()).getWidth();
  }
  if (!placeTabs(MARGIN_WIDTH,tabMax,null)) {
    int index=0;
    for (int i=tabs.length - 1; i > 0; --i) {
      visitOrder[index++]=tabs[i];
    }
    Arrays.sort(visitOrder);
    for (int i=0; i < visitOrder.length; i++) {
      tabs[visitOrder[i].index].textVisible=false;
      if (placeTabs(MARGIN_WIDTH,tabMax,null)) {
        break;
      }
    }
  }
  placeTabs(MARGIN_WIDTH,tabMax,g2);
  menuLeft=tabs[tabs.length - 1].right + ARROW_GAP_WIDTH;
  menuRight=menuLeft + ARROW_WIDTH;
  int arrowY=(getHeight() - TAB_HEIGHT - TAB_STRETCH) + (TAB_HEIGHT - ARROW_HEIGHT) / 2;
  g.drawImage(tabArrow,menuLeft,arrowY,ARROW_WIDTH,ARROW_HEIGHT,null);
  screen.drawImage(offscreen,0,0,imageW,imageH,null);
}
