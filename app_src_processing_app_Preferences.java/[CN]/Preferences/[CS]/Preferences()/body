{
  dialog=new JFrame("Preferences");
  dialog.setResizable(false);
  Container pain=dialog.getContentPane();
  pain.setLayout(null);
  int top=GUI_BIG;
  int left=GUI_BIG;
  int right=0;
  JLabel label;
  JButton button;
  Dimension d, d2;
  int h, vmax;
  label=new JLabel("Sketchbook location:");
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height;
  sketchbookLocationField=new JTextField(40);
  pain.add(sketchbookLocationField);
  d=sketchbookLocationField.getPreferredSize();
  button=new JButton(PROMPT_BROWSE);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      File dflt=new File(sketchbookLocationField.getText());
      File file=Base.selectFolder("Select new sketchbook location",dflt,dialog);
      if (file != null) {
        sketchbookLocationField.setText(file.getAbsolutePath());
      }
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  vmax=Math.max(d.height,d2.height);
  sketchbookLocationField.setBounds(left,top + (vmax - d.height) / 2,d.width,d.height);
  h=left + d.width + GUI_SMALL;
  button.setBounds(h,top + (vmax - d2.height) / 2,d2.width,d2.height);
  right=Math.max(right,h + d2.width + GUI_BIG);
  top+=vmax + GUI_BETWEEN;
  Container box=Box.createHorizontalBox();
  label=new JLabel("Editor font size: ");
  box.add(label);
  fontSizeField=new JTextField(4);
  box.add(fontSizeField);
  label=new JLabel("  (requires restart of Processing)");
  box.add(label);
  pain.add(box);
  d=box.getPreferredSize();
  box.setBounds(left,top,d.width,d.height);
  Font editorFont=Preferences.getFont("editor.font");
  fontSizeField.setText(String.valueOf(editorFont.getSize()));
  top+=d.height + GUI_BETWEEN;
  Container memoryBox=Box.createHorizontalBox();
  memoryOverrideBox=new JCheckBox("Increase maximum available memory to ");
  memoryBox.add(memoryOverrideBox);
  memoryField=new JTextField(4);
  memoryBox.add(memoryField);
  memoryBox.add(new JLabel(" MB"));
  pain.add(memoryBox);
  d=memoryBox.getPreferredSize();
  memoryBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  exportSeparateBox=new JCheckBox("Use multiple .jar files when exporting applets " + "(ignored when using libraries)");
  pain.add(exportSeparateBox);
  d=exportSeparateBox.getPreferredSize();
  exportSeparateBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  deletePreviousBox=new JCheckBox("Delete previous applet or application folder on export");
  pain.add(deletePreviousBox);
  d=deletePreviousBox.getPreferredSize();
  deletePreviousBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  externalEditorBox=new JCheckBox("Use external editor");
  pain.add(externalEditorBox);
  d=externalEditorBox.getPreferredSize();
  externalEditorBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  checkUpdatesBox=new JCheckBox("Check for updates on startup");
  pain.add(checkUpdatesBox);
  d=checkUpdatesBox.getPreferredSize();
  checkUpdatesBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  if (Base.isWindows()) {
    autoAssociateBox=new JCheckBox("Automatically associate .pde files with Processing");
    pain.add(autoAssociateBox);
    d=autoAssociateBox.getPreferredSize();
    autoAssociateBox.setBounds(left,top,d.width + 10,d.height);
    right=Math.max(right,left + d.width);
    top+=d.height + GUI_BETWEEN;
  }
  label=new JLabel("More preferences can be edited directly in the file");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  label=new JLabel(preferencesFile.getAbsolutePath());
  final JLabel clickable=label;
  label.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      Base.openFolder(Base.getSettingsFolder());
    }
    public void mouseEntered(    MouseEvent e){
      clickable.setForeground(new Color(0,0,140));
    }
    public void mouseExited(    MouseEvent e){
      clickable.setForeground(Color.BLACK);
    }
  }
);
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  label=new JLabel("(edit only when Processing is not running)");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  button=new JButton(PROMPT_OK);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      applyFrame();
      disposeFrame();
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  BUTTON_HEIGHT=d2.height;
  h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  h+=BUTTON_WIDTH + GUI_SMALL;
  button=new JButton(PROMPT_CANCEL);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      disposeFrame();
    }
  }
);
  pain.add(button);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  top+=BUTTON_HEIGHT + GUI_BETWEEN;
  wide=right + GUI_BIG;
  high=top + GUI_SMALL;
  dialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      disposeFrame();
    }
  }
);
  ActionListener disposer=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      disposeFrame();
    }
  }
;
  Base.registerWindowCloseKeys(dialog.getRootPane(),disposer);
  Base.setIcon(dialog);
  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
  dialog.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);
  dialog.pack();
  Insets insets=dialog.getInsets();
  dialog.setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);
  pain.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      KeyStroke wc=Base.WINDOW_CLOSE_KEYSTROKE;
      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
        disposeFrame();
      }
    }
  }
);
}
