{
  this.base=base;
  dialog=new JFrame(Language.text("preferences"));
  dialog.setResizable(false);
  Container pain=dialog.getContentPane();
  pain.setLayout(null);
  int top=GUI_BIG;
  int left=GUI_BIG;
  int right=0;
  JLabel label;
  JButton button;
  Dimension d, d2;
  int h, vmax;
  label=new JLabel(Language.text("preferences.sketchbook_location") + ":");
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height;
  sketchbookLocationField=new JTextField(40);
  pain.add(sketchbookLocationField);
  d=sketchbookLocationField.getPreferredSize();
  button=new JButton(PROMPT_BROWSE);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      File dflt=new File(sketchbookLocationField.getText());
      PApplet.selectFolder(Language.text("preferences.sketchbook_location.popup"),"sketchbookCallback",dflt,Preferences.this,dialog);
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  vmax=Math.max(d.height,d2.height);
  sketchbookLocationField.setBounds(left,top + (vmax - d.height) / 2,d.width,d.height);
  h=left + d.width + GUI_SMALL;
  button.setBounds(h,top + (vmax - d2.height) / 2,d2.width,d2.height);
  right=Math.max(right,h + d2.width + GUI_BIG);
  top+=vmax + GUI_BETWEEN;
  Container languageBox=Box.createHorizontalBox();
  JLabel languageLabel=new JLabel(Language.text("preferences.language") + ": ");
  languageBox.add(languageLabel);
  languageSelectionBox=new JComboBox();
  HashMap<String,String> languages=Language.getLanguages();
  String[] languageSelection=new String[languages.size()];
  languageSelection[0]=languages.get(Language.getLanguage());
  int i=1;
  for (  Map.Entry<String,String> lang : languages.entrySet()) {
    if (!lang.getKey().equals(Language.getLanguage())) {
      languageSelection[i++]=lang.getValue();
    }
  }
  languageSelectionBox.setModel(new DefaultComboBoxModel(languageSelection));
  languageBox.add(languageSelectionBox);
  label=new JLabel(" (" + Language.text("preferences.requires_restart") + ")");
  languageBox.add(label);
  pain.add(languageBox);
  d=languageBox.getPreferredSize();
  languageBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  Container box=Box.createHorizontalBox();
  label=new JLabel(Language.text("preferences.editor_font_size") + ": ");
  box.add(label);
  fontSizeField=new JTextField(4);
  box.add(fontSizeField);
  label=new JLabel(" (" + Language.text("preferences.requires_restart") + ")");
  box.add(label);
  pain.add(box);
  d=box.getPreferredSize();
  box.setBounds(left,top,d.width,d.height);
  Font editorFont=Preferences.getFont("editor.font");
  fontSizeField.setText(String.valueOf(editorFont.getSize()));
  top+=d.height + GUI_BETWEEN;
  editorAntialiasBox=new JCheckBox(Language.text("preferences.use_smooth_text") + " (" + Language.text("preferences.requires_restart")+ ")");
  pain.add(editorAntialiasBox);
  d=editorAntialiasBox.getPreferredSize();
  editorAntialiasBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  inputMethodBox=new JCheckBox(Language.text("preferences.enable_complex_text_input") + " (" + Language.text("preferences.enable_complex_text_input_example")+ ", "+ Language.text("preferences.requires_restart")+ ")");
  pain.add(inputMethodBox);
  d=inputMethodBox.getPreferredSize();
  inputMethodBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  Container memoryBox=Box.createHorizontalBox();
  memoryOverrideBox=new JCheckBox(Language.text("preferences.increase_max_memory") + ": ");
  memoryBox.add(memoryOverrideBox);
  memoryField=new JTextField(4);
  memoryBox.add(memoryField);
  memoryBox.add(new JLabel(" MB"));
  pain.add(memoryBox);
  d=memoryBox.getPreferredSize();
  memoryBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  deletePreviousBox=new JCheckBox(Language.text("preferences.delete_previous_folder_on_export"));
  pain.add(deletePreviousBox);
  d=deletePreviousBox.getPreferredSize();
  deletePreviousBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  whinyBox=new JCheckBox(Language.text("preferences.hide_toolbar_background_image") + " (" + Language.text("preferences.requires_restart")+ ")");
  pain.add(whinyBox);
  d=whinyBox.getPreferredSize();
  whinyBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  checkUpdatesBox=new JCheckBox(Language.text("preferences.check_for_updates_on_startup"));
  pain.add(checkUpdatesBox);
  d=checkUpdatesBox.getPreferredSize();
  checkUpdatesBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  Container displayBox=Box.createHorizontalBox();
  JLabel displayLabel=new JLabel(Language.text("preferences.run_sketches_on_display") + ": ");
  final String tip="<html>" + Language.text("preferences.run_sketches_on_display.tip");
  displayLabel.setToolTipText(tip);
  displayBox.add(displayLabel);
  displaySelectionBox=new JComboBox();
  updateDisplayList();
  displayBox.add(displaySelectionBox);
  pain.add(displayBox);
  d=displayBox.getPreferredSize();
  displayBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  if (Base.isWindows()) {
    autoAssociateBox=new JCheckBox(Language.text("preferences.automatically_associate_pde_files"));
    pain.add(autoAssociateBox);
    d=autoAssociateBox.getPreferredSize();
    autoAssociateBox.setBounds(left,top,d.width + 10,d.height);
    right=Math.max(right,left + d.width);
    top+=d.height + GUI_BETWEEN;
  }
  if (Base.isMacOS()) {
    box=Box.createHorizontalBox();
    label=new JLabel(Language.text("preferences.launch_programs_in") + " ");
    box.add(label);
    bitsThirtyTwoButton=new JRadioButton("32-bit " + Language.text("preferences.launch_programs_in.mode") + "  ");
    box.add(bitsThirtyTwoButton);
    bitsSixtyFourButton=new JRadioButton("64-bit " + Language.text("preferences.launch_programs_in.mode"));
    box.add(bitsSixtyFourButton);
    ButtonGroup bg=new ButtonGroup();
    bg.add(bitsThirtyTwoButton);
    bg.add(bitsSixtyFourButton);
    pain.add(box);
    d=box.getPreferredSize();
    box.setBounds(left,top,d.width,d.height);
    top+=d.height + GUI_BETWEEN;
  }
  label=new JLabel(Language.text("preferences.file") + ":");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  label=new JLabel(preferencesFile.getAbsolutePath());
  final JLabel clickable=label;
  label.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      Base.openFolder(Base.getSettingsFolder());
    }
    public void mouseEntered(    MouseEvent e){
      clickable.setForeground(new Color(0,0,140));
    }
    public void mouseExited(    MouseEvent e){
      clickable.setForeground(Color.BLACK);
    }
  }
);
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  label=new JLabel("(" + Language.text("preferences.file.hint") + ")");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  button=new JButton(PROMPT_OK);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      applyFrame();
      disposeFrame();
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  BUTTON_HEIGHT=d2.height;
  h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  h+=BUTTON_WIDTH + GUI_SMALL;
  button=new JButton(PROMPT_CANCEL);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      disposeFrame();
    }
  }
);
  pain.add(button);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  top+=BUTTON_HEIGHT + GUI_BETWEEN;
  wide=right + GUI_BIG;
  high=top + GUI_SMALL;
  dialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      disposeFrame();
    }
  }
);
  ActionListener disposer=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      disposeFrame();
    }
  }
;
  Toolkit.registerWindowCloseKeys(dialog.getRootPane(),disposer);
  Toolkit.setIcon(dialog);
  Dimension screen=Toolkit.getScreenSize();
  dialog.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);
  dialog.pack();
  Insets insets=dialog.getInsets();
  dialog.setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);
  pain.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      KeyStroke wc=Toolkit.WINDOW_CLOSE_KEYSTROKE;
      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
        disposeFrame();
      }
    }
  }
);
}
