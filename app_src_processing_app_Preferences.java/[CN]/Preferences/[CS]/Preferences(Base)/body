{
  this.base=base;
  dialog=new JFrame("Preferences");
  dialog.setResizable(false);
  Container pain=dialog.getContentPane();
  pain.setLayout(null);
  int top=GUI_BIG;
  int left=GUI_BIG;
  int right=0;
  JLabel label;
  JButton button;
  Dimension d, d2;
  int h, vmax;
  label=new JLabel("Sketchbook location:");
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  top+=d.height;
  sketchbookLocationField=new JTextField(40);
  pain.add(sketchbookLocationField);
  d=sketchbookLocationField.getPreferredSize();
  button=new JButton(PROMPT_BROWSE);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      File dflt=new File(sketchbookLocationField.getText());
      PApplet.selectFolder("Select new sketchbook location","sketchbookCallback",dflt,Preferences.this,dialog);
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  vmax=Math.max(d.height,d2.height);
  sketchbookLocationField.setBounds(left,top + (vmax - d.height) / 2,d.width,d.height);
  h=left + d.width + GUI_SMALL;
  button.setBounds(h,top + (vmax - d2.height) / 2,d2.width,d2.height);
  right=Math.max(right,h + d2.width + GUI_BIG);
  top+=vmax + GUI_BETWEEN;
  Container fontBox=Box.createHorizontalBox();
  JLabel fontLabel=new JLabel("Editor and Console font ");
  final String fontTip="<html>" + "Select the font used in the Editor and the Console.<br/>" + "Only monospaced (fixed-width) fonts may be used, <br/>"+ "though the list may be imperfect.";
  fontLabel.setToolTipText(fontTip);
  fontBox.add(fontLabel);
  fontSelectionBox=new JComboBox(new Object[]{Toolkit.getMonoFontName()});
  fontSelectionBox.setToolTipText(fontTip);
  fontSelectionBox.setEnabled(false);
  fontBox.add(fontSelectionBox);
  pain.add(fontBox);
  d=fontBox.getPreferredSize();
  fontBox.setBounds(left,top,d.width + 150,d.height);
  top+=d.height + GUI_BETWEEN;
  Container box=Box.createHorizontalBox();
  label=new JLabel("Editor font size: ");
  box.add(label);
  fontSizeField=new JComboBox<Integer>(FONT_SIZES);
  fontSizeField.setEditable(true);
  box.add(fontSizeField);
  box.add(Box.createHorizontalStrut(GUI_BETWEEN));
  label=new JLabel("Console font size: ");
  box.add(label);
  consoleSizeField=new JComboBox<Integer>(FONT_SIZES);
  consoleSizeField.setEditable(true);
  box.add(consoleSizeField);
  pain.add(box);
  d=box.getPreferredSize();
  box.setBounds(left,top,d.width,d.height);
  fontSizeField.setSelectedItem(Preferences.getFont("editor.font.size"));
  top+=d.height + GUI_BETWEEN;
  Container colorBox=Box.createHorizontalBox();
  label=new JLabel("Background color when Presenting: ");
  colorBox.add(label);
  final String colorTip="<html>" + "Select the background color used when using Present.<br/>" + "Present is used to present a sketch in full-screen, <br/>"+ "accessible from the Sketch menu.";
  label.setToolTipText(colorTip);
  presentColor=new JTextField("      ");
  presentColor.setOpaque(true);
  presentColor.setEnabled(false);
  presentColor.setBorder(new CompoundBorder(BorderFactory.createMatteBorder(1,1,0,0,new Color(195,195,195)),BorderFactory.createMatteBorder(0,0,1,1,new Color(54,54,54))));
  presentColor.setBackground(Preferences.getColor("run.present.bgcolor"));
  presentColorHex=new JTextField(6);
  presentColorHex.setText(Preferences.get("run.present.bgcolor").substring(1));
  presentColorHex.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void removeUpdate(    DocumentEvent e){
      final String colorValue=presentColorHex.getText().toUpperCase();
      if (colorValue.length() == 7 && (colorValue.startsWith("#")))       EventQueue.invokeLater(new Runnable(){
        public void run(){
          presentColorHex.setText(colorValue.substring(1));
        }
      }
);
      if (colorValue.length() == 6 && colorValue.matches("[0123456789ABCDEF]*")) {
        presentColor.setBackground(new Color(Integer.parseInt(colorValue.substring(0,2),16),Integer.parseInt(colorValue.substring(2,4),16),Integer.parseInt(colorValue.substring(4,6),16)));
        if (!colorValue.equals(presentColorHex.getText()))         EventQueue.invokeLater(new Runnable(){
          public void run(){
            presentColorHex.setText(colorValue);
          }
        }
);
      }
    }
    @Override public void insertUpdate(    DocumentEvent e){
      final String colorValue=presentColorHex.getText().toUpperCase();
      if (colorValue.length() == 7 && (colorValue.startsWith("#")))       EventQueue.invokeLater(new Runnable(){
        public void run(){
          presentColorHex.setText(colorValue.substring(1));
        }
      }
);
      if (colorValue.length() == 6 && colorValue.matches("[0123456789ABCDEF]*")) {
        presentColor.setBackground(new Color(Integer.parseInt(colorValue.substring(0,2),16),Integer.parseInt(colorValue.substring(2,4),16),Integer.parseInt(colorValue.substring(4,6),16)));
        if (!colorValue.equals(presentColorHex.getText()))         EventQueue.invokeLater(new Runnable(){
          public void run(){
            presentColorHex.setText(colorValue);
          }
        }
);
      }
    }
    @Override public void changedUpdate(    DocumentEvent e){
    }
  }
);
  selector=new ColorChooser(dialog,false,Preferences.getColor("run.present.bgcolor"),"OK",new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String colorValue=selector.getHexColor();
      presentColorHex.setText(colorValue.substring(1));
      presentColor.setBackground(new Color(Integer.parseInt(colorValue.substring(1,3),16),Integer.parseInt(colorValue.substring(3,5),16),Integer.parseInt(colorValue.substring(5,7),16)));
      selector.hide();
    }
  }
);
  presentColor.addMouseListener(new MouseListener(){
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
    }
    @Override public void mouseExited(    MouseEvent e){
      dialog.setCursor(Cursor.DEFAULT_CURSOR);
    }
    @Override public void mouseEntered(    MouseEvent e){
      dialog.setCursor(Cursor.HAND_CURSOR);
    }
    @Override public void mouseClicked(    MouseEvent e){
      selector.show();
    }
  }
);
  label=new JLabel("#");
  colorBox.add(label);
  colorBox.add(presentColorHex);
  colorBox.add(Box.createHorizontalStrut(GUI_SMALL + 2 / 3 * GUI_SMALL));
  colorBox.add(presentColor);
  pain.add(colorBox);
  d=colorBox.getPreferredSize();
  colorBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  editorAntialiasBox=new JCheckBox("Use smooth text in editor window");
  pain.add(editorAntialiasBox);
  d=editorAntialiasBox.getPreferredSize();
  editorAntialiasBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  inputMethodBox=new JCheckBox("Enable complex text input " + "(i.e. Japanese, requires restart of Processing)");
  pain.add(inputMethodBox);
  d=inputMethodBox.getPreferredSize();
  inputMethodBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  Container memoryBox=Box.createHorizontalBox();
  memoryOverrideBox=new JCheckBox("Increase maximum available memory to ");
  memoryBox.add(memoryOverrideBox);
  memoryField=new JTextField(4);
  memoryBox.add(memoryField);
  memoryBox.add(new JLabel(" MB"));
  pain.add(memoryBox);
  d=memoryBox.getPreferredSize();
  memoryBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  deletePreviousBox=new JCheckBox("Delete previous application folder on export");
  pain.add(deletePreviousBox);
  d=deletePreviousBox.getPreferredSize();
  deletePreviousBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  whinyBox=new JCheckBox("Hide tab/toolbar background image (requires restart)");
  pain.add(whinyBox);
  d=whinyBox.getPreferredSize();
  whinyBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  checkUpdatesBox=new JCheckBox("Check for updates on startup");
  pain.add(checkUpdatesBox);
  d=checkUpdatesBox.getPreferredSize();
  checkUpdatesBox.setBounds(left,top,d.width + 10,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height + GUI_BETWEEN;
  Container displayBox=Box.createHorizontalBox();
  JLabel displayLabel=new JLabel("Run sketches on display ");
  final String tip="<html>" + "Sets the display where sketches are initially placed.<br>" + "As usual, if the sketch window is moved, it will re-open<br>"+ "at the same location, however when running in present<br>"+ "(full screen) mode, this display will always be used.";
  displayLabel.setToolTipText(tip);
  displayBox.add(displayLabel);
  displaySelectionBox=new JComboBox();
  updateDisplayList();
  displayBox.add(displaySelectionBox);
  pain.add(displayBox);
  d=displayBox.getPreferredSize();
  displayBox.setBounds(left,top,d.width,d.height);
  top+=d.height + GUI_BETWEEN;
  if (Base.isWindows()) {
    autoAssociateBox=new JCheckBox("Automatically associate .pde files with Processing");
    pain.add(autoAssociateBox);
    d=autoAssociateBox.getPreferredSize();
    autoAssociateBox.setBounds(left,top,d.width + 10,d.height);
    right=Math.max(right,left + d.width);
    top+=d.height + GUI_BETWEEN;
  }
  label=new JLabel("More preferences can be edited directly in the file");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  label=new JLabel(preferencesFile.getAbsolutePath());
  final JLabel clickable=label;
  label.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      Base.openFolder(Base.getSettingsFolder());
    }
    public void mouseEntered(    MouseEvent e){
      clickable.setForeground(new Color(0,0,140));
    }
    public void mouseExited(    MouseEvent e){
      clickable.setForeground(Color.BLACK);
    }
  }
);
  pain.add(label);
  d=label.getPreferredSize();
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  label=new JLabel("(edit only when Processing is not running)");
  pain.add(label);
  d=label.getPreferredSize();
  label.setForeground(Color.gray);
  label.setBounds(left,top,d.width,d.height);
  right=Math.max(right,left + d.width);
  top+=d.height;
  button=new JButton(PROMPT_OK);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      applyFrame();
      disposeFrame();
    }
  }
);
  pain.add(button);
  d2=button.getPreferredSize();
  BUTTON_HEIGHT=d2.height;
  h=right - (BUTTON_WIDTH + GUI_SMALL + BUTTON_WIDTH);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  h+=BUTTON_WIDTH + GUI_SMALL;
  button=new JButton(PROMPT_CANCEL);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      disposeFrame();
    }
  }
);
  pain.add(button);
  button.setBounds(h,top,BUTTON_WIDTH,BUTTON_HEIGHT);
  top+=BUTTON_HEIGHT + GUI_BETWEEN;
  wide=right + GUI_BIG;
  high=top + GUI_SMALL;
  dialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      disposeFrame();
    }
  }
);
  ActionListener disposer=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      disposeFrame();
    }
  }
;
  Toolkit.registerWindowCloseKeys(dialog.getRootPane(),disposer);
  Toolkit.setIcon(dialog);
  Dimension screen=Toolkit.getScreenSize();
  dialog.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);
  dialog.pack();
  Insets insets=dialog.getInsets();
  dialog.setSize(wide + insets.left + insets.right,high + insets.top + insets.bottom);
  pain.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      KeyStroke wc=Toolkit.WINDOW_CLOSE_KEYSTROKE;
      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
        disposeFrame();
      }
    }
  }
);
}
