{
  frame=new Frame(WINDOW_TITLE);
  windowListener=new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      editor.doQuit();
    }
  }
;
  frame.addWindowListener(windowListener);
  properties=new Properties();
  try {
    if (PdeBase.platform == PdeBase.MACOSX) {
      String pkg="Proce55ing.app/Contents/Resources/Java/";
      properties.load(new FileInputStream(pkg + "pde.properties"));
      properties.load(new FileInputStream(pkg + "pde.properties_macosx"));
    }
 else     if (PdeBase.platform == PdeBase.MACOS9) {
      properties.load(new FileInputStream("lib/pde.properties"));
      properties.load(new FileInputStream("lib/pde.properties_macos9"));
    }
 else {
      properties.load(getClass().getResource("pde.properties").openStream());
      String platformProps="pde.properties_" + platforms[platform];
      properties.load(getClass().getResource(platformProps).openStream());
    }
  }
 catch (  Exception e) {
    System.err.println("Error reading pde.properties");
    e.printStackTrace();
    System.exit(1);
  }
  int width=getInteger("window.width",600);
  int height=getInteger("window.height",350);
  editor=new PdeEditor(this);
  frame.setLayout(new BorderLayout());
  frame.add("Center",editor);
  MenuBar menubar=new MenuBar();
  Menu menu;
  MenuItem item;
  menu=new Menu("File");
  menu.add(new MenuItem("New",new MenuShortcut('N')));
  sketchbookMenu=new Menu("Open");
  menu.add(sketchbookMenu);
  menu.add(new MenuItem("Save",new MenuShortcut('S')));
  menu.add(new MenuItem("Save as...",new MenuShortcut('S',true)));
  menu.add(new MenuItem("Export to Web",new MenuShortcut('E')));
  item=new MenuItem("Export Application",new MenuShortcut('E',true));
  item.setEnabled(false);
  menu.add(item);
  menu.addSeparator();
  menu.add(new MenuItem("Proce55ing.net",new MenuShortcut('5')));
  menu.add(new MenuItem("Reference",new MenuShortcut('F')));
  menu.addSeparator();
  menu.add(new MenuItem("Quit",new MenuShortcut('Q')));
  menu.addActionListener(this);
  menubar.add(menu);
  menu=new Menu("Edit");
  menu.add(new MenuItem("Undo"));
  menu.addSeparator();
  menu.add(new MenuItem("Cut"));
  menu.add(new MenuItem("Copy"));
  menu.add(new MenuItem("Paste"));
  menu.addSeparator();
  menu.add(new MenuItem("Select all"));
  menu.setEnabled(false);
  menubar.add(menu);
  menu=new Menu("Sketch");
  menu.add(new MenuItem("Run",new MenuShortcut('R')));
  menu.add(new MenuItem("Present",new MenuShortcut('P')));
  menu.add(new MenuItem("Stop"));
  menu.addSeparator();
  recordingHistory=getBoolean("history.recording",true);
  if (recordingHistory) {
    historyMenu=new Menu("History");
    menu.add(historyMenu);
    item=new MenuItem("Clear History");
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!editor.historyFile.delete()) {
          System.err.println("couldn't erase history");
        }
        rebuildHistoryMenu(historyMenu,editor.historyFile.getPath());
      }
    }
);
    menu.add(item);
    menu.addSeparator();
  }
  item=new MenuItem("Beautify",new MenuShortcut('B'));
  item.setEnabled(false);
  menu.add(item);
  menu.addActionListener(this);
  menubar.add(menu);
  frame.setMenuBar(menubar);
  Insets insets=frame.getInsets();
  Toolkit tk=Toolkit.getDefaultToolkit();
  Dimension screen=tk.getScreenSize();
  int frameX=getInteger("window.x",(screen.width - width) / 2);
  int frameY=getInteger("window.y",(screen.height - height) / 2);
  frame.setBounds(frameX,frameY,width + insets.left + insets.right,height + insets.top + insets.bottom);
  frame.pack();
  editor.frame=frame;
  editor.init();
  rebuildSketchbookMenu(sketchbookMenu);
  frame.show();
}
