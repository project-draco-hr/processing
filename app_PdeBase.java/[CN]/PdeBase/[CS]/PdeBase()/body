{
  super(WINDOW_TITLE);
  frame=this;
  try {
    icon=Toolkit.getDefaultToolkit().getImage("lib/icon.gif");
    frame.setIconImage(icon);
  }
 catch (  Exception e) {
  }
  windowListener=new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      editor.doQuit();
    }
  }
;
  frame.addWindowListener(windowListener);
  properties=new Properties();
  try {
    if (PdeBase.platform == PdeBase.MACOSX) {
      properties.load(new FileInputStream("lib/pde.properties"));
      properties.load(new FileInputStream("lib/pde_macosx.properties"));
    }
 else     if (PdeBase.platform == PdeBase.MACOS9) {
      properties.load(new FileInputStream("lib/pde.properties"));
      properties.load(new FileInputStream("lib/pde_macos9.properties"));
    }
 else {
      properties.load(getClass().getResource("pde.properties").openStream());
      String platformProps="pde_" + platforms[platform] + ".properties";
      properties.load(getClass().getResource(platformProps).openStream());
    }
  }
 catch (  Exception e) {
    System.err.println("Error reading pde.properties");
    e.printStackTrace();
  }
  editor=new PdeEditor(this);
  frame.setLayout(new BorderLayout());
  frame.add("Center",editor);
  MenuBar menubar=new MenuBar();
  Menu menu;
  MenuItem item;
  menu=new Menu("File");
  menu.add(new MenuItem("New",new MenuShortcut('N')));
  sketchbookMenu=new Menu("Open");
  menu.add(sketchbookMenu);
  saveMenuItem=new MenuItem("Save",new MenuShortcut('S'));
  saveAsMenuItem=new MenuItem("Save as...",new MenuShortcut('S',true));
  menu.add(saveMenuItem);
  menu.add(saveAsMenuItem);
  menu.add(new MenuItem("Rename..."));
  menu.add(new MenuItem("Export to Web",new MenuShortcut('E')));
  item=new MenuItem("Export Application",new MenuShortcut('E',true));
  item.setEnabled(false);
  menu.add(item);
  menu.addSeparator();
  menu.add(new MenuItem("Proce55ing.net",new MenuShortcut('5')));
  menu.add(new MenuItem("Reference",new MenuShortcut('F')));
  menu.addSeparator();
  menu.add(new MenuItem("Quit",new MenuShortcut('Q')));
  menu.addActionListener(this);
  menubar.add(menu);
  menu=new Menu("Edit");
  undoItem=new MenuItem("Undo",new MenuShortcut('Z'));
  undoItem.addActionListener(undoAction=new UndoAction());
  menu.add(undoItem);
  redoItem=new MenuItem("Redo",new MenuShortcut('Y'));
  redoItem.addActionListener(redoAction=new RedoAction());
  menu.add(redoItem);
  menu.addSeparator();
  item=new MenuItem("Cut",new MenuShortcut('X'));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      editor.textarea.cut();
    }
  }
);
  menu.add(item);
  item=new MenuItem("Copy",new MenuShortcut('C'));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      editor.textarea.copy();
    }
  }
);
  menu.add(item);
  item=new MenuItem("Paste",new MenuShortcut('V'));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      editor.textarea.paste();
    }
  }
);
  menu.add(item);
  menu.addSeparator();
  item=new MenuItem("Select All",new MenuShortcut('A'));
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      editor.textarea.selectAll();
    }
  }
);
  menu.add(item);
  menubar.add(menu);
  Document document=editor.textarea.getDocument();
  document.addUndoableEditListener(new MyUndoableEditListener());
  menu=new Menu("Sketch");
  menu.add(new MenuItem("Run",new MenuShortcut('R')));
  menu.add(new MenuItem("Present",new MenuShortcut('P')));
  menu.add(new MenuItem("Stop",new MenuShortcut('T')));
  menu.addSeparator();
  recordingHistory=getBoolean("history.recording",true);
  if (recordingHistory) {
    historyMenu=new Menu("History");
    menu.add(historyMenu);
    item=new MenuItem("Clear History");
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!editor.historyFile.delete()) {
          System.err.println("couldn't erase history");
        }
        rebuildHistoryMenu(historyMenu,editor.historyFile.getPath());
      }
    }
);
    menu.add(item);
    menu.addSeparator();
  }
  beautifyMenuItem=new MenuItem("Beautify",new MenuShortcut('B'));
  menu.add(beautifyMenuItem);
  serialMenu=new Menu("Serial Port");
  menu.add(serialMenu);
  Menu rendererMenu=new Menu("Renderer");
  menu.add(rendererMenu);
  normalItem=new CheckboxMenuItem("Normal");
  rendererMenu.add(normalItem);
  normalItem.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      openglItem.setState(false);
      normalItem.setState(true);
    }
  }
);
  openglItem=new CheckboxMenuItem("OpenGL");
  rendererMenu.add(openglItem);
  openglItem.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      openglItem.setState(true);
      normalItem.setState(false);
    }
  }
);
  externalEditorItem=new CheckboxMenuItem("Use External Editor");
  externalEditorItem.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        editor.setExternalEditor(true);
      }
 else {
        editor.setExternalEditor(false);
      }
    }
  }
);
  menu.add(externalEditorItem);
  menu.addActionListener(this);
  menubar.add(menu);
  frame.setMenuBar(menubar);
  Insets insets=frame.getInsets();
  Toolkit tk=Toolkit.getDefaultToolkit();
  Dimension screen=tk.getScreenSize();
  frame.pack();
  editor.init();
  rebuildSketchbookMenu(sketchbookMenu);
  buildSerialMenu();
  frame.show();
}
