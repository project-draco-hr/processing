{
  if (externalEditor)   return false;
  char c=event.getKeyChar();
  int code=event.getKeyCode();
  if ((event.getModifiers() & KeyEvent.META_MASK) != 0) {
    return false;
  }
  if (!editor.sketch.current.modified) {
    if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) || (code == KeyEvent.VK_ENTER)|| ((c >= 32) && (c < 128))) {
      editor.sketch.setModified();
    }
  }
switch ((int)c) {
case 9:
    if (expandTabs) {
      textarea.setSelectedText(tabString);
      event.consume();
      return true;
    }
  break;
case 10:
case 13:
if (autoIndent) {
  char contents[]=textarea.getText().toCharArray();
  int origIndex=textarea.getCaretPosition() - 1;
  int spaceCount=calcSpaces(origIndex,contents);
  int index=origIndex + 1;
  while ((index < contents.length) && (contents[index] == ' ')) {
    spaceCount--;
    index++;
  }
  if (origIndex != -1) {
    if (contents[origIndex] == '{') {
      spaceCount+=tabSize;
    }
  }
  String insertion="\n" + Editor.EMPTY.substring(0,spaceCount);
  textarea.setSelectedText(insertion);
  event.consume();
  return true;
}
break;
case '}':
if (autoIndent) {
char contents[]=textarea.getText().toCharArray();
int origIndex=textarea.getCaretPosition() - 1;
}
break;
}
return false;
}
