{
  if (externalEditor)   return false;
  char c=event.getKeyChar();
  int code=event.getKeyCode();
  if ((event.getModifiers() & KeyEvent.META_MASK) != 0) {
    return false;
  }
  if (!editor.sketch.modified) {
    if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) || (code == KeyEvent.VK_ENTER)|| ((c >= 32) && (c < 128))) {
      editor.sketch.setModified(true);
    }
  }
  if ((code == KeyEvent.VK_UP) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    char contents[]=textarea.getText().toCharArray();
    int caretIndex=textarea.getCaretPosition();
    int index=calcLineStart(caretIndex - 1,contents);
    index-=2;
    boolean onlySpaces=true;
    while (index > 0) {
      if (contents[index] == 10) {
        if (onlySpaces) {
          index++;
          break;
        }
 else {
          onlySpaces=true;
        }
      }
 else       if (contents[index] != ' ') {
        onlySpaces=false;
      }
      index--;
    }
    if (index < 0)     index=0;
    if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
      textarea.setSelectionStart(caretIndex);
      textarea.setSelectionEnd(index);
    }
 else {
      textarea.setCaretPosition(index);
    }
    event.consume();
    return true;
  }
 else   if ((code == KeyEvent.VK_DOWN) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
    char contents[]=textarea.getText().toCharArray();
    int caretIndex=textarea.getCaretPosition();
    int index=caretIndex;
    int lineStart=0;
    boolean onlySpaces=false;
    while (index < contents.length) {
      if (contents[index] == 10) {
        if (onlySpaces) {
          index=lineStart;
          break;
        }
 else {
          lineStart=index + 1;
          onlySpaces=true;
        }
      }
 else       if (contents[index] != ' ') {
        onlySpaces=false;
      }
      index++;
    }
    if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
      textarea.setSelectionStart(caretIndex);
      textarea.setSelectionEnd(index);
    }
 else {
      textarea.setCaretPosition(index);
    }
    event.consume();
    return true;
  }
switch ((int)c) {
case 9:
    if (tabsExpand) {
      textarea.setSelectedText(tabString);
      event.consume();
      return true;
    }
 else     if (tabsIndent) {
      char contents[]=textarea.getText().toCharArray();
      int prevCharIndex=textarea.getCaretPosition() - 1;
      int lineStart=calcLineStart(prevCharIndex,contents);
      int lineEnd=lineStart;
      while ((lineEnd < contents.length - 1) && (contents[lineEnd] != 10)) {
        lineEnd++;
      }
      int braceBalance=0;
      int index=lineStart;
      while ((index < contents.length) && (contents[index] != 10)) {
        if (contents[index] == '{') {
          braceBalance++;
        }
 else         if (contents[index] == '}') {
          braceBalance--;
        }
        index++;
      }
      int where=(braceBalance > 0) ? lineStart : lineEnd;
      int indent=calcBraceIndent(where,contents);
      if (indent == -1) {
        indent=0;
      }
 else {
        indent+=tabSize;
      }
      int spaceCount=calcSpaceCount(prevCharIndex,contents);
      textarea.setSelectionStart(lineStart);
      textarea.setSelectionEnd(lineStart + spaceCount);
      textarea.setSelectedText(Editor.EMPTY.substring(0,indent));
      event.consume();
      return true;
    }
  break;
case 10:
case 13:
if (autoIndent) {
  char contents[]=textarea.getText().toCharArray();
  int origIndex=textarea.getCaretPosition() - 1;
  int spaceCount=calcSpaceCount(origIndex,contents);
  int index2=origIndex;
  while ((index2 >= 0) && Character.isWhitespace(contents[index2])) {
    index2--;
  }
  if (index2 != -1) {
    if (contents[index2] == '{') {
      spaceCount+=tabSize;
    }
  }
  int index=origIndex + 1;
  int extraCount=0;
  while ((index < contents.length) && (contents[index] == ' ')) {
    extraCount++;
    index++;
  }
  spaceCount-=extraCount;
  if (spaceCount < 0) {
    textarea.setSelectionEnd(textarea.getSelectionEnd() - spaceCount);
    textarea.setSelectedText("\n");
  }
 else {
    String insertion="\n" + Editor.EMPTY.substring(0,spaceCount);
    textarea.setSelectedText(insertion);
  }
  event.consume();
  return true;
}
break;
case '}':
if (autoIndent) {
if (textarea.getSelectionStart() != textarea.getSelectionEnd()) {
textarea.setSelectedText("");
}
char contents[]=textarea.getText().toCharArray();
int prevCharIndex=textarea.getCaretPosition() - 1;
int index=prevCharIndex;
boolean finished=false;
while ((index != -1) && (!finished)) {
if (contents[index] == 10) {
  finished=true;
  index++;
}
 else if (contents[index] != ' ') {
  return false;
}
 else {
  index--;
}
}
if (!finished) return false;
int lineStartIndex=index;
int pairedSpaceCount=calcBraceIndent(prevCharIndex,contents);
if (pairedSpaceCount == -1) return false;
textarea.setSelectionStart(lineStartIndex);
textarea.setSelectedText(Editor.EMPTY.substring(0,pairedSpaceCount));
event.consume();
return true;
}
break;
}
return false;
}
