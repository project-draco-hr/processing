{
  float x=0;
  float y=0;
  float z=0;
  if (sphereDetail == 0) {
    sphereDetail(30);
  }
  int v1, v11, v2;
  pushMatrix();
  if (x != 0f && y != 0f && z != 0f)   translate(x,y,z);
  scale(r);
  if (triangle != null) {
    triangle.setCulling(true);
  }
  beginShape(TRIANGLE_STRIP);
  for (int i=0; i < sphereDetail; i++) {
    normal(0,-1,0);
    vertex(0,-1,0);
    normal(sphereX[i],sphereY[i],sphereZ[i]);
    vertex(sphereX[i],sphereY[i],sphereZ[i]);
  }
  vertex(0,-1,0);
  normal(sphereX[0],sphereY[0],sphereZ[0]);
  vertex(sphereX[0],sphereY[0],sphereZ[0]);
  endShape();
  int voff=0;
  for (int i=2; i < sphereDetail; i++) {
    v1=v11=voff;
    voff+=sphereDetail;
    v2=voff;
    beginShape(TRIANGLE_STRIP);
    for (int j=0; j < sphereDetail; j++) {
      normal(sphereX[v1],sphereY[v1],sphereZ[v1]);
      vertex(sphereX[v1],sphereY[v1],sphereZ[v1++]);
      normal(sphereX[v2],sphereY[v2],sphereZ[v2]);
      vertex(sphereX[v2],sphereY[v2],sphereZ[v2++]);
    }
    v1=v11;
    v2=voff;
    normal(sphereX[v1],sphereY[v1],sphereZ[v1]);
    vertex(sphereX[v1],sphereY[v1],sphereZ[v1]);
    normal(sphereX[v2],sphereY[v2],sphereZ[v2]);
    vertex(sphereX[v2],sphereY[v2],sphereZ[v2]);
    endShape();
  }
  beginShape(TRIANGLE_STRIP);
  for (int i=0; i < sphereDetail; i++) {
    v2=voff + i;
    normal(sphereX[v2],sphereY[v2],sphereZ[v2]);
    vertex(sphereX[v2],sphereY[v2],sphereZ[v2]);
    normal(0,1,0);
    vertex(0,1,0);
  }
  normal(sphereX[voff],sphereY[voff],sphereZ[voff]);
  vertex(sphereX[voff],sphereY[voff],sphereZ[voff]);
  normal(0,1,0);
  vertex(0,1,0);
  endShape();
  popMatrix();
  if (triangle != null) {
    triangle.setCulling(false);
  }
}
