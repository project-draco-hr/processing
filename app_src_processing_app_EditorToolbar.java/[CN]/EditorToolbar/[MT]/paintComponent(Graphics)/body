{
  if (buttons.size() == 0) {
    init();
  }
  Dimension size=getSize();
  if ((offscreen == null) || (size.width != width) || (size.height != height)) {
    if (Toolkit.isRetina()) {
      offscreen=createImage(size.width * 2,size.height * 2);
    }
 else {
      offscreen=createImage(size.width,size.height);
    }
    width=size.width;
    height=size.height;
    int offsetX=3;
    for (    Button b : buttons) {
      b.left=offsetX;
      if (b.gap) {
        b.left+=BUTTON_GAP;
      }
      b.right=b.left + BUTTON_WIDTH;
      offsetX=b.right;
    }
  }
  Graphics g=offscreen.getGraphics();
  Graphics2D g2=(Graphics2D)g;
  if (Toolkit.isRetina()) {
    g2.scale(2,2);
  }
 else {
    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  }
  g.setColor(bgcolor);
  g.fillRect(0,0,width,height);
  for (  Button b : buttons) {
    g.drawImage(b.stateImage,b.left,TOP,BUTTON_WIDTH,BUTTON_HEIGHT,null);
  }
  g.setColor(statusColor);
  g.setFont(statusFont);
  if (rollover != null) {
    int statusY=(BUTTON_HEIGHT + g.getFontMetrics().getAscent()) / 2;
    String status=shiftPressed ? rollover.titleShift : rollover.title;
    g.drawString(status,buttons.size() * BUTTON_WIDTH + 3 * BUTTON_GAP,statusY);
  }
  g.setFont(modeTextFont);
  FontMetrics metrics=g.getFontMetrics();
  int modeH=metrics.getAscent();
  int modeW=metrics.stringWidth(modeTitle);
  final int modeGapH=6;
  final int modeGapV=3;
  modeX2=getWidth() - 16;
  modeX1=modeX2 - (modeGapH + modeW + modeGapH);
  modeY1=(getHeight() - modeH) / 2 - modeGapV;
  modeY2=modeY1 + modeH + modeGapV * 2;
  g.setColor(modeButtonColor);
  g.drawRect(modeX1,modeY1,modeX2 - modeX1,modeY2 - modeY1);
  g.drawString(modeTitle,modeX1 + modeGapH,modeY2 - modeGapV);
  screen.drawImage(offscreen,0,0,size.width,size.height,null);
  if (!isEnabled()) {
    screen.setColor(new Color(0,0,0,100));
    screen.fillRect(0,0,getWidth(),getHeight());
  }
}
