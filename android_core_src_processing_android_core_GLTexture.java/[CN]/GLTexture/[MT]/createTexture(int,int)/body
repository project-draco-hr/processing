{
  deleteTexture();
  if (a3d.npotTexSupported) {
    glWidth=w;
    glHeight=h;
  }
 else {
    glWidth=nextPowerOfTwo(w);
    glHeight=nextPowerOfTwo(h);
  }
  if ((glWidth > a3d.maxTextureSize) || (glHeight > a3d.maxTextureSize)) {
    glWidth=glHeight=0;
    throw new RuntimeException("Image width and height cannot be" + " larger than " + a3d.maxTextureSize + " with this graphics card.");
  }
  usingMipmaps=((glMinFilter == GL10.GL_NEAREST_MIPMAP_NEAREST) || (glMinFilter == GL10.GL_LINEAR_MIPMAP_NEAREST) || (glMinFilter == GL10.GL_NEAREST_MIPMAP_LINEAR)|| (glMinFilter == GL10.GL_LINEAR_MIPMAP_LINEAR));
  gl.glGenTextures(1,glTextureID,0);
  gl.glBindTexture(glTarget,glTextureID[0]);
  gl.glTexParameterf(glTarget,GL10.GL_TEXTURE_MIN_FILTER,glMinFilter);
  gl.glTexParameterf(glTarget,GL10.GL_TEXTURE_MAG_FILTER,glMagFilter);
  gl.glTexParameterf(glTarget,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);
  gl.glTexParameterf(glTarget,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);
  gl.glTexImage2D(glTarget,0,glInternalFormat,glWidth,glHeight,0,GL10.GL_RGBA,GL10.GL_UNSIGNED_BYTE,null);
  gl.glBindTexture(glTarget,0);
  flippedX=false;
  flippedY=false;
  maxTexCoordS=1.0f;
  maxTexCoordT=1.0f;
}
