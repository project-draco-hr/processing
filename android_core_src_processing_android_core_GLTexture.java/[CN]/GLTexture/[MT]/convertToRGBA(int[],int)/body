{
  int twidth=width;
  int t=0;
  int p=0;
  int[] tIntArray=new int[width * height];
  if (PGraphicsAndroid3D.BIG_ENDIAN) {
switch (arrayFormat) {
case ALPHA:
      for (int y=0; y < height; y++) {
        for (int x=0; x < width; x++) {
          tIntArray[t++]=0xFFFFFF00 | intArray[p++];
        }
        t+=twidth - width;
      }
    break;
case RGB:
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      int pixel=intArray[p++];
      tIntArray[t++]=(pixel << 8) | 0xff;
    }
    t+=twidth - width;
  }
break;
case ARGB:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
  int pixel=intArray[p++];
  tIntArray[t++]=(pixel << 8) | ((pixel >> 24) & 0xff);
}
t+=twidth - width;
}
break;
}
}
 else {
switch (arrayFormat) {
case ALPHA:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
tIntArray[t++]=(intArray[p++] << 24) | 0x00FFFFFF;
}
t+=twidth - width;
}
break;
case RGB:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
int pixel=intArray[p++];
tIntArray[t++]=0xff000000 | ((pixel & 0xFF) << 16) | ((pixel & 0xFF0000) >> 16)| (pixel & 0x0000FF00);
}
t+=twidth - width;
}
break;
case ARGB:
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
int pixel=intArray[p++];
tIntArray[t++]=((pixel & 0xFF) << 16) | ((pixel & 0xFF0000) >> 16) | (pixel & 0xFF00FF00);
}
t+=twidth - width;
}
break;
}
}
return tIntArray;
}
