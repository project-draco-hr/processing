{
  if (Base.isMacOS())   return;
  if (menu.length == 0)   return;
  final String[] kdePreDefStrs={"&file","&new","&open","open&recent","&save","save&as","saveacop&y","saveas&template","savea&ll","reloa&d","&print","printpre&view","&import","e&xport","&closefile","clos&eallfiles","&quit","&edit","&undo","re&do","cu&t&","&copy","&paste","&delete","select&all","dese&lect","&find","find&next","findpre&vious","&replace","&gotoline","&view","&newview","close&allviews","&splitview","&removeview","splitter&orientation","&horizontal","&vertical","view&mode","&fullscreenmode","&zoom","zoom&in","zoom&out","zoomtopage&width","zoomwhole&page","zoom&factor","&insert","&format","&go","&up","&back","&forward","&home","&go","&previouspage","&nextpage","&firstpage","&lastpage","read&updocument","read&downdocument","&back","&forward","&gotopage","&bookmarks","&addbookmark","bookmark&tabsasfolder","&editbookmarks","&newbookmarksfolder","&tools","&settings","&toolbars","configure&shortcuts","configuretool&bars","&configure*","&help",".+&handbook","&whatsthis","report&bug","&aboutprocessing","about&kde"};
  Pattern[] kdePreDefPats=new Pattern[kdePreDefStrs.length];
  for (int i=0; i < kdePreDefStrs.length; i++)   kdePreDefPats[i]=Pattern.compile(kdePreDefStrs[i].replace("&",""));
  final Pattern nonAAlpha=Pattern.compile("[^A-Za-z]");
  FontMetrics fmTmp=null;
  for (  JMenuItem m : menu) {
    if (m != null)     fmTmp=m.getFontMetrics(m.getFont());
  }
  if (fmTmp == null)   return;
  final FontMetrics fm=fmTmp;
  final Comparator<Character> charComparator=new Comparator<Character>(){
    char[] baddies="qypgjaeiouQYPGJAEIOU".toCharArray();
    public int compare(    Character ch1,    Character ch2){
      float w1=fm.charWidth(ch1), w2=fm.charWidth(ch2);
      for (      char bad : baddies) {
        if (bad == ch1)         w1*=0.66f;
        if (bad == ch2)         w2*=0.66f;
      }
      return (int)Math.signum(w2 - w1);
    }
  }
;
  final List<Character> taken=new ArrayList<Character>(menu.length);
  char firstChar;
  char[] cleanChars;
  Character[] cleanCharas;
  for (  JMenuItem jmi : menu) {
    if (jmi == null)     continue;
    if (jmi.getText() == null)     continue;
    jmi.setMnemonic(0);
    for (int i=0; i < kdePreDefStrs.length; i++) {
      String lASCIIName=nonAAlpha.matcher(jmi.getText()).replaceAll("").toLowerCase();
      if (kdePreDefPats[i].matcher(lASCIIName).matches()) {
        char mnem=kdePreDefStrs[i].charAt(1 + kdePreDefStrs[i].indexOf("&"));
        jmi.setMnemonic(mnem);
        taken.add(mnem);
        break;
      }
    }
  }
  algorithmicAssignment:   for (  JMenuItem jmi : menu) {
    if (jmi == null)     continue;
    if (jmi.getText() == null)     continue;
    if (jmi.getMnemonic() != 0)     continue;
    String cleanString=jmi.getText();
    if (cleanString.startsWith("sketchbook \u2192 "))     cleanString=cleanString.substring(13);
    if (cleanString.length() == 0)     continue;
    final List<Character> banned=new ArrayList<Character>();
    for (int i=0; i < cleanString.length(); i++) {
      if (cleanString.charAt(i) == '_') {
        if (i > 0)         banned.add(Character.toLowerCase(cleanString.charAt(i - 1)));
        if (i + 1 < cleanString.length())         banned.add(Character.toLowerCase(cleanString.charAt(i + 1)));
      }
    }
    for (    String wd : cleanString.split("[^\\p{IsAlphabetic}]")) {
      if (wd.length() == 0)       continue;
      firstChar=wd.charAt(0);
      if (taken.contains(Character.toLowerCase(firstChar)))       continue;
      if (banned.contains(Character.toLowerCase(firstChar)))       continue;
      if ('A' <= firstChar && firstChar <= 'Z') {
        jmi.setMnemonic(firstChar);
        taken.add((char)(firstChar | 32));
        continue algorithmicAssignment;
      }
    }
    for (    String wd : cleanString.split("[^\\p{IsAlphabetic}]")) {
      if (wd.length() == 0)       continue;
      firstChar=wd.charAt(0);
      if (taken.contains(Character.toLowerCase(firstChar)))       continue;
      if (banned.contains(Character.toLowerCase(firstChar)))       continue;
      if ('a' <= firstChar && firstChar <= 'z') {
        jmi.setMnemonic(firstChar);
        taken.add(firstChar);
        continue algorithmicAssignment;
      }
    }
    cleanString=nonAAlpha.matcher(jmi.getText()).replaceAll("");
    if (cleanString.length() >= 2) {
      char ascii2nd=cleanString.charAt(1);
      if (!taken.contains((char)(ascii2nd | 32)) && !banned.contains((char)(ascii2nd | 32)) && fm.charWidth('A') <= 2 * fm.charWidth(ascii2nd)) {
        jmi.setMnemonic(ascii2nd);
        taken.add((char)(ascii2nd | 32));
        continue algorithmicAssignment;
      }
    }
    cleanChars=cleanString.toCharArray();
    cleanCharas=new Character[cleanChars.length];
    for (int i=0; i < cleanChars.length; i++) {
      cleanCharas[i]=new Character(cleanChars[i]);
    }
    Arrays.sort(cleanCharas,charComparator);
    for (    char mnem : cleanCharas) {
      if (taken.contains(Character.toLowerCase(mnem)))       continue;
      if (banned.contains(Character.toLowerCase(mnem)))       continue;
      jmi.setMnemonic(mnem);
      taken.add(Character.toLowerCase(mnem));
      continue algorithmicAssignment;
    }
    for (    char digit : jmi.getText().replaceAll("[^0-9]","").toCharArray()) {
      if (taken.contains(digit))       continue;
      if (banned.contains(digit))       continue;
      jmi.setMnemonic(KeyEvent.VK_0 + digit - '0');
      taken.add(digit);
      continue algorithmicAssignment;
    }
  }
  for (  JMenuItem jmi : menu) {
    if (jmi instanceof JMenu) {
      JMenu jm=(JMenu)jmi;
      JMenuItem[] items=new JMenuItem[jm.getItemCount()];
      for (int i=0; i < items.length; i++) {
        items[i]=jm.getItem(i);
      }
      setMenuMnemonics(items);
    }
  }
}
