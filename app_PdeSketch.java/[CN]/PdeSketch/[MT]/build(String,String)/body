{
  boolean externalRuntime=false;
  String additionalImports[]=null;
  String additionalClassPath=null;
  File codeFolder=new File(sketchDir,"code");
  if (codeFolder.exists()) {
    externalRuntime=true;
    additionalClassPath=PdeCompiler.contentsToClassPath(codeFolder);
    additionalImports=PdeCompiler.magicImports(additionalClassPath);
  }
 else {
    codeFolder=null;
  }
  PdePreprocessor preprocessor=new PdePreprocessor();
  try {
    mainClassName=preprocessor.write(program,buildPath,suggestedClassName,externalImports);
  }
 catch (  antlr.RecognitionException re) {
    throw new PdeException(re.getMessage(),re.getLine() - 1,re.getColumn());
  }
catch (  antlr.TokenStreamRecognitionException tsre) {
    PatternMatcher matcher=new Perl5Matcher();
    PatternCompiler compiler=new Perl5Compiler();
    String mess="^line (\\d+):(\\d+):\\s";
    Pattern pattern=compiler.compile(mess);
    PatternMatcherInput input=new PatternMatcherInput(tsre.toString());
    if (matcher.contains(input,pattern)) {
      MatchResult result=matcher.getMatch();
      int line=Integer.parseInt(result.group(1).toString());
      int column=Integer.parseInt(result.group(2).toString());
      throw new PdeException(tsre.getMessage(),line - 1,column);
    }
 else {
      throw new PdeException(tsre.toString());
    }
  }
catch (  PdeException pe) {
    throw pe;
  }
catch (  Exception ex) {
    System.err.println("Uncaught exception type:" + ex.getClass());
    ex.printStackTrace();
    throw new PdeException(ex.toString());
  }
  if (PdePreprocessor.programType == PdePreprocessor.JAVA) {
    externalRuntime=true;
  }
  if (codeCount > 1) {
    externalRuntime=true;
  }
  PdeCompiler compiler=new PdeCompiler(buildPath,mainClassName,externalCode,this);
  messageStream=new PdeMessageStream(compiler);
  boolean success=compiler.compile(new PrintStream(messageStream));
  return success ? className : null;
}
