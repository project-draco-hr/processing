{
  if (ures < 3)   ures=3;
  if (vres < 2)   vres=2;
  if ((ures == sphereDetailU) && (vres == sphereDetailV))   return;
  float delta=(float)SINCOS_LENGTH / ures;
  float[] cx=new float[ures];
  float[] cz=new float[ures];
  for (int i=0; i < ures; i++) {
    cx[i]=cosLUT[(int)(i * delta) % SINCOS_LENGTH];
    cz[i]=sinLUT[(int)(i * delta) % SINCOS_LENGTH];
  }
  int vertCount=ures * (vres - 1) + 2;
  int currVert=0;
  sphereX=new float[vertCount];
  sphereY=new float[vertCount];
  sphereZ=new float[vertCount];
  float angle_step=(SINCOS_LENGTH * 0.5f) / vres;
  float angle=angle_step;
  for (int i=1; i < vres; i++) {
    float curradius=sinLUT[(int)angle % SINCOS_LENGTH];
    float currY=-cosLUT[(int)angle % SINCOS_LENGTH];
    for (int j=0; j < ures; j++) {
      sphereX[currVert]=cx[j] * curradius;
      sphereY[currVert]=currY;
      sphereZ[currVert++]=cz[j] * curradius;
    }
    angle+=angle_step;
  }
  sphereDetailU=ures;
  sphereDetailV=vres;
}
