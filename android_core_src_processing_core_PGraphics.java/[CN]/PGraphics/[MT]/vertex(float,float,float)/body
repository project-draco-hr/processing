{
  vertexCheck();
  float[] vertex=vertices[vertexCount];
  if (shape == POLYGON) {
    if (vertexCount > 0) {
      float pvertex[]=vertices[vertexCount - 1];
      if ((Math.abs(pvertex[X] - x) < EPSILON) && (Math.abs(pvertex[Y] - y) < EPSILON) && (Math.abs(pvertex[Z] - z) < EPSILON)) {
        return;
      }
    }
  }
  curveVertexCount=0;
  vertex[X]=x;
  vertex[Y]=y;
  vertex[Z]=z;
  vertex[EDGE]=edge ? 1 : 0;
  boolean textured=false;
  if (fill || textured) {
    if (textured) {
      vertex[R]=fillR;
      vertex[G]=fillG;
      vertex[B]=fillB;
      vertex[A]=fillA;
    }
 else {
      if (tint) {
        vertex[R]=tintR;
        vertex[G]=tintG;
        vertex[B]=tintB;
        vertex[A]=tintA;
      }
 else {
        vertex[R]=1;
        vertex[G]=1;
        vertex[B]=1;
        vertex[A]=1;
      }
    }
  }
  if (stroke) {
    vertex[SR]=strokeR;
    vertex[SG]=strokeG;
    vertex[SB]=strokeB;
    vertex[SA]=strokeA;
    vertex[SW]=strokeWeight;
  }
  vertex[U]=textureU;
  vertex[V]=textureV;
  float norm2=normalX * normalX + normalY * normalY + normalZ * normalZ;
  if (norm2 < EPSILON) {
    vertex[HAS_NORMAL]=0;
  }
 else {
    if (Math.abs(norm2 - 1) > EPSILON) {
      float norm=PApplet.sqrt(norm2);
      normalX/=norm;
      normalY/=norm;
      normalZ/=norm;
    }
    vertex[HAS_NORMAL]=1;
  }
  vertex[NX]=normalX;
  vertex[NY]=normalY;
  vertex[NZ]=normalZ;
  vertexCount++;
}
