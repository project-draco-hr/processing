{
  int len1=word1.length();
  int len2=word2.length();
  int[][] dp=new int[len1 + 1][len2 + 1];
  for (int i=0; i <= len1; i++) {
    dp[i][0]=i;
  }
  for (int j=0; j <= len2; j++) {
    dp[0][j]=j;
  }
  for (int i=0; i < len1; i++) {
    char c1=word1.charAt(i);
    for (int j=0; j < len2; j++) {
      char c2=word2.charAt(j);
      if (c1 == c2) {
        dp[i + 1][j + 1]=dp[i][j];
        System.out.println();
      }
 else {
        int replace=dp[i][j] + 1;
        int insert=dp[i][j + 1] + 1;
        int delete=dp[i + 1][j] + 1;
        int min=replace > insert ? insert : replace;
        min=delete > min ? min : delete;
        dp[i + 1][j + 1]=min;
      }
    }
  }
  System.out.println("Edit distance1: " + dp[len1][len2]);
  minDistInGrid(dp,0,0,len1,len2,word1.toCharArray(),word2.toCharArray());
  return dp[len1][len2];
}
