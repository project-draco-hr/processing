{
  int len1=word1.length();
  int len2=word2.length();
  System.out.println(word1 + " len: " + len1);
  System.out.println(word2 + " len: " + len2);
  int[][] dp=new int[len1 + 1][len2 + 1];
  for (int i=0; i <= len1; i++) {
    dp[i][0]=i;
  }
  for (int j=0; j <= len2; j++) {
    dp[0][j]=j;
  }
  for (int i=0; i < len1; i++) {
    char c1=word1.charAt(i);
    for (int j=0; j < len2; j++) {
      char c2=word2.charAt(j);
      if (c1 == c2) {
        dp[i + 1][j + 1]=dp[i][j];
      }
 else {
        int replace=dp[i][j] + 1;
        int insert=dp[i][j + 1] + 1;
        int delete=dp[i + 1][j] + 1;
        int min=replace > insert ? insert : replace;
        min=delete > min ? min : delete;
        dp[i + 1][j + 1]=min;
      }
    }
  }
  ArrayList<OfsSet> alist=new ArrayList<Utils.OfsSet>();
  minDistInGrid(dp,len1,len2,0,0,word1.toCharArray(),word2.toCharArray(),alist);
  System.out.println("PDE-to-Java");
  for (int i=0; i < alist.size(); i++) {
    System.out.print(alist.get(i).pdeOffset + " <-> " + alist.get(i).javaOffset);
    System.out.println(", " + word1.charAt(alist.get(i).pdeOffset) + " <-> "+ word2.charAt(alist.get(i).javaOffset));
  }
  System.out.println("Length " + alist.size());
  return dp[len1][len2];
}
