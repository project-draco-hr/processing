{
  LaunchingConnector connector=findLaunchingConnector("com.sun.jdi.RawCommandLineLaunch");
  Map arguments=connector.defaultArguments();
  Connector.Argument commandArg=(Connector.Argument)arguments.get("command");
  String addr="localhost:" + (8000 + (int)(Math.random() * 1000));
  String commandArgs="java -Xrunjdwp:transport=dt_socket,address=" + addr + ",suspend=y ";
  for (int i=0; i < vmParams.length; i++) {
    commandArgs=addArgument(commandArgs,vmParams[i],' ');
  }
  if (classParams != null) {
    for (int i=0; i < classParams.length; i++) {
      commandArgs=addArgument(commandArgs,classParams[i],' ');
    }
  }
  commandArg.setValue(commandArgs);
  Connector.Argument addressArg=(Connector.Argument)arguments.get("address");
  addressArg.setValue(addr);
  try {
    return connector.launch(arguments);
  }
 catch (  IOException exc) {
    throw new Error("Unable to launch target VM: " + exc);
  }
catch (  IllegalConnectorArgumentsException exc) {
    throw new Error("Internal error: " + exc);
  }
catch (  VMStartException exc) {
    Process p=exc.process();
    String[] errorStrings=PApplet.loadStrings(p.getErrorStream());
    String[] inputStrings=PApplet.loadStrings(p.getInputStream());
    System.out.println("error:");
    PApplet.println(errorStrings);
    System.out.println("input:");
    PApplet.println(inputStrings);
    exc.printStackTrace();
    System.err.println("Could not run the sketch (Target VM failed to initialize).");
    System.err.println("Make sure that you haven't set the maximum available memory too high.");
    System.err.println("For more information, read revisions.txt and Help -> Troubleshooting.");
    editor.error("Could not run the sketch.");
    return null;
  }
}
