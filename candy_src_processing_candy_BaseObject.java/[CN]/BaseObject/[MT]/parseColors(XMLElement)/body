{
  if (properties.hasAttribute("opacity")) {
    opacity=properties.getFloatAttribute("opacity");
  }
  int opacityMask=((int)(opacity * 255)) << 24;
  if (properties.hasAttribute("stroke")) {
    String strokeText=properties.getStringAttribute("stroke");
    if (strokeText.equals("none")) {
      stroke=false;
    }
 else     if (strokeText.startsWith("#")) {
      stroke=true;
      strokeColor=opacityMask | (Integer.parseInt(strokeText.substring(1),16)) & 0xFFFFFF;
    }
 else     if (strokeText.startsWith("rgb")) {
      stroke=true;
      strokeColor=opacityMask | parseRGB(strokeText);
    }
 else     if (strokeText.startsWith("url(#")) {
      strokeName=strokeText.substring(5,strokeText.length() - 1);
      Object strokeObject=findChild(strokeName);
      if (strokeObject instanceof Gradient) {
        strokeGradient=(Gradient)strokeObject;
        strokeGradientPaint=calcGradientPaint(strokeGradient);
      }
 else {
        System.err.println("url " + strokeName + " refers to unexpected data");
      }
    }
  }
  if (properties.hasAttribute("stroke-width")) {
    strokeWeight=properties.getFloatAttribute("stroke-width",strokeWeight);
  }
  if (properties.hasAttribute("stroke-linejoin")) {
    String linejoin=properties.getStringAttribute("stroke-linejoin");
    if (linejoin.equals("inherit")) {
    }
 else     if (linejoin.equals("miter")) {
      strokeJoin=PConstants.MITER;
    }
 else     if (linejoin.equals("round")) {
      strokeJoin=PConstants.ROUND;
    }
 else     if (linejoin.equals("bevel")) {
      strokeJoin=PConstants.BEVEL;
    }
  }
  if (properties.hasAttribute("stroke-linecap")) {
    String linecap=properties.getStringAttribute("stroke-linecap");
    if (linecap.equals("inherit")) {
    }
 else     if (linecap.equals("butt")) {
      strokeCap=PConstants.SQUARE;
    }
 else     if (linecap.equals("round")) {
      strokeCap=PConstants.ROUND;
    }
 else     if (linecap.equals("square")) {
      strokeCap=PConstants.PROJECT;
    }
  }
  if (properties.hasAttribute("fill")) {
    String fillText=properties.getStringAttribute("fill");
    if (fillText.equals("none")) {
      fill=false;
    }
 else     if (fillText.startsWith("#")) {
      fill=true;
      fillColor=opacityMask | (Integer.parseInt(fillText.substring(1),16)) & 0xFFFFFF;
    }
 else     if (fillText.startsWith("rgb")) {
      fill=true;
      fillColor=opacityMask | parseRGB(fillText);
    }
 else     if (fillText.startsWith("url(#")) {
      fillName=fillText.substring(5,fillText.length() - 1);
      Object fillObject=findChild(fillName);
      if (fillObject instanceof Gradient) {
        fill=true;
        fillGradient=(Gradient)fillObject;
        fillGradientPaint=calcGradientPaint(fillGradient);
      }
 else {
        System.err.println("url " + fillName + " refers to unexpected data");
      }
    }
  }
}
