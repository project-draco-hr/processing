{
  long t0=System.currentTimeMillis();
  if (document == null) {
    document=new Document(new Rectangle(width,height));
    try {
      FileOutputStream fos=new FileOutputStream(file);
      BufferedOutputStream bos=new BufferedOutputStream(fos,16384);
      writer=PdfWriter.getInstance(document,bos);
      document.open();
      content=writer.getDirectContent();
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new RuntimeException("Problem saving the PDF file.");
    }
    long t=System.currentTimeMillis();
    mapper=new DefaultFontMapper();
    if (PApplet.platform == PApplet.MACOSX) {
      try {
        String homeLibraryFonts=System.getProperty("user.home") + "/Library/Fonts";
        mapper.insertDirectory(homeLibraryFonts);
      }
 catch (      Exception e) {
      }
      mapper.insertDirectory("/System/Library/Fonts");
      mapper.insertDirectory("/Library/Fonts");
    }
 else     if (PApplet.platform == PApplet.WINDOWS) {
      File roots[]=File.listRoots();
      for (int i=0; i < roots.length; i++) {
        if (roots[i].toString().startsWith("A:")) {
          continue;
        }
        File folder=new File(roots[i],"WINDOWS/Fonts");
        if (folder.exists()) {
          mapper.insertDirectory(folder.getAbsolutePath());
          break;
        }
        folder=new File(roots[i],"WINNT/Fonts");
        if (folder.exists()) {
          mapper.insertDirectory(folder.getAbsolutePath());
          break;
        }
      }
    }
    System.out.println("beginDraw fonts " + (System.currentTimeMillis() - t));
    g2=content.createGraphics(width,height,mapper);
  }
  System.out.println("beginDraw " + (System.currentTimeMillis() - t0));
  super.beginDraw();
}
