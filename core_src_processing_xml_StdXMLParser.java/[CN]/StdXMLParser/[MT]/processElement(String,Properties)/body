{
  String fullName=XMLUtil.scanIdentifier(this.reader);
  String name=fullName;
  XMLUtil.skipWhitespace(this.reader,null);
  String prefix=null;
  int colonIndex=name.indexOf(':');
  if (colonIndex > 0) {
    prefix=name.substring(0,colonIndex);
    name=name.substring(colonIndex + 1);
  }
  Vector attrNames=new Vector();
  Vector attrValues=new Vector();
  Vector attrTypes=new Vector();
  this.validator.elementStarted(fullName,this.reader.getSystemID(),this.reader.getLineNr());
  char ch;
  for (; ; ) {
    ch=this.reader.read();
    if ((ch == '/') || (ch == '>')) {
      break;
    }
    this.reader.unread(ch);
    this.processAttribute(attrNames,attrValues,attrTypes);
    XMLUtil.skipWhitespace(this.reader,null);
  }
  Properties extraAttributes=new Properties();
  this.validator.elementAttributesProcessed(fullName,extraAttributes,this.reader.getSystemID(),this.reader.getLineNr());
  Enumeration en=extraAttributes.keys();
  while (en.hasMoreElements()) {
    String key=(String)en.nextElement();
    String value=extraAttributes.getProperty(key);
    attrNames.addElement(key);
    attrValues.addElement(value);
    attrTypes.addElement("CDATA");
  }
  for (int i=0; i < attrNames.size(); i++) {
    String key=(String)attrNames.elementAt(i);
    String value=(String)attrValues.elementAt(i);
    if (key.equals("xmlns")) {
      defaultNamespace=value;
    }
 else     if (key.startsWith("xmlns:")) {
      namespaces.put(key.substring(6),value);
    }
  }
  if (prefix == null) {
    this.builder.startElement(name,prefix,defaultNamespace,this.reader.getSystemID(),this.reader.getLineNr());
  }
 else {
    this.builder.startElement(name,prefix,namespaces.getProperty(prefix),this.reader.getSystemID(),this.reader.getLineNr());
  }
  for (int i=0; i < attrNames.size(); i++) {
    String key=(String)attrNames.elementAt(i);
    if (key.startsWith("xmlns")) {
      continue;
    }
    String value=(String)attrValues.elementAt(i);
    String type=(String)attrTypes.elementAt(i);
    colonIndex=key.indexOf(':');
    if (colonIndex > 0) {
      String attPrefix=key.substring(0,colonIndex);
      key=key.substring(colonIndex + 1);
      this.builder.addAttribute(key,attPrefix,namespaces.getProperty(attPrefix),value,type);
    }
 else {
      this.builder.addAttribute(key,null,null,value,type);
    }
  }
  if (prefix == null) {
    this.builder.elementAttributesProcessed(name,prefix,defaultNamespace);
  }
 else {
    this.builder.elementAttributesProcessed(name,prefix,namespaces.getProperty(prefix));
  }
  if (ch == '/') {
    if (this.reader.read() != '>') {
      XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>'");
    }
    this.validator.elementEnded(name,this.reader.getSystemID(),this.reader.getLineNr());
    if (prefix == null) {
      this.builder.endElement(name,prefix,defaultNamespace);
    }
 else {
      this.builder.endElement(name,prefix,namespaces.getProperty(prefix));
    }
    return;
  }
  StringBuffer buffer=new StringBuffer(16);
  for (; ; ) {
    buffer.setLength(0);
    String str;
    for (; ; ) {
      XMLUtil.skipWhitespace(this.reader,buffer);
      str=XMLUtil.read(this.reader,'&');
      if ((str.charAt(0) == '&') && (str.charAt(1) != '#')) {
        XMLUtil.processEntity(str,this.reader,this.entityResolver);
      }
 else {
        break;
      }
    }
    if (str.charAt(0) == '<') {
      str=XMLUtil.read(this.reader,'\0');
      if (str.charAt(0) == '/') {
        XMLUtil.skipWhitespace(this.reader,null);
        str=XMLUtil.scanIdentifier(this.reader);
        if (!str.equals(fullName)) {
          XMLUtil.errorWrongClosingTag(reader.getSystemID(),reader.getLineNr(),name,str);
        }
        XMLUtil.skipWhitespace(this.reader,null);
        if (this.reader.read() != '>') {
          XMLUtil.errorClosingTagNotEmpty(reader.getSystemID(),reader.getLineNr());
        }
        this.validator.elementEnded(fullName,this.reader.getSystemID(),this.reader.getLineNr());
        if (prefix == null) {
          this.builder.endElement(name,prefix,defaultNamespace);
        }
 else {
          this.builder.endElement(name,prefix,namespaces.getProperty(prefix));
        }
        break;
      }
 else {
        this.reader.unread(str.charAt(0));
        this.scanSomeTag(true,defaultNamespace,(Properties)namespaces.clone());
      }
    }
 else {
      if (str.charAt(0) == '&') {
        ch=XMLUtil.processCharLiteral(str);
        buffer.append(ch);
      }
 else {
        reader.unread(str.charAt(0));
      }
      this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());
      Reader r=new ContentReader(this.reader,this.entityResolver,buffer.toString());
      this.builder.addPCData(r,this.reader.getSystemID(),this.reader.getLineNr());
      r.close();
    }
  }
}
