{
  super(parent,properties);
  String pathDataBuffer="";
  if (!properties.hasAttribute("d"))   return;
  pathDataBuffer=properties.getStringAttribute("d");
  StringBuffer pathChars=new StringBuffer();
  boolean lastSeparate=false;
  for (int i=0; i < pathDataBuffer.length(); i++) {
    char c=pathDataBuffer.charAt(i);
    boolean separate=false;
    if (c == 'M' || c == 'm' || c == 'L' || c == 'l' || c == 'H' || c == 'h' || c == 'V' || c == 'v' || c == 'C' || c == 'c' || c == 'S' || c == 's' || c == 'Z' || c == 'z' || c == ',') {
      separate=true;
      if (i != 0) {
        pathChars.append("|");
      }
    }
    if (c == 'Z' || c == 'z') {
      separate=false;
    }
    if (c == '-' && !lastSeparate) {
      pathChars.append("|");
    }
    if (c != ',') {
      pathChars.append("" + pathDataBuffer.charAt(i));
    }
    if (separate && c != ',' && c != '-') {
      pathChars.append("|");
    }
    lastSeparate=separate;
  }
  pathDataBuffer=pathChars.toString();
  String pathDataKeys[]=PApplet.splitTokens(pathDataBuffer,"|" + PConstants.WHITESPACE);
  float cx=0;
  float cy=0;
  int i=0;
  while (i < pathDataKeys.length) {
    char c=pathDataKeys[i].charAt(0);
switch (c) {
case 'M':
      cx=PApplet.parseFloat(pathDataKeys[i + 1]);
    cy=PApplet.parseFloat(pathDataKeys[i + 2]);
  moveto(cx,cy);
i+=3;
break;
case 'm':
cx=cx + PApplet.parseFloat(pathDataKeys[i + 1]);
cy=cy + PApplet.parseFloat(pathDataKeys[i + 2]);
moveto(cx,cy);
i+=3;
break;
case 'L':
cx=PApplet.parseFloat(pathDataKeys[i + 1]);
cy=PApplet.parseFloat(pathDataKeys[i + 2]);
lineto(cx,cy);
i+=3;
break;
case 'l':
cx=cx + PApplet.parseFloat(pathDataKeys[i + 1]);
cy=cy + PApplet.parseFloat(pathDataKeys[i + 2]);
lineto(cx,cy);
i+=3;
break;
case 'H':
cx=PApplet.parseFloat(pathDataKeys[i + 1]);
lineto(cx,cy);
i+=2;
break;
case 'h':
cx=cx + PApplet.parseFloat(pathDataKeys[i + 1]);
lineto(cx,cy);
i+=2;
break;
case 'V':
cy=PApplet.parseFloat(pathDataKeys[i + 1]);
lineto(cx,cy);
i+=2;
break;
case 'v':
cy=cy + PApplet.parseFloat(pathDataKeys[i + 1]);
lineto(cx,cy);
i+=2;
break;
case 'C':
{
float ctrlX1=PApplet.parseFloat(pathDataKeys[i + 1]);
float ctrlY1=PApplet.parseFloat(pathDataKeys[i + 2]);
float ctrlX2=PApplet.parseFloat(pathDataKeys[i + 3]);
float ctrlY2=PApplet.parseFloat(pathDataKeys[i + 4]);
float endX=PApplet.parseFloat(pathDataKeys[i + 5]);
float endY=PApplet.parseFloat(pathDataKeys[i + 6]);
curveto(ctrlX1,ctrlY1,ctrlX2,ctrlY2,endX,endY);
cx=endX;
cy=endY;
i+=7;
}
break;
case 'c':
{
float ctrlX1=cx + PApplet.parseFloat(pathDataKeys[i + 1]);
float ctrlY1=cy + PApplet.parseFloat(pathDataKeys[i + 2]);
float ctrlX2=cx + PApplet.parseFloat(pathDataKeys[i + 3]);
float ctrlY2=cy + PApplet.parseFloat(pathDataKeys[i + 4]);
float endX=cx + PApplet.parseFloat(pathDataKeys[i + 5]);
float endY=cy + PApplet.parseFloat(pathDataKeys[i + 6]);
curveto(ctrlX1,ctrlY1,ctrlX2,ctrlY2,endX,endY);
cx=endX;
cy=endY;
i+=7;
}
break;
case 'S':
{
float ppx=x[count - 2];
float ppy=y[count - 2];
float px=x[count - 1];
float py=y[count - 1];
float ctrlX1=px + (px - ppx);
float ctrlY1=py + (py - ppy);
float ctrlX2=PApplet.parseFloat(pathDataKeys[i + 1]);
float ctrlY2=PApplet.parseFloat(pathDataKeys[i + 2]);
float endX=PApplet.parseFloat(pathDataKeys[i + 3]);
float endY=PApplet.parseFloat(pathDataKeys[i + 4]);
curveto(ctrlX1,ctrlY1,ctrlX2,ctrlY2,endX,endY);
cx=endX;
cy=endY;
i+=5;
}
break;
case 's':
{
float ppx=x[count - 2];
float ppy=y[count - 2];
float px=x[count - 1];
float py=y[count - 1];
float ctrlX1=px + (px - ppx);
float ctrlY1=py + (py - ppy);
float ctrlX2=cx + PApplet.parseFloat(pathDataKeys[i + 1]);
float ctrlY2=cy + PApplet.parseFloat(pathDataKeys[i + 2]);
float endX=cx + PApplet.parseFloat(pathDataKeys[i + 3]);
float endY=cy + PApplet.parseFloat(pathDataKeys[i + 4]);
curveto(ctrlX1,ctrlY1,ctrlX2,ctrlY2,endX,endY);
cx=endX;
cy=endY;
i+=5;
}
break;
case 'Z':
case 'z':
closed=true;
i++;
break;
default :
throw new RuntimeException("shape command not handled: " + pathDataKeys[i]);
}
}
}
