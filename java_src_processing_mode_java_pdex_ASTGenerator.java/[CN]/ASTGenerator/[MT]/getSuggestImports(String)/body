{
  Messages.log("* getSuggestImports");
  if (classPath == null) {
    return null;
  }
  log("Looking for class " + className);
  RegExpResourceFilter regf=new RegExpResourceFilter(Pattern.compile(".*"),Pattern.compile("(.*\\$)?" + className + "\\.class",Pattern.CASE_INSENSITIVE));
  List<String> candidates=new ArrayList<>();
{
    String searchPath=((JavaMode)editor.getMode()).getSearchPath();
    String[] paths=searchPath.split(File.pathSeparator);
    List<String> entries=new ArrayList<>();
    for (int i=0; i < paths.length; i++) {
      String path=paths[i];
      if (path != null && !path.trim().isEmpty()) {
        entries.add(path);
      }
    }
    String[] pathArray=entries.toArray(new String[entries.size()]);
    classPath=factory.createFromPaths(pathArray);
    String[] resources=classPath.findResources("",regf);
    for (    String res : resources) {
      candidates.add(res);
      log("Res: " + res);
    }
  }
  for (  Library lib : editor.getMode().contribLibraries) {
    ClassPath cp=factory.createFromPath(lib.getClassPath());
    String[] resources=cp.findResources("",regf);
    for (    String res : resources) {
      candidates.add(res);
      log("Res: " + res);
    }
  }
  if (editor.getSketch().hasCodeFolder()) {
    File codeFolder=editor.getSketch().getCodeFolder();
    ClassPath cp=factory.createFromPath(Util.contentsToClassPath(codeFolder));
    String[] resources=cp.findResources("",regf);
    for (    String res : resources) {
      candidates.add(res);
      log("Res: " + res);
    }
  }
  String[] resources=new String[candidates.size()];
  for (int i=0; i < resources.length; i++) {
    resources[i]=candidates.get(i).replace('/','.').replace('$','.').substring(0,candidates.get(i).length() - 6);
  }
  return resources;
}
