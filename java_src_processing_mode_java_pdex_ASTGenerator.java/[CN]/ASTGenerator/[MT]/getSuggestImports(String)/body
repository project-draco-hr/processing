{
  if (classPath == null) {
    return null;
  }
  if (ignoredImportSuggestions == null) {
    ignoredImportSuggestions=new TreeSet<>();
  }
 else {
    if (ignoredImportSuggestions.contains(className)) {
      log("Ignoring import suggestions for " + className);
      return null;
    }
  }
  log("Looking for class " + className);
  RegExpResourceFilter regf=new RegExpResourceFilter(Pattern.compile(".*"),Pattern.compile(className + ".class",Pattern.CASE_INSENSITIVE));
  String[] resources=classPath.findResources("",regf);
  List<String> candidates=new ArrayList<>();
  Collections.addAll(candidates,resources);
  for (  Library lib : editor.getMode().contribLibraries) {
    ClassPath cp=factory.createFromPath(lib.getClassPath());
    resources=cp.findResources("",regf);
    for (    String res : resources) {
      candidates.add(res);
      log("Res: " + res);
    }
  }
  if (editor.getSketch().hasCodeFolder()) {
    File codeFolder=editor.getSketch().getCodeFolder();
    ClassPath cp=factory.createFromPath(Util.contentsToClassPath(codeFolder));
    resources=cp.findResources("",regf);
    for (    String res : resources) {
      candidates.add(res);
      log("Res: " + res);
    }
  }
  resources=new String[candidates.size()];
  for (int i=0; i < resources.length; i++) {
    resources[i]=candidates.get(i).replace('/','.').substring(0,candidates.get(i).length() - 6);
  }
  return resources;
}
