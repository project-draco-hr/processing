{
  debugTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      Messages.log(e.toString());
      if (debugTree.getLastSelectedPathComponent() == null) {
        return;
      }
      DefaultMutableTreeNode tnode=(DefaultMutableTreeNode)debugTree.getLastSelectedPathComponent();
      if (tnode.getUserObject() instanceof ASTNodeWrapper) {
        ASTNodeWrapper awrap=(ASTNodeWrapper)tnode.getUserObject();
        awrap.highlightNode(editor);
        try {
          int javaLineNumber=getLineNumber(awrap.getNode());
          int pdeOffs[]=errorCheckerService.calculateTabIndexAndLineNumber(javaLineNumber);
          PlainDocument javaSource=new PlainDocument();
          javaSource.insertString(0,errorCheckerService.lastCodeCheckResult.sourceCode,null);
          Element lineElement=javaSource.getDefaultRootElement().getElement(javaLineNumber - 1);
          if (lineElement == null) {
            return;
          }
          String javaLine=javaSource.getText(lineElement.getStartOffset(),lineElement.getEndOffset() - lineElement.getStartOffset());
          editor.getSketch().setCurrentCode(pdeOffs[0]);
          String pdeLine=editor.getLineText(pdeOffs[1]);
          log("JL " + javaLine + " LSO "+ lineElement.getStartOffset()+ ","+ lineElement.getEndOffset());
          log("PL " + pdeLine);
        }
 catch (        BadLocationException ex) {
          ex.printStackTrace();
        }
      }
    }
  }
);
}
