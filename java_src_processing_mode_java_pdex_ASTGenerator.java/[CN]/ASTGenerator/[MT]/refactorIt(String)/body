{
  String selText=lastClickedWord == null ? getSelectedText() : lastClickedWord;
  DefaultMutableTreeNode defCU=findAllOccurrences();
  if (defCU == null) {
    editor.statusMessage("Can't locate definition of " + selText,EditorStatus.ERROR);
    return;
  }
  if (!newName.matches("([a-zA-Z][a-zA-Z0-9_]*)|([_][a-zA-Z0-9_]+)")) {
    JOptionPane.showMessageDialog(new JFrame(),newName + " isn't a valid name.","Uh oh..",JOptionPane.PLAIN_MESSAGE);
    return;
  }
  errorCheckerService.cancel();
  gui.updateUsageTree(defCU);
  int lineOffsetDisplacementConst=newName.length() - selText.length();
  HashMap<Integer,Integer> lineOffsetDisplacement=new HashMap<>();
  int pdeOffsets[][]=new int[defCU.getChildCount()][3];
  for (int i=0; i < defCU.getChildCount(); i++) {
    ASTNodeWrapper awrap=(ASTNodeWrapper)((DefaultMutableTreeNode)(defCU.getChildAt(i))).getUserObject();
    int ans[]=errorCheckerService.calculateTabIndexAndLineNumber(awrap.getLineNumber());
    pdeOffsets[i][0]=ans[0];
    pdeOffsets[i][1]=ans[1];
    pdeOffsets[i][2]=awrap.getPDECodeOffsetForSN(this);
  }
  editor.startCompoundEdit();
  for (int i=0; i < defCU.getChildCount(); i++) {
    ASTNodeWrapper awrap=(ASTNodeWrapper)((DefaultMutableTreeNode)(defCU.getChildAt(i))).getUserObject();
    int off=0;
    if (lineOffsetDisplacement.get(awrap.getLineNumber()) != null) {
      off=lineOffsetDisplacement.get(awrap.getLineNumber());
      lineOffsetDisplacement.put(awrap.getLineNumber(),lineOffsetDisplacementConst + off);
    }
 else {
      lineOffsetDisplacement.put(awrap.getLineNumber(),lineOffsetDisplacementConst);
    }
    editor.getTextArea().setSelectedText(newName);
  }
  editor.stopCompoundEdit();
  errorCheckerService.request();
  editor.getSketch().setModified(true);
  errorCheckerService.request();
  lastClickedWord=null;
  lastClickedWordNode=null;
}
