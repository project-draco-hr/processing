{
  final JEditTextArea ta=editor.getTextArea();
  log("Last clicked word:" + lastClickedWord);
  String selText=lastClickedWord == null ? ta.getSelectedText() : lastClickedWord;
  int line=ta.getSelectionStartLine();
  log(selText + "<- offsets " + (line)+ ", "+ (ta.getSelectionStart() - ta.getLineStartOffset(line))+ ", "+ (ta.getSelectionStop() - ta.getLineStartOffset(line)));
  ASTNode wnode;
  if (lastClickedWord == null || lastClickedWordNode == null) {
    wnode=getASTNodeAt(ta.getSelectionStart());
  }
 else {
    wnode=lastClickedWordNode;
  }
  if (wnode == null) {
    return null;
  }
  Messages.loge("Gonna find all occurrences of " + getNodeAsString(wnode));
  if (wnode.getNodeType() == ASTNode.METHOD_DECLARATION) {
    MethodDeclaration md=(MethodDeclaration)wnode;
    ASTNode node=md.getParent();
    while (node != null) {
      if (node instanceof TypeDeclaration) {
        break;
      }
      node=node.getParent();
    }
    if (node != null && node instanceof TypeDeclaration) {
      TypeDeclaration td=(TypeDeclaration)node;
      if (td.getName().toString().equals(md.getName().toString())) {
        Messages.loge("Renaming constructor of " + getNodeAsString(td));
        wnode=td;
      }
    }
  }
  DefaultMutableTreeNode defCU=new DefaultMutableTreeNode(wnode);
  dfsNameOnly(defCU,wnode,selText);
  Stack<Object> tempS=new Stack<>();
  for (int i=0; i < defCU.getChildCount(); i++) {
    tempS.push(defCU.getChildAt(i));
  }
  defCU.removeAllChildren();
  while (!tempS.isEmpty()) {
    defCU.add((MutableTreeNode)tempS.pop());
  }
  log(wnode);
  return defCU;
}
