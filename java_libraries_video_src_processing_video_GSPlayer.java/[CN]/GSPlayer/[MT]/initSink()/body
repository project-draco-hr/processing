{
  if (streamType == GSVideo.VIDEO) {
    if (copyHandler != null) {
      try {
        copyBufferMethod=copyHandler.getClass().getMethod("addPixelsToBuffer",new Class[]{Object.class,IntBuffer.class,int.class,int.class});
        copyBufferMode=true;
      }
 catch (      Exception e) {
        copyBufferMode=false;
      }
      if (copyBufferMode) {
        try {
          Method meth=copyHandler.getClass().getMethod("setPixelSource",new Class[]{Object.class});
          meth.invoke(copyHandler,new Object[]{this});
        }
 catch (        Exception e) {
          copyBufferMode=false;
        }
        if (copyBufferMode) {
          natSink=new BufferDataAppSink("nat",copyMask,new BufferDataAppSink.Listener(){
            public void bufferFrame(            int w,            int h,            Buffer buffer){
              invokeEvent(w,h,buffer);
            }
          }
);
          natSink.setAutoDisposeBuffer(false);
          gplayer.setVideoSink(natSink);
          natSink.dispose();
        }
      }
    }
    if (!copyBufferMode) {
      rgbSink=new RGBDataAppSink("rgb",new RGBDataAppSink.Listener(){
        public void rgbFrame(        int w,        int h,        IntBuffer buffer){
          invokeEvent(w,h,buffer);
        }
      }
);
      rgbSink.setPassDirectBuffer(GSVideo.passDirectBuffer);
      gplayer.setVideoSink(rgbSink);
      rgbSink.dispose();
    }
  }
 else   if (streamType == GSVideo.AUDIO) {
    gplayer.setVideoSink(ElementFactory.make("fakesink","audiosink"));
  }
 else   if (streamType == GSVideo.RAW) {
    dataSink=new ByteDataAppSink("data",new ByteDataAppSink.Listener(){
      public void byteFrame(      Caps caps,      int size,      ByteBuffer buffer){
        invokeEvent(caps,size,buffer);
      }
    }
);
    dataSink.setPassDirectBuffer(GSVideo.passDirectBuffer);
    gplayer.setVideoSink(dataSink);
    dataSink.dispose();
  }
 else {
    System.err.println("Unrecognized stream type: Please use VIDEO, AUDIO, or RAW.");
    return;
  }
  Bus bus=gplayer.getBus();
  bus.connect(new Bus.EOS(){
    public void endOfStream(    GstObject element){
      eosEvent();
    }
  }
);
  sinkReady=true;
}
