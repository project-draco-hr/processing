{
  monitor.beginTask("Full Project Build",4);
  IProject proj=getProject();
  if (!proj.isOpen()) {
    return;
  }
  if (checkCancel(monitor)) {
    return;
  }
  if (!deleteProblemMarkers(proj)) {
    return;
  }
  IResource[] folderContents=proj.members();
  IFolder codeFolder=proj.getFolder("code");
  IFolder dataFolder=proj.getFolder("data");
  IFolder outputFolder=proj.getFolder("bin");
  if (!outputFolder.exists())   outputFolder.create(IResource.NONE,true,null);
  String classPath="";
  String[] codeFolderPackages=null;
  String libraryPath;
  if (codeFolder.exists()) {
    libraryPath=codeFolder.getLocationURI().toString();
    String codeFolderClassPath=Compiler.contentsToClassPath(codeFolder.getLocation().toFile());
    classPath+=File.pathSeparator + codeFolderClassPath;
    codeFolderPackages=Compiler.packageListFromClassPath(codeFolderClassPath);
    for (    String s : codeFolderPackages) {
      System.out.println(s);
    }
  }
 else {
    libraryPath="";
  }
  StringBuffer bigCode=new StringBuffer();
  int bigCount=0;
  int[] preprocOffsets=new int[folderContents.length];
  for (int i=0; i < folderContents.length; i++) {
    IResource file=folderContents[i];
    if (file instanceof IFile && file.getFileExtension().equalsIgnoreCase("pde")) {
      String content=readFile((IFile)file);
      preprocOffsets[i]=bigCount;
      bigCode.append(content);
      bigCode.append("\n");
      bigCount+=getLineCount(content);
    }
  }
  monitor.worked(1);
  if (checkCancel(monitor)) {
    return;
  }
  spoof_preferences();
  PdePreprocessor preproc=new PdePreprocessor(proj.getName(),4);
  final PreprocessResult result;
  try {
    IFile outputFile=outputFolder.getFile(proj.getName() + ".java");
    StringWriter outputFileContents=new StringWriter();
    result=preproc.write(outputFileContents,bigCode.toString(),codeFolderPackages);
    ByteArrayInputStream inStream=new ByteArrayInputStream(outputFileContents.toString().getBytes());
    outputFile.create(inStream,true,monitor);
    outputFile.setDerived(true);
  }
 catch (  antlr.RecognitionException re) {
    int errorFile=0;
    int errorLine=re.getLine() - 1;
    for (int i=1; i < folderContents.length; i++) {
      IResource file=folderContents[i];
      if (file instanceof IFile && file.getFileExtension().equalsIgnoreCase("pde") && (preprocOffsets[i] < errorLine)) {
        errorFile=i;
      }
    }
    errorLine-=preprocOffsets[errorFile];
    String msg=re.getMessage();
    if (msg.equals("expecting RCURLY, found 'null'")) {
      msg="Found one too many { characters without a } to match it.";
    }
    if (msg.indexOf("expecting RBRACK") != -1) {
      msg="Syntax error, maybe a missing right ] character?";
    }
    if (msg.indexOf("expecting SEMI") != -1) {
      msg="Syntax error, maybe a missing semicolon?";
    }
    if (msg.indexOf("expecting RPAREN") != -1) {
      msg="Syntax error, maybe a missing right parenthesis?";
    }
    if (msg.indexOf("preproc.web_colors") != -1) {
      msg="A web color (such as #ffcc00) must be six digits.";
    }
    reportProblem(msg,(IFile)folderContents[errorFile],errorLine,true);
  }
catch (  Exception e) {
    ProcessingLog.logError(e);
  }
  monitor.worked(1);
  if (checkCancel(monitor)) {
    return;
  }
  for (int i=0; i < folderContents.length; i++) {
    IResource file=folderContents[i];
    if (file instanceof IFile && file.getFileExtension().equalsIgnoreCase("java")) {
      folderContents[i].copy(outputFolder.getProjectRelativePath(),IResource.DERIVED,monitor);
    }
 else     if (file instanceof IFile && file.getFileExtension().equalsIgnoreCase("pde")) {
      preprocOffsets[i]+=result.headerOffset;
    }
  }
  boolean foundMain=preproc.getFoundMain();
  monitor.worked(1);
  if (checkCancel(monitor)) {
    return;
  }
  monitor.done();
}
