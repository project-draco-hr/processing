{
  ByteBuffer ibb=ByteBuffer.allocateDirect(DEFAULT_TRIANGLES * SIZEOF_INT);
  ibb.order(ByteOrder.nativeOrder());
  indicesBuffer=ibb.asIntBuffer();
  ByteBuffer vbb=ByteBuffer.allocateDirect(DEFAULT_BUFFER_SIZE * 3 * SIZEOF_FLOAT);
  vbb.order(ByteOrder.nativeOrder());
  verticesBuffer=vbb.asFloatBuffer();
  ByteBuffer cbb=ByteBuffer.allocateDirect(DEFAULT_BUFFER_SIZE * 4 * SIZEOF_FLOAT);
  cbb.order(ByteOrder.nativeOrder());
  colorsBuffer=cbb.asFloatBuffer();
  ByteBuffer nbb=ByteBuffer.allocateDirect(DEFAULT_BUFFER_SIZE * 3 * SIZEOF_FLOAT);
  nbb.order(ByteOrder.nativeOrder());
  normalsBuffer=nbb.asFloatBuffer();
  texcoordsBuffer=new FloatBuffer[MAX_TEXTURES];
  ByteBuffer tbb=ByteBuffer.allocateDirect(DEFAULT_BUFFER_SIZE * 2 * SIZEOF_FLOAT);
  tbb.order(ByteOrder.nativeOrder());
  texcoordsBuffer[0]=tbb.asFloatBuffer();
  indicesArray=new int[DEFAULT_TRIANGLES];
  verticesArray=new float[DEFAULT_BUFFER_SIZE * 3];
  colorsArray=new float[DEFAULT_BUFFER_SIZE * 4];
  normalsArray=new float[DEFAULT_BUFFER_SIZE * 3];
  texcoordsArray=new float[1][DEFAULT_BUFFER_SIZE * 2];
  texturesArray=new PTexture[MAX_TEXTURES];
  allocTexStorage=1;
  stack=new GLMatrixStack();
  idxCount=0;
  vertCount=0;
  texCount=0;
}
