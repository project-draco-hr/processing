{
  final ContributionTab activeTab=getActiveTab();
  activeTab.retryConnectingButton.setEnabled(false);
  activeTab.statusPanel.setMessage(Language.text("contrib.status.downloading_list"));
  activeTab.contribListing.downloadAvailableList(base,new ContribProgressBar(activeTab.progressBar){
    @Override public void startTask(    String name,    int maxValue){
      super.startTask(name,maxValue);
      progressBar.setVisible(true);
      progressBar.setString(null);
    }
    @Override public void setProgress(    int value){
      super.setProgress(value);
      progressBar.setValue(value);
      progressBar.setStringPainted(true);
      activeTab.statusPanel.setMessage(Language.text("contrib.status.downloading_list"));
    }
    @Override public void finishedAction(){
      progressBar.setVisible(false);
      activeTab.updateContributionListing();
      activeTab.updateCategoryChooser();
      activeTab.retryConnectingButton.setEnabled(true);
      if (error) {
        if (exception instanceof SocketTimeoutException) {
          activeTab.statusPanel.setErrorMessage(Language.text("contrib.errors.list_download.timeout"));
        }
 else {
          activeTab.statusPanel.setErrorMessage(Language.text("contrib.errors.list_download"));
        }
        exception.printStackTrace();
        activeTab.retryConnectingButton.setVisible(true);
        buildErrorPanel();
        setLayoutWithError();
      }
 else {
        activeTab.statusPanel.setMessage(Language.text("contrib.status.done"));
        activeTab.retryConnectingButton.setVisible(false);
      }
    }
  }
);
}
