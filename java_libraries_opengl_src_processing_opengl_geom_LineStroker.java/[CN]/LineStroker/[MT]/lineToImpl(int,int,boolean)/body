{
  computeOffset(x0,y0,x1,y1,offset);
  int mx=offset[0];
  int my=offset[1];
  if (!started) {
    emitMoveTo(x0 + mx,y0 + my);
    this.sx1=x1;
    this.sy1=y1;
    this.mx0=mx;
    this.my0=my;
    started=true;
  }
 else {
    boolean ccw=isCCW(px0,py0,x0,y0,x1,y1);
    if (joinSegment) {
      if (joinStyle == LinePath.JOIN_MITER) {
        drawMiter(px0,py0,x0,y0,x1,y1,omx,omy,mx,my,ccw);
      }
 else       if (joinStyle == LinePath.JOIN_ROUND) {
        drawRoundJoin(x0,y0,omx,omy,mx,my,0,false,ccw,ROUND_JOIN_THRESHOLD);
      }
    }
 else {
      drawRoundJoin(x0,y0,omx,omy,mx,my,0,false,ccw,ROUND_JOIN_INTERNAL_THRESHOLD);
    }
    emitLineTo(x0,y0,!ccw);
  }
  emitLineTo(x0 + mx,y0 + my,false);
  emitLineTo(x1 + mx,y1 + my,false);
  emitLineTo(x0 - mx,y0 - my,true);
  emitLineTo(x1 - mx,y1 - my,true);
  lx0=x1 + mx;
  ly0=y1 + my;
  lx0p=x1 - mx;
  ly0p=y1 - my;
  lx1=x1;
  ly1=y1;
  this.omx=mx;
  this.omy=my;
  this.px0=x0;
  this.py0=y0;
  this.x0=x1;
  this.y0=y1;
  this.prev=LinePath.SEG_LINETO;
}
