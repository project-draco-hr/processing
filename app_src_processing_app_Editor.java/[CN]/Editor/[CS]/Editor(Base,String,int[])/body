{
  super(WINDOW_TITLE);
  this.base=ibase;
  Base.setIcon(this);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      base.handleClose(Editor.this,false);
    }
  }
);
  setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      base.handleActivated(Editor.this);
      fileMenu.insert(sketchbookMenu,2);
      fileMenu.insert(examplesMenu,3);
      sketchMenu.insert(importMenu,4);
    }
  }
);
  buildMenuBar();
  Container contentPain=getContentPane();
  contentPain.setLayout(new BorderLayout());
  JPanel pain=new JPanel();
  pain.setLayout(new BorderLayout());
  contentPain.add(pain,BorderLayout.CENTER);
  Box box=Box.createVerticalBox();
  Box upper=Box.createVerticalBox();
  if (toolbarMenu == null) {
    toolbarMenu=new JMenu();
    base.rebuildToolbarMenu(toolbarMenu);
  }
  toolbar=new EditorToolbar(this,toolbarMenu);
  upper.add(toolbar);
  header=new EditorHeader(this);
  upper.add(header);
  textarea=new JEditTextArea(new PdeTextAreaDefaults());
  textarea.setRightClickPopup(new TextAreaPopup());
  textarea.setHorizontalOffset(6);
  consolePanel=new JPanel();
  consolePanel.setLayout(new BorderLayout());
  status=new EditorStatus(this);
  consolePanel.add(status,BorderLayout.NORTH);
  console=new EditorConsole(this);
  console.setBorder(null);
  consolePanel.add(console,BorderLayout.CENTER);
  lineStatus=new EditorLineStatus(textarea);
  consolePanel.add(lineStatus,BorderLayout.SOUTH);
  upper.add(textarea);
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,upper,consolePanel);
  splitPane.setOneTouchExpandable(true);
  splitPane.setContinuousLayout(true);
  splitPane.setResizeWeight(1D);
  splitPane.setBorder(null);
  int dividerSize=Preferences.getInteger("editor.divider.size");
  if (dividerSize != 0) {
    splitPane.setDividerSize(dividerSize);
  }
  splitPane.setMinimumSize(new Dimension(600,400));
  box.add(splitPane);
  listener=new EditorListener(this,textarea);
  pain.add(box);
  pain.setTransferHandler(new TransferHandler(){
    public boolean canImport(    JComponent dest,    DataFlavor[] flavors){
      return true;
    }
    public boolean importData(    JComponent src,    Transferable transferable){
      int successful=0;
      try {
        DataFlavor uriListFlavor=new DataFlavor("text/uri-list;class=java.lang.String");
        if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
          java.util.List list=(java.util.List)transferable.getTransferData(DataFlavor.javaFileListFlavor);
          for (int i=0; i < list.size(); i++) {
            File file=(File)list.get(i);
            if (sketch.addFile(file)) {
              successful++;
            }
          }
        }
 else         if (transferable.isDataFlavorSupported(uriListFlavor)) {
          String data=(String)transferable.getTransferData(uriListFlavor);
          String[] pieces=PApplet.splitTokens(data,"\r\n");
          for (int i=0; i < pieces.length; i++) {
            if (pieces[i].startsWith("#"))             continue;
            String path=null;
            if (pieces[i].startsWith("file:///")) {
              path=pieces[i].substring(7);
            }
 else             if (pieces[i].startsWith("file:/")) {
              path=pieces[i].substring(5);
            }
            if (sketch.addFile(new File(path))) {
              successful++;
            }
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
      if (successful == 0) {
        statusError("No files were added to the sketch.");
      }
 else       if (successful == 1) {
        statusNotice("One file added to the sketch.");
      }
 else {
        statusNotice(successful + " files added to the sketch.");
      }
      return true;
    }
  }
);
  pack();
  setPlacement(location);
  applyPreferences();
  boolean loaded=handleOpenInternal(path);
  if (!loaded)   sketch=null;
}
