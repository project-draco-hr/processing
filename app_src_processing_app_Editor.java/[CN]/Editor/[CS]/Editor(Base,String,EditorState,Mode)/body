{
  super("Processing",state.checkConfig());
  this.base=base;
  this.state=state;
  this.mode=mode;
  Toolkit.setIcon(this);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      base.handleClose(Editor.this,false);
    }
  }
);
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      base.handleActivated(Editor.this);
      fileMenu.insert(base.getRecentMenu(),2);
      Toolkit.setMenuMnemsInside(fileMenu);
      mode.insertImportMenu(sketchMenu);
      Toolkit.setMenuMnemsInside(sketchMenu);
      mode.insertToolbarRecentMenu();
    }
    public void windowDeactivated(    WindowEvent e){
      fileMenu.remove(base.getRecentMenu());
      mode.removeImportMenu(sketchMenu);
      mode.removeToolbarRecentMenu();
    }
  }
);
  timer=new Timer();
  buildMenuBar();
  JPanel contentPain=new JPanel();
  setContentPane(contentPain);
  contentPain.setLayout(new BorderLayout());
  Box box=Box.createVerticalBox();
  Box upper=Box.createVerticalBox();
  initModeMenu();
  toolbar=createToolbar();
  upper.add(toolbar);
  header=createHeader();
  upper.add(header);
  textarea=createTextArea();
  textarea.setRightClickPopup(new TextAreaPopup());
  textarea.setHorizontalOffset(JEditTextArea.leftHandGutter);
  consolePanel=createFooter();
  upper.add(textarea);
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,upper,consolePanel);
  splitPane.setOneTouchExpandable(false);
  splitPane.setContinuousLayout(true);
  splitPane.setResizeWeight(1D);
  splitPane.setBorder(null);
  UIManager.getDefaults().put("SplitPane.border",BorderFactory.createEmptyBorder());
  splitPane.setDividerSize(EditorStatus.HIGH);
  splitPane.setUI(new BasicSplitPaneUI(){
    public BasicSplitPaneDivider createDefaultDivider(){
      status=new EditorStatus(this,Editor.this);
      return status;
    }
  }
);
  box.add(splitPane);
  contentPain.add(box);
  textarea.addCaretListener(new CaretListener(){
    String lastText=textarea.getText();
    public void caretUpdate(    CaretEvent e){
      String newText=textarea.getText();
      if (lastText.equals(newText) && isDirectEdit()) {
        endTextEditHistory();
      }
      lastText=newText;
    }
  }
);
  contentPain.setTransferHandler(new FileDropHandler());
  pack();
  state.apply(this);
  setMinimumSize(new Dimension(Preferences.getInteger("editor.window.width.min"),Preferences.getInteger("editor.window.height.min")));
  applyPreferences();
  addWindowFocusListener(new WindowAdapter(){
    public void windowGainedFocus(    WindowEvent e){
      textarea.requestFocusInWindow();
    }
  }
);
  boolean loaded=handleOpenInternal(path);
  if (!loaded) {
    sketch=null;
  }
  addWindowFocusListener(new ChangeDetector(this));
}
