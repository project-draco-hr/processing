{
  super("Processing",state.checkConfig());
  this.base=base;
  this.state=state;
  this.mode=mode;
  Base.setIcon(this);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      base.handleClose(Editor.this,false);
    }
  }
);
  setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowActivated(    WindowEvent e){
      base.handleActivated(Editor.this);
      fileMenu.insert(base.getSketchbookMenu(),2);
      fileMenu.insert(base.getRecentMenu(),3);
      sketchMenu.insert(mode.getImportMenu(),4);
    }
    public void windowDeactivated(    WindowEvent e){
      fileMenu.remove(base.getSketchbookMenu());
      fileMenu.remove(base.getRecentMenu());
      sketchMenu.remove(mode.getImportMenu());
    }
  }
);
  timer=new Timer();
  buildMenuBar();
  Container contentPain=getContentPane();
  contentPain.setLayout(new BorderLayout());
  JPanel pain=new JPanel();
  pain.setLayout(new BorderLayout());
  contentPain.add(pain,BorderLayout.CENTER);
  Box box=Box.createVerticalBox();
  Box upper=Box.createVerticalBox();
  initModeMenu();
  toolbar=createToolbar();
  upper.add(toolbar);
  header=new EditorHeader(this);
  upper.add(header);
  textarea=createTextArea();
  textarea.setRightClickPopup(new TextAreaPopup());
  textarea.setHorizontalOffset(JEditTextArea.leftHandGutter);
  consolePanel=new JPanel();
  consolePanel.setLayout(new BorderLayout());
  status=new EditorStatus(this);
  consolePanel.add(status,BorderLayout.NORTH);
  console=new EditorConsole(this);
  console.setBorder(null);
  consolePanel.add(console,BorderLayout.CENTER);
  lineStatus=new EditorLineStatus(this);
  consolePanel.add(lineStatus,BorderLayout.SOUTH);
  upper.add(textarea);
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,upper,consolePanel);
  splitPane.setOneTouchExpandable(false);
  splitPane.setContinuousLayout(true);
  splitPane.setResizeWeight(1D);
  splitPane.setBorder(null);
  int dividerSize=Preferences.getInteger("editor.divider.size");
  if (dividerSize != 0) {
    splitPane.setDividerSize(dividerSize);
  }
  box.add(splitPane);
  pain.add(box);
  textarea.addKeyListener(toolbar);
  textarea.addCaretListener(new CaretListener(){
    String lastText=textarea.getText();
    public void caretUpdate(    CaretEvent e){
      String newText=textarea.getText();
      if (lastText.equals(newText) && isDirectEdit()) {
        endTextEditHistory();
      }
      lastText=newText;
    }
  }
);
  pain.setTransferHandler(new FileDropHandler());
  pack();
  state.apply(this);
  setMinimumSize(new Dimension(Preferences.getInteger("editor.window.width.min"),Preferences.getInteger("editor.window.height.min")));
  applyPreferences();
  addWindowFocusListener(new WindowAdapter(){
    public void windowGainedFocus(    WindowEvent e){
      textarea.requestFocusInWindow();
    }
  }
);
  boolean loaded=handleOpenInternal(path);
  if (!loaded)   sketch=null;
}
