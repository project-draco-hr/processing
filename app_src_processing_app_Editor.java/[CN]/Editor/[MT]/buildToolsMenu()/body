{
  JMenuItem item;
  JMenu menu=new JMenu("Tools");
  item=newJMenuItem("Auto Format",'T',false);
  item.addActionListener(new ActionListener(){
    synchronized public void actionPerformed(    ActionEvent e){
      new AutoFormat(Editor.this).show();
    }
  }
);
  menu.add(item);
  item=new JMenuItem("Create Font...");
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new CreateFont(Editor.this).setVisible(true);
    }
  }
);
  menu.add(item);
  item=new JMenuItem("Color Selector");
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          new ColorSelector(Editor.this).show();
        }
      }
);
    }
  }
);
  menu.add(item);
  item=new JMenuItem("Copy for Discourse");
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          new DiscourseFormat(Editor.this).show();
        }
      }
);
    }
  }
);
  menu.add(item);
  item=new JMenuItem("Archive Sketch");
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new Archiver(Editor.this).show();
    }
  }
);
  menu.add(item);
  item=new JMenuItem("Fix encoding and reload file");
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          SketchCode code=sketch.current;
          if (code.modified) {
            int result=JOptionPane.showConfirmDialog(Editor.this,"Discard changes and reload?","Reload",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.NO_OPTION) {
              return;
            }
          }
          File file=code.file;
          if (file.length() != 0) {
            try {
              FileReader fr=new FileReader(file);
              BufferedReader reader=new BufferedReader(fr);
              StringBuffer buffer=new StringBuffer();
              String line=null;
              while ((line=reader.readLine()) != null) {
                buffer.append(line);
                buffer.append('\n');
              }
              reader.close();
              beginCompoundEdit();
              textarea.setText(buffer.toString());
              endCompoundEdit();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
);
    }
  }
);
  menu.add(item);
  return menu;
}
