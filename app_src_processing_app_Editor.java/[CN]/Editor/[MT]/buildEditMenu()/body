{
  JMenu menu=new JMenu(Language.text("menu.edit"));
  JMenuItem item;
  undoItem=Toolkit.newJMenuItem(Language.text("menu.edit.undo"),'Z');
  undoItem.addActionListener(undoAction=new UndoAction());
  menu.add(undoItem);
  if (Base.isWindows()) {
    redoItem=Toolkit.newJMenuItem(Language.text("menu.edit.redo"),'Y');
  }
 else {
    redoItem=Toolkit.newJMenuItemShift(Language.text("menu.edit.redo"),'Z');
  }
  redoItem.addActionListener(redoAction=new RedoAction());
  menu.add(redoItem);
  menu.addSeparator();
  cutItems=Toolkit.newJMenuItem(Language.text("menu.edit.cut"),'X');
  cutItems.addActionListener(cutAction=new CutAction());
  menu.add(cutItems);
  copyItems=Toolkit.newJMenuItem(Language.text("menu.edit.copy"),'C');
  copyItems.addActionListener(copyAction=new CopyAction());
  menu.add(copyItems);
  item=Toolkit.newJMenuItemShift(Language.text("menu.edit.copy_as_html"),'C');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleCopyAsHTML();
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.edit.paste"),'V');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textarea.paste();
      sketch.setModified(true);
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.edit.select_all"),'A');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textarea.selectAll();
    }
  }
);
  menu.add(item);
  menu.addSeparator();
  item=Toolkit.newJMenuItem(Language.text("menu.edit.auto_format"),'T');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleAutoFormat();
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.edit.comment_uncomment"),'/');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleCommentUncomment();
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem("\u2192 " + Language.text("menu.edit.increase_indent"),']');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleIndentOutdent(true);
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem("\u2190 " + Language.text("menu.edit.decrease_indent"),'[');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      handleIndentOutdent(false);
    }
  }
);
  menu.add(item);
  menu.addSeparator();
  item=Toolkit.newJMenuItem(Language.text("menu.edit.find"),'F');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (find == null) {
        find=new FindReplace(Editor.this);
      }
      find.setVisible(true);
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.edit.find_next"),'G');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (find != null) {
        find.findNext();
      }
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItemShift(Language.text("menu.edit.find_previous"),'G');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (find != null) {
        find.findPrevious();
      }
    }
  }
);
  menu.add(item);
  item=Toolkit.newJMenuItem(Language.text("menu.edit.use_selection_for_find"),'E');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (find == null) {
        find=new FindReplace(Editor.this);
      }
      find.setFindText(getSelectedText());
    }
  }
);
  menu.add(item);
  menu.addMenuListener(new MenuListener(){
    @Override public void menuCanceled(    MenuEvent e){
      copyItems.setEnabled(true);
      cutItems.setEnabled(true);
    }
    @Override public void menuDeselected(    MenuEvent e){
      copyItems.setEnabled(true);
      cutItems.setEnabled(true);
    }
    @Override public void menuSelected(    MenuEvent e){
      copyAction.updateCopyState();
      cutAction.updateCutState();
    }
  }
);
  return menu;
}
