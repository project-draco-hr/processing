{
  JMenu menu=new JMenu("Edit");
  JMenuItem item;
  undoItem=newJMenuItem("Undo",'Z');
  undoItem.addActionListener(undoAction=new UndoAction());
  menu.add(undoItem);
  redoItem=newJMenuItem("Redo",'Y');
  redoItem.addActionListener(redoAction=new RedoAction());
  menu.add(redoItem);
  menu.addSeparator();
  item=newJMenuItem("Cut",'X');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textarea.cut();
      sketch.setModified(true);
    }
  }
);
  menu.add(item);
  item=newJMenuItem("Copy",'C');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textarea.copy();
    }
  }
);
  menu.add(item);
  item=newJMenuItem("Paste",'V');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textarea.paste();
      sketch.setModified(true);
    }
  }
);
  menu.add(item);
  item=newJMenuItem("Select All",'A');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      textarea.selectAll();
    }
  }
);
  menu.add(item);
  menu.addSeparator();
  item=newJMenuItem("Comment/Uncomment",'/');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      beginCompoundEdit();
      int startLine=textarea.getSelectionStartLine();
      int stopLine=textarea.getSelectionEndLine();
      int length=textarea.getDocumentLength();
      int pos=textarea.getLineStartOffset(startLine);
      if (pos + 2 > length)       return;
      String begin=textarea.getText(pos,2);
      boolean commented=begin.equals("//");
      for (int line=startLine; line <= stopLine; line++) {
        int location=textarea.getLineStartOffset(line);
        if (commented) {
          textarea.select(location,location + 2);
          if (textarea.getSelectedText().equals("//")) {
            textarea.setSelectedText("");
          }
        }
 else {
          textarea.select(location,location);
          textarea.setSelectedText("//");
        }
      }
      textarea.select(textarea.getLineStartOffset(startLine),textarea.getLineEndOffset(stopLine) - 1);
      endCompoundEdit();
    }
  }
);
  menu.add(item);
  menu.addSeparator();
  item=newJMenuItem("Find...",'F');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (find == null) {
        find=new FindReplace(Editor.this);
      }
      find.setVisible(true);
    }
  }
);
  menu.add(item);
  item=newJMenuItem("Find Next",'G');
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (find != null) {
        find.find(true);
      }
    }
  }
);
  menu.add(item);
  return menu;
}
