{
  HashMap toolItems=new HashMap();
  File[] folders=sourceFolder.listFiles(new FileFilter(){
    public boolean accept(    File folder){
      if (folder.isDirectory()) {
        File subfolder=new File(folder,"tool");
        return subfolder.exists();
      }
      return false;
    }
  }
);
  if (folders == null || folders.length == 0) {
    return;
  }
  for (int i=0; i < folders.length; i++) {
    File toolDirectory=new File(folders[i],"tool");
    try {
      File[] archives=toolDirectory.listFiles(new FilenameFilter(){
        public boolean accept(        File dir,        String name){
          return (name.toLowerCase().endsWith(".jar") || name.toLowerCase().endsWith(".zip"));
        }
      }
);
      URL[] urlList=new URL[archives.length];
      for (int j=0; j < urlList.length; j++) {
        urlList[j]=archives[j].toURL();
      }
      URLClassLoader loader=new URLClassLoader(urlList);
      String className=null;
      for (int j=0; j < archives.length; j++) {
        className=findClassInZipFile(folders[i].getName(),archives[j]);
        if (className != null)         break;
      }
      if (className == null)       continue;
      Class toolClass=Class.forName(className,true,loader);
      final Tool tool=(Tool)toolClass.newInstance();
      tool.init(Editor.this);
      String title=tool.getMenuTitle();
      JMenuItem item=new JMenuItem(title);
      item.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          SwingUtilities.invokeLater(tool);
        }
      }
);
      toolItems.put(title,item);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  ArrayList<String> toolList=new ArrayList(toolItems.keySet());
  if (toolList.size() == 0)   return;
  menu.addSeparator();
  Collections.sort(toolList);
  for (  String title : toolList) {
    menu.add((JMenuItem)toolItems.get(title));
  }
}
