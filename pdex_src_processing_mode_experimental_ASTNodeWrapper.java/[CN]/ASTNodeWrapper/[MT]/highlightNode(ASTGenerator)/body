{
  if (!(Node instanceof SimpleName)) {
    return false;
  }
  SimpleName nodeName=(SimpleName)Node;
  try {
    int javaLineNumber=getLineNumber(nodeName);
    int pdeOffs[]=astGenerator.errorCheckerService.calculateTabIndexAndLineNumber(javaLineNumber);
    PlainDocument javaSource=new PlainDocument();
    javaSource.insertString(0,astGenerator.errorCheckerService.sourceCode,null);
    Element lineElement=javaSource.getDefaultRootElement().getElement(javaLineNumber - 1);
    if (lineElement == null) {
      log(lineNumber + " line element null while highlighting " + nodeName);
      return false;
    }
    String javaLine=javaSource.getText(lineElement.getStartOffset(),lineElement.getEndOffset() - lineElement.getStartOffset());
    astGenerator.editor.getSketch().setCurrentCode(pdeOffs[0]);
    String pdeLine=astGenerator.editor.getLineText(pdeOffs[1]);
    String lookingFor=nodeName.toString();
    log(lookingFor + ", " + nodeName.getStartPosition());
    log(javaLineNumber + " JL " + javaLine+ " LSO "+ lineElement.getStartOffset()+ ","+ lineElement.getEndOffset());
    log(pdeOffs[1] + " PL " + pdeLine);
    if (!javaLine.contains(lookingFor) || !pdeLine.contains(lookingFor)) {
      logE("Logical error in highLightNode(). Please file a bug report.");
      return false;
    }
    Pattern toFind=Pattern.compile("\\b" + nodeName.toString() + "\\b");
    Matcher matcher=toFind.matcher(javaLine);
    int count=0, index=0;
    int lsto=lineElement.getStartOffset();
    while (matcher.find()) {
      count++;
      if (lsto + matcher.start() == nodeName.getStartPosition())       break;
    }
    log("count=" + count);
    index=0;
    matcher=toFind.matcher(pdeLine);
    while (matcher.find()) {
      count--;
      if (count == 0) {
        log("Found on pde line lso: " + matcher.start());
        index=matcher.end();
        break;
      }
    }
    log("pde lso " + (index - lookingFor.length()));
    int lso=astGenerator.editor.ta.getLineStartOffset(pdeOffs[1]);
    astGenerator.editor.setSelection(lso + index - lookingFor.length(),lso + index);
    return true;
  }
 catch (  BadLocationException e) {
    logE("BLE in highLightNode() for " + nodeName);
    e.printStackTrace();
  }
  return false;
}
