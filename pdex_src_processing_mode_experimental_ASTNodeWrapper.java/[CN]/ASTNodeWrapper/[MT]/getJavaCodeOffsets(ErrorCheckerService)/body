{
  int nodeOffset=Node.getStartPosition(), nodeLength=Node.getLength();
  ASTNode thisNode=Node;
  while (thisNode.getParent() != null) {
    if (getLineNumber(thisNode.getParent()) == lineNumber) {
      thisNode=thisNode.getParent();
    }
 else {
      break;
    }
  }
  int altStartPos=thisNode.getStartPosition();
  thisNode=thisNode.getParent();
  Iterator<StructuralPropertyDescriptor> it=thisNode.structuralPropertiesForType().iterator();
  boolean flag=true;
  while (it.hasNext()) {
    StructuralPropertyDescriptor prop=(StructuralPropertyDescriptor)it.next();
    if (prop.isChildListProperty()) {
      List<ASTNode> nodelist=(List<ASTNode>)thisNode.getStructuralProperty(prop);
      for (      ASTNode cnode : nodelist) {
        if (getLineNumber(cnode) == lineNumber) {
          if (flag) {
            altStartPos=cnode.getStartPosition();
            flag=false;
          }
 else {
            if (cnode == Node) {
              break;
            }
          }
        }
      }
    }
  }
  int pdeoffsets[]=getPDECodeOffsets(ecs);
  int x=normalizeOffsets(ecs.getPDECode(pdeoffsets[1] - 1),nodeOffset - altStartPos);
  int xlen=normalizeOffsets(Node.toString(),nodeLength);
  System.out.println("X=" + x + " xlen="+ xlen);
  return new int[]{lineNumber,altStartPos,nodeOffset + x,nodeLength + xlen};
}
