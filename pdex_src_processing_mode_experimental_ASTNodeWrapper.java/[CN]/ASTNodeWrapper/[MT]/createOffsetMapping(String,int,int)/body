{
  System.out.println("Src:" + source + "\ninpoff"+ inpOffset+ " nodelen "+ nodeLen);
  String sourceAlt=new String(source);
  int offset=0;
  TreeMap<Integer,Integer> offsetmap=new TreeMap<Integer,Integer>();
  String dataTypeFunc[]={"int","char","float","boolean","byte"};
  for (  String dataType : dataTypeFunc) {
    String dataTypeRegexp="\\b" + dataType + "\\s*\\(";
    Pattern pattern=Pattern.compile(dataTypeRegexp);
    Matcher matcher=pattern.matcher(sourceAlt);
    while (matcher.find()) {
      System.out.print("Start index: " + matcher.start());
      System.out.println(" End index: " + matcher.end() + " ");
      System.out.println("-->" + matcher.group() + "<--");
      offsetmap.put(matcher.end() + 1,("PApplet.parse").length());
    }
    matcher.reset();
    sourceAlt=matcher.replaceAll("PApplet.parse" + Character.toUpperCase(dataType.charAt(0)) + dataType.substring(1)+ "(");
  }
  final String webColorRegexp="#{1}[A-F|a-f|0-9]{6}\\W";
  Pattern webPattern=Pattern.compile(webColorRegexp);
  Matcher webMatcher=webPattern.matcher(sourceAlt);
  while (webMatcher.find()) {
    String found=sourceAlt.substring(webMatcher.start(),webMatcher.end());
    offsetmap.put(webMatcher.end() - 1,3);
    sourceAlt=webMatcher.replaceFirst("0xff" + found.substring(1));
    webMatcher=webPattern.matcher(sourceAlt);
  }
  final String colorTypeRegex="color(?![a-zA-Z0-9_])(?=\\[*)(?!(\\s*\\())";
  Pattern colorPattern=Pattern.compile(colorTypeRegex);
  Matcher colorMatcher=colorPattern.matcher(sourceAlt);
  while (colorMatcher.find()) {
    System.out.print("Start index: " + colorMatcher.start());
    System.out.println(" End index: " + colorMatcher.end() + " ");
    System.out.println("-->" + colorMatcher.group() + "<--");
    offsetmap.put(colorMatcher.end() - 1,-2);
  }
  colorMatcher.reset();
  sourceAlt=colorMatcher.replaceAll("int");
  System.out.println(sourceAlt);
  int javaCodeMap[]=new int[source.length() * 2];
  int pdeeCodeMap[]=new int[source.length() * 2];
  int pi=1, pj=1;
  for (  Integer key : offsetmap.keySet()) {
    for (; pi < key; pi++) {
      javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
    }
    for (; pj < key; pj++) {
      pdeeCodeMap[pj]=pdeeCodeMap[pj - 1] + 1;
    }
    System.out.println(key + ":" + offsetmap.get(key));
    int kval=offsetmap.get(key);
    if (kval > 0) {
      pi--;
      pj-=2;
      for (int i=0; i < kval; i++, pi++, pj++) {
        javaCodeMap[pi]=javaCodeMap[pi - 1];
        pdeeCodeMap[pj]=pdeeCodeMap[pj - 1] + 1;
      }
    }
 else {
      pi--;
      pj--;
      for (int i=0; i < -kval; i++, pi++, pj++) {
        javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
        pdeeCodeMap[pj]=pdeeCodeMap[pj - 1];
      }
    }
  }
  javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
  pdeeCodeMap[pj]=pdeeCodeMap[pj - 1] + 1;
  while (pi < sourceAlt.length()) {
    javaCodeMap[pi]=javaCodeMap[pi - 1] + 1;
    pi++;
  }
  while (pj < source.length()) {
    pdeeCodeMap[pj]=pdeeCodeMap[pj - 1] + 1;
    pj++;
  }
  for (int i=0; i < pdeeCodeMap.length; i++) {
    if (pdeeCodeMap[i] > 0 || javaCodeMap[i] > 0 || i == 0) {
      if (i < source.length())       System.out.print(source.charAt(i));
      System.out.print(pdeeCodeMap[i] + " - " + javaCodeMap[i]+ " <-["+ i+ "]");
      if (i < sourceAlt.length())       System.out.print(sourceAlt.charAt(i));
      System.out.println();
    }
  }
  System.out.println();
  pj=0;
  pi=0;
  int count=0;
  pj=inpOffset;
  int startIndex=javaCodeMap[pj];
  while (pdeeCodeMap[pi] != startIndex && pi < pdeeCodeMap.length)   pi++;
  int startoffDif=pi - pj;
  int stopindex=javaCodeMap[pj + nodeLen];
  System.out.println(startIndex + "SI,St" + stopindex+ "sod "+ startoffDif);
  while (pdeeCodeMap[pi] < stopindex && pi < pdeeCodeMap.length) {
    pi++;
    count++;
  }
  System.out.println("pde len " + count);
  return new int[]{startoffDif,count};
}
