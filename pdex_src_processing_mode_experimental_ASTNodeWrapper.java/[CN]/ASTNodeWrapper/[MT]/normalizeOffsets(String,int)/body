{
  System.out.println("Src: " + source);
  String sourceAlt=new String(source);
  int offset=0;
  TreeMap<Integer,Integer> offsetmap=new TreeMap<Integer,Integer>();
  String dataTypeFunc[]={"int","char","float","boolean","byte"};
  for (  String dataType : dataTypeFunc) {
    String dataTypeRegexp="\\b" + dataType + "\\s*\\(";
    Pattern pattern=Pattern.compile(dataTypeRegexp);
    Matcher matcher=pattern.matcher(sourceAlt);
    while (matcher.find()) {
      System.out.print("Start index: " + matcher.start());
      System.out.println(" End index: " + matcher.end() + " ");
      System.out.println("-->" + matcher.group() + "<--");
      offsetmap.put(matcher.end(),("PApplet.parse").length());
    }
    matcher.reset();
    sourceAlt=matcher.replaceAll("PApplet.parse" + Character.toUpperCase(dataType.charAt(0)) + dataType.substring(1)+ "(");
  }
  final String webColorRegexp="#{1}[A-F|a-f|0-9]{6}\\W";
  Pattern webPattern=Pattern.compile(webColorRegexp);
  Matcher webMatcher=webPattern.matcher(sourceAlt);
  while (webMatcher.find()) {
    String found=sourceAlt.substring(webMatcher.start(),webMatcher.end());
    sourceAlt=webMatcher.replaceFirst("0xff" + found.substring(1));
    webMatcher=webPattern.matcher(sourceAlt);
    offsetmap.put(webMatcher.end(),3);
  }
  final String colorTypeRegex="color(?![a-zA-Z0-9_])(?=\\[*)(?!(\\s*\\())";
  Pattern colorPattern=Pattern.compile(colorTypeRegex);
  Matcher colorMatcher=colorPattern.matcher(sourceAlt);
  sourceAlt=colorMatcher.replaceAll("int");
  while (colorMatcher.find()) {
    System.out.print("Start index: " + colorMatcher.start());
    System.out.println(" End index: " + colorMatcher.end() + " ");
    System.out.println("-->" + colorMatcher.group() + "<--");
    offsetmap.put(colorMatcher.end(),-2);
  }
  colorMatcher.reset();
  sourceAlt=colorMatcher.replaceAll("int");
  for (  Integer key : offsetmap.keySet()) {
    if (key < inpOffset) {
      offset-=offsetmap.get(key);
    }
 else {
      break;
    }
    System.out.println(key + ":" + offsetmap.get(key));
  }
  System.out.println(source);
  System.out.println(sourceAlt);
  return offset;
}
