{
  this.base=base;
  dialog=new JFrame(Language.text("preferences"));
  dialog.setResizable(false);
  Container pain=dialog.getContentPane();
  layout=new GroupLayout(pain);
  layout.setAutoCreateContainerGaps(true);
  pain.setLayout(layout);
  JLabel sketchbookLocationLabel, restartProcessingLabel;
  JButton browseButton;
  sketchbookLocationLabel=new JLabel(Language.text("preferences.sketchbook_location") + ":");
  sketchbookLocationField=new JTextField(40);
  browseButton=new JButton(Preferences.PROMPT_BROWSE);
  browseButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      File dflt=new File(sketchbookLocationField.getText());
      PApplet.selectFolder(Language.text("preferences.sketchbook_location.popup"),"sketchbookCallback",dflt,PreferencesFrame.this,dialog);
    }
  }
);
  JLabel languageLabel=new JLabel(Language.text("preferences.language") + ": ");
  languageSelectionBox=new JComboBox<String>();
  Map<String,String> languages=Language.getLanguages();
  String[] languageSelection=new String[languages.size()];
  languageSelection[0]=languages.get(Language.getLanguage());
  int i=1;
  for (  Map.Entry<String,String> lang : languages.entrySet()) {
    if (!lang.getKey().equals(Language.getLanguage())) {
      languageSelection[i++]=lang.getValue();
    }
  }
  languageSelectionBox.setModel(new DefaultComboBoxModel<String>(languageSelection));
  restartProcessingLabel=new JLabel(" (" + Language.text("preferences.requires_restart") + ")");
  JLabel fontLabel=new JLabel(Language.text("preferences.editor_and_console_font") + ": ");
  final String fontTip="<html>" + Language.text("preferences.editor_and_console_font.tip");
  fontLabel.setToolTipText(fontTip);
  fontSelectionBox=new JComboBox<String>(new String[]{Toolkit.getMonoFontName()});
  fontSelectionBox.setToolTipText(fontTip);
  fontSelectionBox.setEnabled(false);
  JLabel fontSizelabel=new JLabel(Language.text("preferences.editor_font_size") + ": ");
  fontSizeField=new JComboBox<Integer>(FONT_SIZES);
  fontSizeField.setEditable(true);
  JLabel consoleFontSizeLabel=new JLabel(Language.text("preferences.console_font_size") + ": ");
  consoleFontSizeField=new JComboBox<Integer>(FONT_SIZES);
  consoleFontSizeField.setEditable(true);
  fontSizeField.setSelectedItem(Preferences.getFont("editor.font.size"));
  JLabel backgroundColorLabel=new JLabel(Language.text("preferences.background_color") + ": ");
  final String colorTip="<html>" + Language.text("preferences.background_color.tip");
  backgroundColorLabel.setToolTipText(colorTip);
  presentColor=new JTextField("      ");
  presentColor.setOpaque(true);
  presentColor.setEnabled(false);
  presentColor.setBorder(new CompoundBorder(BorderFactory.createMatteBorder(1,1,0,0,new Color(195,195,195)),BorderFactory.createMatteBorder(0,0,1,1,new Color(54,54,54))));
  presentColor.setBackground(Preferences.getColor("run.present.bgcolor"));
  presentColorHex=new JTextField(6);
  presentColorHex.setText(Preferences.get("run.present.bgcolor").substring(1));
  presentColorHex.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void removeUpdate(    DocumentEvent e){
      final String colorValue=presentColorHex.getText().toUpperCase();
      if (colorValue.length() == 7 && (colorValue.startsWith("#")))       EventQueue.invokeLater(new Runnable(){
        public void run(){
          presentColorHex.setText(colorValue.substring(1));
        }
      }
);
      if (colorValue.length() == 6 && colorValue.matches("[0123456789ABCDEF]*")) {
        presentColor.setBackground(new Color(Integer.parseInt(colorValue.substring(0,2),16),Integer.parseInt(colorValue.substring(2,4),16),Integer.parseInt(colorValue.substring(4,6),16)));
        if (!colorValue.equals(presentColorHex.getText()))         EventQueue.invokeLater(new Runnable(){
          public void run(){
            presentColorHex.setText(colorValue);
          }
        }
);
      }
    }
    @Override public void insertUpdate(    DocumentEvent e){
      final String colorValue=presentColorHex.getText().toUpperCase();
      if (colorValue.length() == 7 && (colorValue.startsWith("#")))       EventQueue.invokeLater(new Runnable(){
        public void run(){
          presentColorHex.setText(colorValue.substring(1));
        }
      }
);
      if (colorValue.length() == 6 && colorValue.matches("[0123456789ABCDEF]*")) {
        presentColor.setBackground(new Color(Integer.parseInt(colorValue.substring(0,2),16),Integer.parseInt(colorValue.substring(2,4),16),Integer.parseInt(colorValue.substring(4,6),16)));
        if (!colorValue.equals(presentColorHex.getText()))         EventQueue.invokeLater(new Runnable(){
          public void run(){
            presentColorHex.setText(colorValue);
          }
        }
);
      }
    }
    @Override public void changedUpdate(    DocumentEvent e){
    }
  }
);
  selector=new ColorChooser(dialog,false,Preferences.getColor("run.present.bgcolor"),Language.text("prompt.ok"),new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String colorValue=selector.getHexColor();
      presentColorHex.setText(colorValue.substring(1));
      presentColor.setBackground(new Color(Integer.parseInt(colorValue.substring(1,3),16),Integer.parseInt(colorValue.substring(3,5),16),Integer.parseInt(colorValue.substring(5,7),16)));
      selector.hide();
    }
  }
);
  presentColor.addMouseListener(new MouseAdapter(){
    @Override public void mouseExited(    MouseEvent e){
      dialog.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    @Override public void mouseEntered(    MouseEvent e){
      dialog.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
    @Override public void mouseClicked(    MouseEvent e){
      selector.show();
    }
  }
);
  JLabel hashLabel=new JLabel("#");
  editorAntialiasBox=new JCheckBox(Language.text("preferences.use_smooth_text"));
  inputMethodBox=new JCheckBox(Language.text("preferences.enable_complex_text_input") + " (" + Language.text("preferences.enable_complex_text_input_example")+ ", "+ Language.text("preferences.requires_restart")+ ")");
  errorCheckerBox=new JCheckBox(Language.text("preferences.continuously_check"));
  warningsCheckerBox=new JCheckBox(Language.text("preferences.show_warnings"));
  codeCompletionBox=new JCheckBox(Language.text("preferences.code_completion") + " Ctrl-" + Language.text("preferences.cmd_space"));
  importSuggestionsBox=new JCheckBox(Language.text("preferences.suggest_imports"));
  memoryOverrideBox=new JCheckBox(Language.text("preferences.increase_max_memory") + ": ");
  memoryField=new JTextField(4);
  memoryOverrideBox.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      memoryField.setEnabled(memoryOverrideBox.isSelected());
    }
  }
);
  deletePreviousBox=new JCheckBox(Language.text("preferences.delete_previous_folder_on_export"));
  whinyBox=new JCheckBox(Language.text("preferences.hide_toolbar_background_image") + " (" + Language.text("preferences.requires_restart")+ ")");
  checkUpdatesBox=new JCheckBox(Language.text("preferences.check_for_updates_on_startup"));
  JLabel displayLabel=new JLabel(Language.text("preferences.run_sketches_on_display") + ": ");
  final String tip="<html>" + Language.text("preferences.run_sketches_on_display.tip");
  displayLabel.setToolTipText(tip);
  displaySelectionBox=new JComboBox<String>();
  updateDisplayList();
  autoAssociateBox=new JCheckBox(Language.text("preferences.automatically_associate_pde_files"));
  autoAssociateBox.setVisible(false);
  JLabel morePreferenceLabel=new JLabel(Language.text("preferences.file") + ":");
  morePreferenceLabel.setForeground(Color.gray);
  JLabel preferencePathLabel=new JLabel(Preferences.getPreferencesPath());
  final JLabel clickable=preferencePathLabel;
  preferencePathLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      Base.openFolder(Base.getSettingsFolder());
    }
    public void mouseEntered(    MouseEvent e){
      clickable.setForeground(new Color(0,0,140));
    }
    public void mouseExited(    MouseEvent e){
      clickable.setForeground(Color.BLACK);
    }
  }
);
  JLabel preferenceHintLabel=new JLabel("(" + Language.text("preferences.file.hint") + ")");
  preferenceHintLabel.setForeground(Color.gray);
  JButton okButton=new JButton(Preferences.PROMPT_OK);
  okButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      applyFrame();
      disposeFrame();
    }
  }
);
  JButton cancelButton=new JButton(Preferences.PROMPT_CANCEL);
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      disposeFrame();
    }
  }
);
  layout.setHorizontalGroup(layout.createParallelGroup().addComponent(sketchbookLocationLabel).addGroup(layout.createSequentialGroup().addComponent(sketchbookLocationField).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(browseButton)).addGroup(layout.createSequentialGroup().addComponent(languageLabel).addComponent(languageSelectionBox,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(restartProcessingLabel)).addGroup(layout.createSequentialGroup().addComponent(fontLabel).addComponent(fontSelectionBox,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup().addComponent(fontSizelabel).addComponent(fontSizeField,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(consoleFontSizeLabel).addComponent(consoleFontSizeField,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup().addComponent(backgroundColorLabel).addComponent(hashLabel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(presentColorHex,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(presentColor,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addComponent(editorAntialiasBox).addComponent(inputMethodBox).addComponent(errorCheckerBox).addComponent(warningsCheckerBox).addComponent(codeCompletionBox).addComponent(importSuggestionsBox).addGroup(layout.createSequentialGroup().addComponent(memoryOverrideBox).addComponent(memoryField,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addComponent(deletePreviousBox).addComponent(whinyBox).addComponent(checkUpdatesBox).addGroup(layout.createSequentialGroup().addComponent(displayLabel).addComponent(displaySelectionBox,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addComponent(autoAssociateBox).addComponent(morePreferenceLabel).addGroup(layout.createSequentialGroup().addComponent(preferencePathLabel).addGap(0,100,200).addComponent(okButton,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(cancelButton,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addComponent(preferenceHintLabel));
  layout.linkSize(okButton,cancelButton);
  layout.setVerticalGroup(layout.createSequentialGroup().addComponent(sketchbookLocationLabel).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup().addComponent(sketchbookLocationField).addComponent(browseButton)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(languageLabel).addComponent(languageSelectionBox).addComponent(restartProcessingLabel)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(fontLabel).addComponent(fontSelectionBox)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(fontSizelabel).addComponent(fontSizeField).addComponent(consoleFontSizeLabel).addComponent(consoleFontSizeField)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(backgroundColorLabel).addComponent(hashLabel).addComponent(presentColorHex).addComponent(presentColor)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(editorAntialiasBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(inputMethodBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(errorCheckerBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(warningsCheckerBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(codeCompletionBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(importSuggestionsBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup().addComponent(memoryOverrideBox).addComponent(memoryField)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(deletePreviousBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(whinyBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(checkUpdatesBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(displayLabel).addComponent(displaySelectionBox)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(autoAssociateBox).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(morePreferenceLabel).addComponent(preferencePathLabel).addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(preferenceHintLabel).addComponent(okButton).addComponent(cancelButton)).addContainerGap());
  dialog.getRootPane().setDefaultButton(okButton);
  if (Base.isWindows()) {
    autoAssociateBox.setVisible(true);
  }
  dialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      disposeFrame();
    }
  }
);
  ActionListener disposer=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      disposeFrame();
    }
  }
;
  Toolkit.registerWindowCloseKeys(dialog.getRootPane(),disposer);
  Toolkit.setIcon(dialog);
  Dimension screen=Toolkit.getScreenSize();
  high=(int)layout.preferredLayoutSize(dialog.getContentPane()).getHeight();
  wide=(int)layout.preferredLayoutSize(dialog.getContentPane()).getWidth();
  dialog.setLocation((screen.width - wide) / 2,(screen.height - high) / 2);
  dialog.pack();
  dialog.setSize(wide,high);
  pain.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      KeyStroke wc=Toolkit.WINDOW_CLOSE_KEYSTROKE;
      if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) || (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
        disposeFrame();
      }
    }
  }
);
}
