{
  setFocusTraversalKeysEnabled(false);
  finished=false;
  looping=true;
  redraw=true;
  firstMouse=true;
  pauseMethods=new RegisteredMethods();
  resumeMethods=new RegisteredMethods();
  preMethods=new RegisteredMethods();
  drawMethods=new RegisteredMethods();
  postMethods=new RegisteredMethods();
  mouseEventMethods=new RegisteredMethods();
  keyEventMethods=new RegisteredMethods();
  disposeMethods=new RegisteredMethods();
  try {
    getAppletContext();
    appletViewer=true;
  }
 catch (  NullPointerException e) {
    appletViewer=false;
  }
  try {
    if (sketchPath == null) {
      sketchPath=System.getProperty("user.dir");
    }
  }
 catch (  Exception e) {
  }
  Dimension size=getSize();
  if ((size.width != 0) && (size.height != 0)) {
    g=makeGraphics(size.width,size.height,sketchRenderer(),null,true);
  }
 else {
    this.defaultSize=true;
    int w=sketchWidth();
    int h=sketchHeight();
    g=makeGraphics(w,h,sketchRenderer(),null,true);
    setSize(w,h);
    setPreferredSize(new Dimension(w,h));
  }
  width=g.width;
  height=g.height;
  addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      Component c=e.getComponent();
      Rectangle bounds=c.getBounds();
      resizeRequest=true;
      resizeWidth=bounds.width;
      resizeHeight=bounds.height;
      if (!looping) {
        redraw();
      }
    }
  }
);
  thread=new Thread(this,"Animation Thread");
  thread.start();
}
