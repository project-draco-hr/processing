{
  long beforeTime=System.nanoTime();
  long overSleepTime=0L;
  int noDelays=0;
  final int NO_DELAYS_PER_YIELD=15;
  while ((Thread.currentThread() == thread) && !finished) {
    while (paused) {
      try {
        Thread.sleep(100L);
      }
 catch (      InterruptedException e) {
      }
    }
    if (resizeRequest) {
      resizeRenderer(resizeWidth,resizeHeight);
      resizeRequest=false;
    }
    if (g != null)     g.requestDraw();
    if (frameCount == 1) {
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          requestFocusInWindow();
        }
      }
);
    }
    long afterTime=System.nanoTime();
    long timeDiff=afterTime - beforeTime;
    long sleepTime=(frameRatePeriod - timeDiff) - overSleepTime;
    if (sleepTime > 0) {
      try {
        Thread.sleep(sleepTime / 1000000L,(int)(sleepTime % 1000000L));
        noDelays=0;
      }
 catch (      InterruptedException ex) {
      }
      overSleepTime=(System.nanoTime() - afterTime) - sleepTime;
    }
 else {
      overSleepTime=0L;
      if (noDelays > NO_DELAYS_PER_YIELD) {
        Thread.yield();
        noDelays=0;
      }
    }
    beforeTime=System.nanoTime();
  }
  dispose();
  if (exitCalled) {
    exitActual();
  }
}
