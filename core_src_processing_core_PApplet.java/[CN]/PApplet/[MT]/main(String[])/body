{
  if (platform == MACOSX) {
    System.setProperty("apple.awt.graphics.UseQuartz","true");
  }
  if (platform == WINDOWS) {
    System.out.println("setting the property now");
    System.setProperty("sun.java2d.d3d","false");
  }
 else {
    System.out.println("not setting");
  }
  if (args.length < 1) {
    System.err.println("Usage: PApplet <appletname>");
    System.err.println("For additional options, " + "see the Javadoc for PApplet");
    System.exit(1);
  }
  try {
    boolean external=false;
    int location[]=null;
    int editorLocation[]=null;
    String name=null;
    boolean present=false;
    Color backgroundColor=Color.black;
    Color stopColor=Color.gray;
    GraphicsDevice displayDevice=null;
    boolean hideStop=false;
    String param=null, value=null;
    String folder=null;
    try {
      folder=System.getProperty("user.dir");
    }
 catch (    Exception e) {
    }
    int argIndex=0;
    while (argIndex < args.length) {
      int equals=args[argIndex].indexOf('=');
      if (equals != -1) {
        param=args[argIndex].substring(0,equals);
        value=args[argIndex].substring(equals + 1);
        if (param.equals(ARGS_EDITOR_LOCATION)) {
          external=true;
          editorLocation=parseInt(split(value,','));
        }
 else         if (param.equals(ARGS_DISPLAY)) {
          int deviceIndex=Integer.parseInt(value) - 1;
          GraphicsEnvironment environment=GraphicsEnvironment.getLocalGraphicsEnvironment();
          GraphicsDevice devices[]=environment.getScreenDevices();
          if ((deviceIndex >= 0) && (deviceIndex < devices.length)) {
            displayDevice=devices[deviceIndex];
          }
 else {
            System.err.println("Display " + value + " does not exist, "+ "using the default display instead.");
          }
        }
 else         if (param.equals(ARGS_BGCOLOR)) {
          if (value.charAt(0) == '#')           value=value.substring(1);
          backgroundColor=new Color(Integer.parseInt(value,16));
        }
 else         if (param.equals(ARGS_STOP_COLOR)) {
          if (value.charAt(0) == '#')           value=value.substring(1);
          stopColor=new Color(Integer.parseInt(value,16));
        }
 else         if (param.equals(ARGS_SKETCH_FOLDER)) {
          folder=value;
        }
 else         if (param.equals(ARGS_LOCATION)) {
          location=parseInt(split(value,','));
        }
      }
 else {
        if (args[argIndex].equals(ARGS_PRESENT)) {
          present=true;
        }
 else         if (args[argIndex].equals(ARGS_HIDE_STOP)) {
          hideStop=true;
        }
 else         if (args[argIndex].equals(ARGS_EXTERNAL)) {
          external=true;
        }
 else {
          name=args[argIndex];
          break;
        }
      }
      argIndex++;
    }
    if (displayDevice == null) {
      GraphicsEnvironment environment=GraphicsEnvironment.getLocalGraphicsEnvironment();
      displayDevice=environment.getDefaultScreenDevice();
    }
    Frame frame=new Frame(displayDevice.getDefaultConfiguration());
    frame.setResizable(false);
    Image image=Toolkit.getDefaultToolkit().createImage(ICON_IMAGE);
    frame.setIconImage(image);
    frame.setTitle(name);
    Class<?> c=Thread.currentThread().getContextClassLoader().loadClass(name);
    PApplet applet=(PApplet)c.newInstance();
    applet.frame=frame;
    applet.sketchPath=folder;
    applet.args=PApplet.subset(args,1);
    applet.external=external;
    Rectangle fullScreenRect=null;
    if (present) {
      frame.setUndecorated(true);
      frame.setBackground(backgroundColor);
      displayDevice.setFullScreenWindow(frame);
      fullScreenRect=frame.getBounds();
    }
    frame.setLayout(null);
    frame.add(applet);
    frame.pack();
    applet.init();
    while (applet.defaultSize && !applet.finished) {
      try {
        Thread.sleep(5);
      }
 catch (      InterruptedException e) {
      }
    }
    if (present) {
      frame.setBounds(fullScreenRect);
      applet.setBounds((fullScreenRect.width - applet.width) / 2,(fullScreenRect.height - applet.height) / 2,applet.width,applet.height);
      if (!hideStop) {
        Label label=new Label("stop");
        label.setForeground(stopColor);
        label.addMouseListener(new MouseAdapter(){
          public void mousePressed(          MouseEvent e){
            System.exit(0);
          }
        }
);
        frame.add(label);
        Dimension labelSize=label.getPreferredSize();
        labelSize=new Dimension(100,labelSize.height);
        label.setSize(labelSize);
        label.setLocation(20,fullScreenRect.height - labelSize.height - 20);
      }
      if (external) {
        applet.setupExternalMessages();
      }
    }
 else {
      Insets insets=frame.getInsets();
      int windowW=Math.max(applet.width,MIN_WINDOW_WIDTH) + insets.left + insets.right;
      int windowH=Math.max(applet.height,MIN_WINDOW_HEIGHT) + insets.top + insets.bottom;
      frame.setSize(windowW,windowH);
      if (location != null) {
        frame.setLocation(location[0],location[1]);
      }
 else       if (external) {
        int locationX=editorLocation[0] - 20;
        int locationY=editorLocation[1];
        if (locationX - windowW > 10) {
          frame.setLocation(locationX - windowW,locationY);
        }
 else {
          locationX=editorLocation[0] + 66;
          locationY=editorLocation[1] + 66;
          if ((locationX + windowW > applet.screen.width - 33) || (locationY + windowH > applet.screen.height - 33)) {
            locationX=(applet.screen.width - windowW) / 2;
            locationY=(applet.screen.height - windowH) / 2;
          }
          frame.setLocation(locationX,locationY);
        }
      }
 else {
        frame.setLocation((applet.screen.width - applet.width) / 2,(applet.screen.height - applet.height) / 2);
      }
      if (backgroundColor == Color.black) {
        backgroundColor=SystemColor.control;
      }
      frame.setBackground(backgroundColor);
      int usableWindowH=windowH - insets.top - insets.bottom;
      applet.setBounds((windowW - applet.width) / 2,insets.top + (usableWindowH - applet.height) / 2,applet.width,applet.height);
      if (external) {
        applet.setupExternalMessages();
      }
 else {
        frame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent e){
            System.exit(0);
          }
        }
);
      }
      applet.setupFrameResizeListener();
      if (applet.displayable()) {
        frame.setVisible(true);
      }
    }
    applet.requestFocus();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}
