{
  if (platform == MACOSX) {
    System.setProperty("apple.awt.graphics.UseQuartz",String.valueOf(useQuartz));
  }
  System.setProperty("sun.awt.noerasebackground","true");
  if (args.length < 1) {
    System.err.println("Usage: PApplet <appletname>");
    System.err.println("For additional options, " + "see the Javadoc for PApplet");
    System.exit(1);
  }
  boolean external=false;
  int[] location=null;
  int[] editorLocation=null;
  String name=null;
  boolean present=false;
  Color backgroundColor=null;
  Color stopColor=Color.GRAY;
  GraphicsDevice displayDevice=null;
  boolean hideStop=false;
  String param=null, value=null;
  String folder=null;
  try {
    folder=System.getProperty("user.dir");
  }
 catch (  Exception e) {
  }
  int argIndex=0;
  while (argIndex < args.length) {
    int equals=args[argIndex].indexOf('=');
    if (equals != -1) {
      param=args[argIndex].substring(0,equals);
      value=args[argIndex].substring(equals + 1);
      if (param.equals(ARGS_EDITOR_LOCATION)) {
        external=true;
        editorLocation=parseInt(split(value,','));
      }
 else       if (param.equals(ARGS_DISPLAY)) {
        int deviceIndex=Integer.parseInt(value);
        GraphicsEnvironment environment=GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice devices[]=environment.getScreenDevices();
        if ((deviceIndex >= 0) && (deviceIndex < devices.length)) {
          displayDevice=devices[deviceIndex];
        }
 else {
          System.err.println("Display " + value + " does not exist, "+ "using the default display instead.");
          for (int i=0; i < devices.length; i++) {
            System.err.println(i + " is " + devices[i]);
          }
        }
      }
 else       if (param.equals(ARGS_BGCOLOR)) {
        if (value.charAt(0) == '#')         value=value.substring(1);
        backgroundColor=new Color(Integer.parseInt(value,16));
      }
 else       if (param.equals(ARGS_STOP_COLOR)) {
        if (value.charAt(0) == '#')         value=value.substring(1);
        stopColor=new Color(Integer.parseInt(value,16));
      }
 else       if (param.equals(ARGS_SKETCH_FOLDER)) {
        folder=value;
      }
 else       if (param.equals(ARGS_LOCATION)) {
        location=parseInt(split(value,','));
      }
    }
 else {
      if (args[argIndex].equals(ARGS_PRESENT)) {
        present=true;
      }
 else       if (args[argIndex].equals(ARGS_FULL_SCREEN)) {
        present=true;
      }
 else       if (args[argIndex].equals(ARGS_HIDE_STOP)) {
        hideStop=true;
      }
 else       if (args[argIndex].equals(ARGS_EXTERNAL)) {
        external=true;
      }
 else {
        name=args[argIndex];
        break;
      }
    }
    argIndex++;
  }
  if (displayDevice == null) {
    GraphicsEnvironment environment=GraphicsEnvironment.getLocalGraphicsEnvironment();
    displayDevice=environment.getDefaultScreenDevice();
  }
  Frame frame=new Frame(displayDevice.getDefaultConfiguration());
  Image image=Toolkit.getDefaultToolkit().createImage(ICON_IMAGE);
  frame.setIconImage(image);
  frame.setTitle(name);
  final PApplet applet;
  if (constructedApplet != null) {
    applet=constructedApplet;
  }
 else {
    try {
      Class<?> c=Thread.currentThread().getContextClassLoader().loadClass(name);
      applet=(PApplet)c.newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  applet.frame=frame;
  applet.sketchPath=folder;
  present|=applet.sketchFullScreen();
  applet.args=PApplet.subset(args,argIndex + 1);
  applet.external=external;
  Rectangle screenRect=displayDevice.getDefaultConfiguration().getBounds();
  if (screenRect.width == applet.sketchWidth() && screenRect.height == applet.sketchHeight()) {
    present=true;
  }
  if (present) {
    if (platform == MACOSX) {
      japplemenubar.JAppleMenuBar.hide();
    }
    frame.setUndecorated(true);
    if (backgroundColor != null) {
      frame.setBackground(backgroundColor);
    }
    frame.setBounds(screenRect);
    frame.setVisible(true);
  }
  frame.setLayout(null);
  frame.add(applet);
  if (present) {
    frame.invalidate();
  }
 else {
    frame.pack();
  }
  frame.setResizable(false);
  applet.init();
  while (applet.defaultSize && !applet.finished) {
    try {
      Thread.sleep(5);
    }
 catch (    InterruptedException e) {
    }
  }
  if (present) {
    frame.setBounds(screenRect);
    applet.setBounds((screenRect.width - applet.width) / 2,(screenRect.height - applet.height) / 2,applet.width,applet.height);
    if (!hideStop) {
      Label label=new Label("stop");
      label.setForeground(stopColor);
      label.addMouseListener(new MouseAdapter(){
        @Override public void mousePressed(        java.awt.event.MouseEvent e){
          System.exit(0);
        }
      }
);
      frame.add(label);
      Dimension labelSize=label.getPreferredSize();
      labelSize=new Dimension(100,labelSize.height);
      label.setSize(labelSize);
      label.setLocation(20,screenRect.height - labelSize.height - 20);
    }
    if (external) {
      applet.setupExternalMessages();
    }
  }
 else {
    Insets insets=frame.getInsets();
    int windowW=Math.max(applet.width,MIN_WINDOW_WIDTH) + insets.left + insets.right;
    int windowH=Math.max(applet.height,MIN_WINDOW_HEIGHT) + insets.top + insets.bottom;
    frame.setSize(windowW,windowH);
    if (location != null) {
      frame.setLocation(location[0],location[1]);
    }
 else     if (external && editorLocation != null) {
      int locationX=editorLocation[0] - 20;
      int locationY=editorLocation[1];
      if (locationX - windowW > 10) {
        frame.setLocation(locationX - windowW,locationY);
      }
 else {
        locationX=editorLocation[0] + 66;
        locationY=editorLocation[1] + 66;
        if ((locationX + windowW > applet.displayWidth - 33) || (locationY + windowH > applet.displayHeight - 33)) {
          locationX=(applet.displayWidth - windowW) / 2;
          locationY=(applet.displayHeight - windowH) / 2;
        }
        frame.setLocation(locationX,locationY);
      }
    }
 else {
      frame.setLocation(screenRect.x + (screenRect.width - applet.width) / 2,screenRect.y + (screenRect.height - applet.height) / 2);
    }
    Point frameLoc=frame.getLocation();
    if (frameLoc.y < 0) {
      frame.setLocation(frameLoc.x,30);
    }
    if (backgroundColor != null) {
      frame.setBackground(backgroundColor);
    }
    int usableWindowH=windowH - insets.top - insets.bottom;
    applet.setBounds((windowW - applet.width) / 2,insets.top + (usableWindowH - applet.height) / 2,applet.width,applet.height);
    if (external) {
      applet.setupExternalMessages();
    }
 else {
      frame.addWindowListener(new WindowAdapter(){
        @Override public void windowClosing(        java.awt.event.WindowEvent e){
          System.exit(0);
        }
      }
);
    }
    applet.setupFrameResizeListener();
    if (applet.displayable()) {
      frame.setVisible(true);
    }
  }
}
