{
  System.setProperty("sun.awt.noerasebackground","true");
  System.setProperty("javafx.animation.fullspeed","true");
  try {
    Toolkit.getDefaultToolkit().setDynamicLayout(true);
  }
 catch (  HeadlessException e) {
    System.err.println("Cannot run sketch without a display. Read this for possible solutions:");
    System.err.println("https://github.com/processing/processing/wiki/Running-without-a-Display");
    System.exit(1);
  }
  System.setProperty("java.net.useSystemProxies","true");
  if (args.length < 1) {
    System.err.println("Usage: PApplet [options] <class name> [sketch args]");
    System.err.println("See the Javadoc for PApplet for an explanation.");
    System.exit(1);
  }
  boolean external=false;
  int[] location=null;
  int[] editorLocation=null;
  String name=null;
  int windowColor=0;
  int stopColor=0xff808080;
  boolean hideStop=false;
  int displayNum=-1;
  boolean present=false;
  String param=null, value=null;
  String folder=calcSketchPath();
  int argIndex=0;
  while (argIndex < args.length) {
    int equals=args[argIndex].indexOf('=');
    if (equals != -1) {
      param=args[argIndex].substring(0,equals);
      value=args[argIndex].substring(equals + 1);
      if (param.equals(ARGS_EDITOR_LOCATION)) {
        external=true;
        editorLocation=parseInt(split(value,','));
      }
 else       if (param.equals(ARGS_DISPLAY)) {
        displayNum=parseInt(value,-1);
        if (displayNum == -1) {
          System.err.println("Could not parse " + value + " for "+ ARGS_DISPLAY);
        }
      }
 else       if (param.equals(ARGS_WINDOW_COLOR)) {
        if (value.charAt(0) == '#' && value.length() == 7) {
          value=value.substring(1);
          windowColor=0xff000000 | Integer.parseInt(value,16);
        }
 else {
          System.err.println(ARGS_WINDOW_COLOR + " should be a # followed by six digits");
        }
      }
 else       if (param.equals(ARGS_STOP_COLOR)) {
        if (value.charAt(0) == '#' && value.length() == 7) {
          value=value.substring(1);
          stopColor=0xff000000 | Integer.parseInt(value,16);
        }
 else {
          System.err.println(ARGS_STOP_COLOR + " should be a # followed by six digits");
        }
      }
 else       if (param.equals(ARGS_SKETCH_FOLDER)) {
        folder=value;
      }
 else       if (param.equals(ARGS_LOCATION)) {
        location=parseInt(split(value,','));
      }
    }
 else {
      if (args[argIndex].equals(ARGS_PRESENT)) {
        present=true;
      }
 else       if (args[argIndex].equals(ARGS_HIDE_STOP)) {
        hideStop=true;
      }
 else       if (args[argIndex].equals(ARGS_EXTERNAL)) {
        external=true;
      }
 else {
        name=args[argIndex];
        break;
      }
    }
    argIndex++;
  }
  final PApplet sketch;
  if (constructedSketch != null) {
    sketch=constructedSketch;
  }
 else {
    try {
      Class<?> c=Thread.currentThread().getContextClassLoader().loadClass(name);
      sketch=(PApplet)c.newInstance();
    }
 catch (    RuntimeException re) {
      throw re;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  if (platform == MACOSX) {
    try {
      final String td="processing.core.ThinkDifferent";
      Class<?> thinkDifferent=Thread.currentThread().getContextClassLoader().loadClass(td);
      Method method=thinkDifferent.getMethod("init",new Class[]{PApplet.class});
      method.invoke(null,new Object[]{sketch});
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  sketch.display=displayNum;
  sketch.sketchPath=folder;
  sketch.handleSettings();
  if (args.length != argIndex + 1) {
    sketch.args=PApplet.subset(args,argIndex + 1);
  }
  sketch.external=external;
  if (windowColor != 0) {
    sketch.windowColor=windowColor;
  }
  final PSurface surface=sketch.initSurface();
  if (present) {
    if (hideStop) {
      stopColor=0;
    }
    surface.placePresent(stopColor);
  }
 else {
    surface.placeWindow(location,editorLocation);
  }
  if (sketch.external) {
    surface.setupExternalMessages();
  }
  sketch.showSurface();
  sketch.startSurface();
}
