{
  String openglError=external ? "Before using OpenGL, first select " + "Import Library > OpenGL from the Sketch menu." : "The Java classpath and native library path is not " + "properly set for using the OpenGL library.";
  if (!primary && !g.isGL()) {
    if (renderer.equals(P2D)) {
      throw new RuntimeException("createGraphics() with P2D requires size() to use P2D or P3D");
    }
 else     if (renderer.equals(P3D)) {
      throw new RuntimeException("createGraphics() with P3D or OPENGL requires size() to use P2D or P3D");
    }
  }
  try {
    Class<?> rendererClass=Thread.currentThread().getContextClassLoader().loadClass(renderer);
    Constructor<?> constructor=rendererClass.getConstructor(new Class[]{});
    PGraphics pg=(PGraphics)constructor.newInstance();
    pg.setParent(this);
    pg.setPrimary(primary);
    if (path != null)     pg.setPath(path);
    pg.setSize(w,h);
    return pg;
  }
 catch (  InvocationTargetException ite) {
    String msg=ite.getTargetException().getMessage();
    if ((msg != null) && (msg.indexOf("no jogl in java.library.path") != -1)) {
      throw new RuntimeException(openglError + " (The native library is missing.)");
    }
 else {
      ite.getTargetException().printStackTrace();
      Throwable target=ite.getTargetException();
      if (platform == MACOSX)       target.printStackTrace(System.out);
      throw new RuntimeException(target.getMessage());
    }
  }
catch (  ClassNotFoundException cnfe) {
    if (cnfe.getMessage().indexOf("processing.opengl.PGraphicsOpenGL") != -1) {
      throw new RuntimeException(openglError + " (The library .jar file is missing.)");
    }
 else {
      throw new RuntimeException("You need to use \"Import Library\" " + "to add " + renderer + " to your sketch.");
    }
  }
catch (  Exception e) {
    if ((e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException) || (e instanceof IllegalAccessException)) {
      if (e.getMessage().contains("cannot be <= 0")) {
        throw new RuntimeException(e);
      }
 else {
        e.printStackTrace();
        String msg=renderer + " needs to be updated " + "for the current release of Processing.";
        throw new RuntimeException(msg);
      }
    }
 else {
      if (platform == MACOSX)       e.printStackTrace(System.out);
      throw new RuntimeException(e.getMessage());
    }
  }
}
