{
  if (irenderer.equals(OPENGL)) {
    if (PApplet.platform == WINDOWS) {
      String s=System.getProperty("java.version");
      if (s != null) {
        if (s.equals("1.5.0_10")) {
          System.err.println("OpenGL support is broken with Java 1.5.0_10");
          System.err.println("See http://dev.processing.org" + "/bugs/show_bug.cgi?id=513 for more info.");
          throw new RuntimeException("Please update your Java " + "installation (see bug #513)");
        }
      }
    }
  }
  String openglError="Before using OpenGL, first select " + "Import Library > opengl from the Sketch menu.";
  try {
    Class<?> rendererClass=Thread.currentThread().getContextClassLoader().loadClass(irenderer);
    Constructor<?> constructor=rendererClass.getConstructor(new Class[]{});
    PGraphics pg=(PGraphics)constructor.newInstance();
    pg.setParent(this);
    pg.setPrimary(iprimary);
    if (ipath != null)     pg.setPath(ipath);
    pg.setAntiAlias(sketchSmooth());
    pg.setSize(iwidth,iheight);
    return pg;
  }
 catch (  InvocationTargetException ite) {
    String msg=ite.getTargetException().getMessage();
    if ((msg != null) && (msg.indexOf("no jogl in java.library.path") != -1)) {
      throw new RuntimeException(openglError + " (The native library is missing.)");
    }
 else {
      ite.getTargetException().printStackTrace();
      Throwable target=ite.getTargetException();
      if (platform == MACOSX)       target.printStackTrace(System.out);
      throw new RuntimeException(target.getMessage());
    }
  }
catch (  ClassNotFoundException cnfe) {
    if (cnfe.getMessage().indexOf("processing.opengl.PGraphicsGL") != -1) {
      throw new RuntimeException(openglError + " (The library .jar file is missing.)");
    }
 else {
      throw new RuntimeException("You need to use \"Import Library\" " + "to add " + irenderer + " to your sketch.");
    }
  }
catch (  Exception e) {
    if ((e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException) || (e instanceof IllegalAccessException)) {
      e.printStackTrace();
      String msg=irenderer + " needs to be updated " + "for the current release of Processing.";
      throw new RuntimeException(msg);
    }
 else {
      if (platform == MACOSX)       e.printStackTrace(System.out);
      throw new RuntimeException(e.getMessage());
    }
  }
}
