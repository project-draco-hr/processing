{
  if (glLineNormalBufferID == -1) {
    glLineNormalBufferID=createVertexBufferObject();
    glLineColorBufferID=createVertexBufferObject();
    glLineVertexBufferID=createVertexBufferObject();
    glLineAttribBufferID=createVertexBufferObject();
    glLineIndexBufferID=createVertexBufferObject();
  }
  int offset=0;
  int size=tess.lineVertexCount;
  gl2f.glEnableClientState(GL2.GL_NORMAL_ARRAY);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glLineNormalBufferID);
  gl2f.glBufferSubData(GL.GL_ARRAY_BUFFER,3 * offset * PGraphicsOpenGL.SIZEOF_FLOAT,3 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.lineNormals));
  gl2f.glNormalPointer(GL.GL_FLOAT,0,0);
  gl2f.glEnableClientState(GL2.GL_COLOR_ARRAY);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glLineColorBufferID);
  gl2f.glBufferSubData(GL.GL_ARRAY_BUFFER,4 * offset * PGraphicsOpenGL.SIZEOF_FLOAT,4 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.lineColors));
  gl2f.glColorPointer(4,GL.GL_FLOAT,0,0);
  gl2f.glEnableClientState(GL2.GL_VERTEX_ARRAY);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glLineVertexBufferID);
  gl2f.glBufferSubData(GL.GL_ARRAY_BUFFER,3 * offset * PGraphicsOpenGL.SIZEOF_FLOAT,3 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.lineVertices));
  gl2f.glVertexPointer(3,GL.GL_FLOAT,0,0);
  startLineShader();
  setupLineShader(glLineAttribBufferID);
  gl2f.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,glLineIndexBufferID);
  gl2f.glBufferSubData(GL.GL_ARRAY_BUFFER,offset * PGraphicsOpenGL.SIZEOF_INT,size * PGraphicsOpenGL.SIZEOF_INT,IntBuffer.wrap(tess.lineIndices));
  gl2f.glDrawElements(GL.GL_TRIANGLES,tess.lastLineIndex - tess.firstLineIndex + 1,GL.GL_UNSIGNED_INT,tess.firstLineIndex * PGraphicsOpenGL.SIZEOF_INT);
  gl2f.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,0);
  gl2f.glDisableClientState(GL2.GL_VERTEX_ARRAY);
  gl2f.glDisableClientState(GL2.GL_COLOR_ARRAY);
  gl2f.glDisableClientState(GL2.GL_NORMAL_ARRAY);
  stopLineShader();
}
