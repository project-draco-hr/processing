{
  if (!fillVBOsCreated) {
    createFillBuffers();
    fillVBOsCreated=true;
  }
  pgl.enableVertexArrays();
  pgl.enableColorArrays();
  pgl.enableNormalArrays();
  int size=tessGeo.fillVertexCount;
  pgl.bindVertexBuffer(glFillVertexBufferID);
  pgl.copyVertexBufferData(tessGeo.fillVertices,3 * size,vboMode);
  pgl.setVertexFormat(3,0,0);
  pgl.bindVertexBuffer(glFillColorBufferID);
  pgl.copyVertexBufferData(tessGeo.fillColors,4 * size,vboMode);
  pgl.setColorFormat(4,0,0);
  pgl.bindVertexBuffer(glFillNormalBufferID);
  pgl.copyVertexBufferData(tessGeo.fillNormals,3 * size,vboMode);
  pgl.setNormalFormat(3,0,0);
  if (texCache.hasTexture) {
    pgl.enableTexCoordArrays();
    pgl.bindVertexBuffer(glFillTexCoordBufferID);
    pgl.copyVertexBufferData(tessGeo.fillTexcoords,2 * size,vboMode);
    pgl.setTexCoordFormat(2,0,0);
  }
  pgl.bindIndexBuffer(glFillIndexBufferID);
  pgl.setActiveTexUnit(0);
  PTexture tex0=null;
  for (int i=0; i < texCache.count; i++) {
    PImage img=texCache.textures[i];
    PTexture tex=null;
    if (img != null) {
      tex=pg.getTexture(img);
      if (tex != null) {
        tex.bind();
        tex0=tex;
      }
    }
    if (tex == null && tex0 != null) {
      tex0.unbind();
      pgl.disableTexturing(tex0.glTarget);
    }
    int offset=texCache.firstIndex[i];
    size=texCache.lastIndex[i] - texCache.firstIndex[i] + 1;
    pgl.copyIndexBufferData(tessGeo.fillIndices,offset,size,vboMode);
    pgl.renderIndexBuffer(size);
  }
  if (texCache.hasTexture) {
    for (int i=0; i < texCache.count; i++) {
      PImage img=texCache.textures[i];
      if (img != null) {
        PTexture tex=pg.getTexture(img);
        if (tex != null) {
          tex.unbind();
        }
      }
    }
    for (int i=0; i < texCache.count; i++) {
      PImage img=texCache.textures[i];
      if (img != null) {
        PTexture tex=pg.getTexture(img);
        if (tex != null) {
          pgl.disableTexturing(tex.glTarget);
        }
      }
    }
    pgl.disableTexCoordArrays();
  }
  pgl.unbindIndexBuffer();
  pgl.unbindVertexBuffer();
  pgl.disableVertexArrays();
  pgl.disableColorArrays();
  pgl.disableNormalArrays();
}
