{
  if (drawing) {
    showWarning("P3D: Already called beginDraw().");
    return;
  }
  if (primarySurface && drawable != null) {
    drawable.setRealized(parent.isDisplayable());
    if (parent.isDisplayable()) {
      drawable.setRealized(true);
    }
 else {
      return;
    }
    detainContext();
  }
  updateGLInterfaces();
  if (!glParamsRead) {
    getGLParameters();
  }
  if (!settingsInited) {
    defaultSettings();
  }
  report("top beginDraw()");
  if (!primarySurface) {
    ogl.saveGLState();
    ogl.disableLights();
  }
  in.reset();
  tess.reset();
  texState.reset();
  super.noTexture();
  setDefaultBlend();
  if (hints[DISABLE_DEPTH_TEST]) {
    gl.glDisable(GL.GL_DEPTH_TEST);
  }
 else {
    gl.glEnable(GL.GL_DEPTH_TEST);
  }
  gl.glDepthFunc(GL.GL_LEQUAL);
  if (hints[DISABLE_DEPTH_MASK]) {
    gl.glDepthMask(false);
  }
 else {
    gl.glDepthMask(true);
  }
  if (hints[ENABLE_ACCURATE_2D]) {
    flushMode=FLUSH_CONTINUOUSLY;
  }
 else {
    flushMode=FLUSH_WHEN_FULL;
  }
  gl.glGetIntegerv(GL.GL_VIEWPORT,savedViewport,0);
  gl.glViewport(0,0,width,height);
  if (resized) {
    background(0);
    if (texture != null) {
      this.removeCache(ogl);
      this.removeParams(ogl);
      texture=null;
      loadTexture();
    }
    resized=false;
  }
  if (sizeChanged) {
    camera();
    perspective();
    sizeChanged=false;
  }
 else {
    restoreCamera();
    restoreProjection();
  }
  noLights();
  lightFalloff(1,0,0);
  lightSpecular(0,0,0);
  gl.glFrontFace(GL.GL_CW);
  setSurfaceParams();
  normalX=normalY=0;
  normalZ=0;
  if (primarySurface) {
  }
 else {
    pushFramebuffer();
    if (offscreenMultisample) {
      setFramebuffer(offscreenFramebufferMultisample);
      gl2x.glDrawBuffer(GL.GL_COLOR_ATTACHMENT0);
    }
 else {
      setFramebuffer(offscreenFramebuffer);
    }
  }
  gl.glClearColor(0,0,0,0);
  gl.glClear(GL.GL_DEPTH_BUFFER_BIT | GL.GL_STENCIL_BUFFER_BIT);
  drawing=true;
  report("bot beginDraw()");
}
