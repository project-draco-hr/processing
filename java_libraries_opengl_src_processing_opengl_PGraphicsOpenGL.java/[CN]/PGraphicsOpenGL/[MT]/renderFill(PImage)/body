{
  if (!fillVBOsCreated) {
    createFillBuffers();
    fillVBOsCreated=true;
  }
  int size=tess.fillVertexCount;
  gl2f.glEnableClientState(GL2.GL_NORMAL_ARRAY);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillNormalBufferID);
  gl2f.glBufferData(GL.GL_ARRAY_BUFFER,3 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillNormals,0,3 * size),vboMode);
  gl2f.glNormalPointer(GL.GL_FLOAT,0,0);
  gl2f.glEnableClientState(GL2.GL_COLOR_ARRAY);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillColorBufferID);
  gl2f.glBufferData(GL.GL_ARRAY_BUFFER,4 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillColors,0,4 * size),vboMode);
  gl2f.glColorPointer(4,GL.GL_FLOAT,0,0);
  gl2f.glEnableClientState(GL2.GL_VERTEX_ARRAY);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillVertexBufferID);
  gl2f.glBufferData(GL.GL_ARRAY_BUFFER,3 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillVertices,0,3 * size),vboMode);
  gl2f.glVertexPointer(3,GL.GL_FLOAT,0,0);
  PTexture tex=null;
  if (textureImage != null) {
    tex=ogl.getTexture(textureImage);
    if (tex != null) {
      gl2f.glEnable(tex.glTarget);
      gl2f.glActiveTexture(GL.GL_TEXTURE0);
      gl2f.glBindTexture(tex.glTarget,tex.glID);
    }
    gl2f.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
    gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillTexCoordBufferID);
    gl2f.glBufferData(GL.GL_ARRAY_BUFFER,2 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillTexcoords,0,2 * size),vboMode);
    gl2f.glTexCoordPointer(2,GL.GL_FLOAT,0,0);
  }
  size=tess.fillIndexCount;
  gl2f.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,glFillIndexBufferID);
  gl2f.glBufferData(GL.GL_ELEMENT_ARRAY_BUFFER,size * PGraphicsOpenGL.SIZEOF_INT,IntBuffer.wrap(tess.fillIndices,0,size),vboMode);
  gl2f.glDrawElements(GL.GL_TRIANGLES,size,GL.GL_UNSIGNED_INT,0);
  if (tex != null) {
    gl2f.glActiveTexture(GL.GL_TEXTURE0);
    gl2f.glBindTexture(tex.glTarget,0);
    gl2f.glDisable(tex.glTarget);
    gl2f.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
  }
  gl2f.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,0);
  gl2f.glDisableClientState(GL2.GL_VERTEX_ARRAY);
  gl2f.glDisableClientState(GL2.GL_COLOR_ARRAY);
  gl2f.glDisableClientState(GL2.GL_NORMAL_ARRAY);
}
