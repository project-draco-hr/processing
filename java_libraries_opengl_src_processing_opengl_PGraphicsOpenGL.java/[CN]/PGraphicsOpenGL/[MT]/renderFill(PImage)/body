{
  if (!fillVBOsCreated) {
    createFillBuffers();
    fillVBOsCreated=true;
  }
  gl2f.glEnableClientState(GL2.GL_VERTEX_ARRAY);
  gl2f.glEnableClientState(GL2.GL_COLOR_ARRAY);
  gl2f.glEnableClientState(GL2.GL_NORMAL_ARRAY);
  int size=tess.fillVertexCount;
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillVertexBufferID);
  gl2f.glBufferData(GL.GL_ARRAY_BUFFER,3 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillVertices,0,3 * size),vboMode);
  gl2f.glVertexPointer(3,GL.GL_FLOAT,0,0);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillColorBufferID);
  gl2f.glBufferData(GL.GL_ARRAY_BUFFER,4 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillColors,0,4 * size),vboMode);
  gl2f.glColorPointer(4,GL.GL_FLOAT,0,0);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillNormalBufferID);
  gl2f.glBufferData(GL.GL_ARRAY_BUFFER,3 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillNormals,0,3 * size),vboMode);
  gl2f.glNormalPointer(GL.GL_FLOAT,0,0);
  if (texState.hasTexture) {
    gl2f.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
    gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,glFillTexCoordBufferID);
    gl2f.glBufferData(GL.GL_ARRAY_BUFFER,2 * size * PGraphicsOpenGL.SIZEOF_FLOAT,FloatBuffer.wrap(tess.fillTexcoords,0,2 * size),vboMode);
    gl2f.glTexCoordPointer(2,GL.GL_FLOAT,0,0);
  }
  gl2f.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,glFillIndexBufferID);
  for (int i=0; i < texState.count; i++) {
    PImage img=texState.textures[i];
    PTexture tex;
    if (img != null) {
      tex=ogl.getTexture(img);
      if (tex != null) {
        gl2f.glEnable(tex.glTarget);
        gl2f.glActiveTexture(GL.GL_TEXTURE0);
        gl2f.glBindTexture(tex.glTarget,tex.glID);
      }
    }
    int offset=texState.firstIndex[i];
    size=texState.lastIndex[i] - texState.firstIndex[i] + 1;
    gl2f.glBufferData(GL.GL_ELEMENT_ARRAY_BUFFER,size * PGraphicsOpenGL.SIZEOF_INT,IntBuffer.wrap(tess.fillIndices,offset,size),vboMode);
    gl2f.glDrawElements(GL.GL_TRIANGLES,size,GL.GL_UNSIGNED_INT,0);
  }
  if (texState.hasTexture) {
    PTexture tex0=null;
    for (int i=0; i < texState.count; i++) {
      PImage img=texState.textures[i];
      if (img != null) {
        PTexture tex=ogl.getTexture(img);
        if (tex0 != tex) {
          gl2f.glDisable(tex.glTarget);
          tex0=tex;
        }
      }
    }
    if (tex0 != null) {
      gl2f.glActiveTexture(GL.GL_TEXTURE0);
      gl2f.glBindTexture(tex0.glTarget,0);
    }
    gl2f.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
  }
  gl2f.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);
  gl2f.glBindBuffer(GL.GL_ARRAY_BUFFER,0);
  gl2f.glDisableClientState(GL2.GL_VERTEX_ARRAY);
  gl2f.glDisableClientState(GL2.GL_COLOR_ARRAY);
  gl2f.glDisableClientState(GL2.GL_NORMAL_ARRAY);
}
