{
  Hashtable<String,Integer> mtlTable=new Hashtable<String,Integer>();
  int mtlIdxCur=-1;
  boolean readv, readvn, readvt;
  try {
    readv=readvn=readvt=false;
    String line;
    String gname="object";
    while ((line=reader.readLine()) != null) {
      while (line.contains("\\")) {
        line=line.split("\\\\")[0];
        final String s=reader.readLine();
        if (s != null)         line+=s;
      }
      String[] elements=line.split("\\s+");
      if (elements.length > 0) {
        if (elements[0].equals("v")) {
          PVector tempv=new PVector(Float.valueOf(elements[1]).floatValue(),Float.valueOf(elements[2]).floatValue(),Float.valueOf(elements[3]).floatValue());
          vertices.add(tempv);
          readv=true;
        }
 else         if (elements[0].equals("vn")) {
          PVector tempn=new PVector(Float.valueOf(elements[1]).floatValue(),Float.valueOf(elements[2]).floatValue(),Float.valueOf(elements[3]).floatValue());
          normals.add(tempn);
          readvn=true;
        }
 else         if (elements[0].equals("vt")) {
          PVector tempv=new PVector(Float.valueOf(elements[1]).floatValue(),1 - Float.valueOf(elements[2]).floatValue());
          textures.add(tempv);
          readvt=true;
        }
 else         if (elements[0].equals("o")) {
        }
 else         if (elements[0].equals("mtllib")) {
          if (elements[1] != null) {
            BufferedReader mreader=parent.createReader(elements[1]);
            if (mreader != null) {
              parseMTL(mreader,materials,mtlTable);
            }
          }
        }
 else         if (elements[0].equals("g")) {
          gname=1 < elements.length ? elements[1] : "";
        }
 else         if (elements[0].equals("usemtl")) {
          if (elements[1] != null) {
            String mtlname=elements[1];
            if (mtlTable.containsKey(mtlname)) {
              Integer tempInt=mtlTable.get(mtlname);
              mtlIdxCur=tempInt.intValue();
            }
 else {
              mtlIdxCur=-1;
            }
          }
        }
 else         if (elements[0].equals("f")) {
          OBJFace face=new OBJFace();
          face.matIdx=mtlIdxCur;
          face.name=gname;
          for (int i=1; i < elements.length; i++) {
            String seg=elements[i];
            if (seg.indexOf("/") > 0) {
              String[] forder=seg.split("/");
              if (forder.length > 2) {
                if (forder[0].length() > 0 && readv) {
                  face.vertIdx.add(Integer.valueOf(forder[0]));
                }
                if (forder[1].length() > 0 && readvt) {
                  face.texIdx.add(Integer.valueOf(forder[1]));
                }
                if (forder[2].length() > 0 && readvn) {
                  face.normIdx.add(Integer.valueOf(forder[2]));
                }
              }
 else               if (forder.length > 1) {
                if (forder[0].length() > 0 && readv) {
                  face.vertIdx.add(Integer.valueOf(forder[0]));
                }
                if (forder[1].length() > 0) {
                  if (readvt) {
                    face.texIdx.add(Integer.valueOf(forder[1]));
                  }
 else                   if (readvn) {
                    face.normIdx.add(Integer.valueOf(forder[1]));
                  }
                }
              }
 else               if (forder.length > 0) {
                if (forder[0].length() > 0 && readv) {
                  face.vertIdx.add(Integer.valueOf(forder[0]));
                }
              }
            }
 else {
              if (seg.length() > 0 && readv) {
                face.vertIdx.add(Integer.valueOf(seg));
              }
            }
          }
          faces.add(face);
        }
      }
    }
    if (materials.size() == 0) {
      OBJMaterial defMtl=new OBJMaterial();
      materials.add(defMtl);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
