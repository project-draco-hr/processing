{
  flush();
  float z0=eyeX - centerX;
  float z1=eyeY - centerY;
  float z2=eyeZ - centerZ;
  float mag=PApplet.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  if (mag != 0) {
    z0/=mag;
    z1/=mag;
    z2/=mag;
  }
  cameraDepth=mag;
  cameraAxisX=z0;
  cameraAxisY=z1;
  cameraAxisZ=z2;
  cameraCenterX=centerX;
  cameraCenterY=centerY;
  cameraCenterZ=centerZ;
  float y0=upX;
  float y1=upY;
  float y2=upZ;
  float x0=y1 * z2 - y2 * z1;
  float x1=-y0 * z2 + y2 * z0;
  float x2=y0 * z1 - y1 * z0;
  y0=z1 * x2 - z2 * x1;
  y1=-z0 * x2 + z2 * x0;
  y2=z0 * x1 - z1 * x0;
  mag=PApplet.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
  if (mag != 0) {
    x0/=mag;
    x1/=mag;
    x2/=mag;
  }
  mag=PApplet.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
  if (mag != 0) {
    y0/=mag;
    y1/=mag;
    y2/=mag;
  }
  float[] m=glmodelview;
  m[0]=x0;
  m[1]=y0;
  m[2]=z0;
  m[3]=0.0f;
  m[4]=x1;
  m[5]=y1;
  m[6]=z1;
  m[7]=0.0f;
  m[8]=x2;
  m[9]=y2;
  m[10]=z2;
  m[11]=0;
  m[12]=0.0f;
  m[13]=0.0f;
  m[14]=0.0f;
  m[15]=1.0f;
  float tx=-eyeX;
  float ty=-eyeY;
  float tz=-eyeZ;
  m[12]+=tx * m[0] + ty * m[4] + tz * m[8];
  m[13]+=tx * m[1] + ty * m[5] + tz * m[9];
  m[14]+=tx * m[2] + ty * m[6] + tz * m[10];
  m[15]+=tx * m[3] + ty * m[7] + tz * m[11];
  gl2f.glMatrixMode(GL2.GL_MODELVIEW);
  gl2f.glLoadMatrixf(glmodelview,0);
  copyGLArrayToPMatrix(glmodelview,modelview);
  modelviewStack.setCamera(modelview);
  modelviewUpdated=true;
  modelviewInv.set(modelview);
  modelviewInv.invert();
  PApplet.arrayCopy(glmodelview,pcamera);
  PApplet.arrayCopy(glmodelviewInv,pcameraInv);
  copyGLArrayToPMatrix(pcamera,camera);
  copyGLArrayToPMatrix(pcameraInv,cameraInv);
}
