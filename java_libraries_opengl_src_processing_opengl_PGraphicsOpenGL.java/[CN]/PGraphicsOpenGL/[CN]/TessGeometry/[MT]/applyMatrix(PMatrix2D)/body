{
  if (0 < fillVertexCount) {
    int index;
    for (int i=0; i < fillVertexCount; i++) {
      index=3 * i;
      float x=fillVertices[index++];
      float y=fillVertices[index];
      index=3 * i;
      float nx=fillNormals[index++];
      float ny=fillNormals[index];
      index=3 * i;
      fillVertices[index++]=x * tr.m00 + y * tr.m01 + tr.m02;
      fillVertices[index]=x * tr.m10 + y * tr.m11 + tr.m12;
      index=3 * i;
      fillNormals[index++]=nx * tr.m00 + ny * tr.m01;
      fillNormals[index]=nx * tr.m10 + ny * tr.m11;
    }
  }
  if (0 < lineVertexCount) {
    int index;
    for (int i=0; i < lineVertexCount; i++) {
      index=3 * i;
      float x=lineVertices[index++];
      float y=lineVertices[index];
      index=3 * i;
      float nx=lineNormals[index++];
      float ny=lineNormals[index];
      index=4 * i;
      float xa=lineAttributes[index++];
      float ya=lineAttributes[index];
      index=3 * i;
      lineVertices[index++]=x * tr.m00 + y * tr.m01 + tr.m02;
      lineVertices[index]=x * tr.m10 + y * tr.m11 + tr.m12;
      index=3 * i;
      lineNormals[index++]=nx * tr.m00 + ny * tr.m01;
      lineNormals[index]=nx * tr.m10 + ny * tr.m11;
      index=4 * i;
      lineAttributes[index++]=xa * tr.m00 + ya * tr.m01 + tr.m02;
      lineAttributes[index]=xa * tr.m10 + ya * tr.m11 + tr.m12;
    }
  }
  if (0 < pointVertexCount) {
    int index;
    for (int i=0; i < pointVertexCount; i++) {
      index=3 * i;
      float x=pointVertices[index++];
      float y=pointVertices[index];
      index=3 * i;
      float nx=pointNormals[index++];
      float ny=pointNormals[index];
      index=3 * i;
      pointVertices[index++]=x * tr.m00 + y * tr.m01 + tr.m02;
      pointVertices[index]=x * tr.m10 + y * tr.m11 + tr.m12;
      index=3 * i;
      pointNormals[index++]=nx * tr.m00 + ny * tr.m01;
      pointNormals[index]=nx * tr.m10 + ny * tr.m11;
    }
  }
}
