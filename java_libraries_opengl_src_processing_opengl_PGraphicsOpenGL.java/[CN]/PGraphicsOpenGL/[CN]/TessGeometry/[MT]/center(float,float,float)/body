{
  int index;
  float cx0=0;
  float cy0=0;
  float cz0=0;
  for (int i=0; i < fillVertexCount; i++) {
    index=3 * i;
    cx0+=fillVertices.get(index++);
    cy0+=fillVertices.get(index++);
    cz0+=fillVertices.get(index);
  }
  for (int i=0; i < lineVertexCount; i++) {
    index=3 * i;
    cx0+=lineVertices.get(index++);
    cy0+=lineVertices.get(index++);
    cz0+=lineVertices.get(index);
  }
  for (int i=0; i < pointVertexCount; i++) {
    index=3 * i;
    cx0+=pointVertices.get(index++);
    cy0+=pointVertices.get(index++);
    cz0+=pointVertices.get(index);
  }
  int nt=fillVertexCount + lineVertexCount + pointVertexCount;
  if (0 < nt) {
    cx0/=nt;
    cy0/=nt;
    cz0/=nt;
  }
  float[] tvec={cx - cx0,cy - cy0,cz - cz0};
  if (0 < fillVertexCount) {
    for (int i=0; i < fillVertexCount; i++) {
      index=3 * i;
      for (int j=0; j < 3; j++) {
        fillVertices.position(index + j);
        fillVertices.put(fillVertices.get(index + j) + tvec[j]);
      }
    }
  }
  if (0 < lineVertexCount) {
    for (int i=0; i < lineVertexCount; i++) {
      index=3 * i;
      for (int j=0; j < 3; j++) {
        lineVertices.position(index + j);
        lineVertices.put(lineVertices.get(index + j) + tvec[j]);
      }
      index=4 * i;
      for (int j=0; j < 3; j++) {
        lineDirWidths.position(index + j);
        lineDirWidths.put(lineDirWidths.get(index + j) + tvec[j]);
      }
    }
  }
  if (0 < pointVertexCount) {
    for (int i=0; i < pointVertexCount; i++) {
      index=3 * i;
      for (int j=0; j < 3; j++) {
        pointVertices.position(index + j);
        pointVertices.put(pointVertices.get(index + j) + tvec[j]);
      }
    }
  }
}
