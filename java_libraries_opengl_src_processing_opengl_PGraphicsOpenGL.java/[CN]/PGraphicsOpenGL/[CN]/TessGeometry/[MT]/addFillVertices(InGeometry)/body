{
  int index;
  int i0=in.firstVertex;
  int i1=in.lastVertex;
  int nvert=i1 - i0 + 1;
  addFillVertices(nvert);
  if (renderMode == IMMEDIATE && flushMode == FLUSH_WHEN_FULL) {
    PMatrix3D tr=geometry;
    for (int i=0; i < nvert; i++) {
      int inIdx=i0 + i;
      int tessIdx=firstFillVertex + i;
      index=3 * inIdx;
      float x=in.vertices[index++];
      float y=in.vertices[index++];
      float z=in.vertices[index];
      index=3 * inIdx;
      float nx=in.normals[index++];
      float ny=in.normals[index++];
      float nz=in.normals[index];
      index=3 * tessIdx;
      fillVertices[index++]=x * tr.m00 + y * tr.m01 + z * tr.m02 + tr.m03;
      fillVertices[index++]=x * tr.m10 + y * tr.m11 + z * tr.m12 + tr.m13;
      fillVertices[index]=x * tr.m20 + y * tr.m21 + z * tr.m22 + tr.m23;
      index=3 * tessIdx;
      fillNormals[index++]=nx * tr.m00 + ny * tr.m01 + nz * tr.m02;
      fillNormals[index++]=nx * tr.m10 + ny * tr.m11 + nz * tr.m12;
      fillNormals[index]=nx * tr.m20 + ny * tr.m21 + nz * tr.m22;
    }
  }
 else {
    if (nvert < MIN_ARRAYCOPY_SIZE) {
      for (int i=0; i < nvert; i++) {
        int inIdx=i0 + i;
        int tessIdx=firstFillVertex + i;
        index=3 * inIdx;
        float x=in.vertices[index++];
        float y=in.vertices[index++];
        float z=in.vertices[index];
        index=3 * inIdx;
        float nx=in.normals[index++];
        float ny=in.normals[index++];
        float nz=in.normals[index];
        index=3 * tessIdx;
        fillVertices[index++]=x;
        fillVertices[index++]=y;
        fillVertices[index]=z;
        index=3 * tessIdx;
        fillNormals[index++]=nx;
        fillNormals[index++]=ny;
        fillNormals[index]=nz;
      }
    }
 else {
      PApplet.arrayCopy(in.vertices,3 * i0,fillVertices,3 * firstFillVertex,3 * nvert);
      PApplet.arrayCopy(in.normals,3 * i0,fillNormals,3 * firstFillVertex,3 * nvert);
    }
  }
  if (nvert < MIN_ARRAYCOPY_SIZE) {
    for (int i=0; i < nvert; i++) {
      int inIdx=i0 + i;
      int tessIdx=firstFillVertex + i;
      index=4 * inIdx;
      float r=in.colors[index++];
      float g=in.colors[index++];
      float b=in.colors[index++];
      float a=in.colors[index];
      index=2 * inIdx;
      float u=in.texcoords[index++];
      float v=in.texcoords[index];
      index=4 * tessIdx;
      fillColors[index++]=r;
      fillColors[index++]=g;
      fillColors[index++]=b;
      fillColors[index]=a;
      index=2 * tessIdx;
      fillNormals[index++]=u;
      fillNormals[index]=v;
    }
  }
 else {
    PApplet.arrayCopy(in.colors,4 * i0,fillColors,4 * firstFillVertex,4 * nvert);
    PApplet.arrayCopy(in.texcoords,2 * i0,fillTexcoords,2 * firstFillVertex,2 * nvert);
  }
}
