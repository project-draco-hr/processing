{
  int nInVert=in.lastVertex - in.firstVertex + 1;
  if (stroke && 1 <= nInVert) {
    int nvertTot=0;
    int nindTot=0;
    for (int i=in.firstVertex; i <= in.lastVertex; i++) {
      int perim=PApplet.max(MIN_POINT_ACCURACY,(int)(TWO_PI * strokeWeight / 20));
      int nvert=perim + 1;
      nvertTot+=nvert;
      nindTot+=3 * (nvert - 1);
    }
    tess.pointVertexCheck(nvertTot);
    tess.pointIndexCheck(nindTot);
    int vertIdx=tess.firstPointVertex;
    int attribIdx=tess.firstPointVertex;
    int indIdx=tess.firstPointIndex;
    IndexCache cache=tess.pointIndexCache;
    int index=cache.getLast();
    for (int i=in.firstVertex; i <= in.lastVertex; i++) {
      int perim=PApplet.max(MIN_POINT_ACCURACY,(int)(TWO_PI * strokeWeight / 20));
      int nvert=perim + 1;
      if (PGL.MAX_VERTEX_INDEX1 <= nvert) {
        throw new RuntimeException("P3D: the point has too many vertices.");
      }
      int count=cache.vertexCount[index];
      if (PGL.MAX_VERTEX_INDEX1 <= count + nvert) {
        index=cache.addNew();
        count=0;
      }
      for (int k=0; k < nvert; k++) {
        tess.putPointVertex(in,i,vertIdx);
        vertIdx++;
      }
      tess.pointSizes[2 * attribIdx + 0]=0;
      tess.pointSizes[2 * attribIdx + 1]=0;
      attribIdx++;
      float val=0;
      float inc=(float)SINCOS_LENGTH / perim;
      for (int k=0; k < perim; k++) {
        tess.pointSizes[2 * attribIdx + 0]=0.5f * cosLUT[(int)val] * strokeWeight;
        tess.pointSizes[2 * attribIdx + 1]=0.5f * sinLUT[(int)val] * strokeWeight;
        val=(val + inc) % SINCOS_LENGTH;
        attribIdx++;
      }
      for (int k=1; k < nvert - 1; k++) {
        tess.pointIndices[indIdx++]=(short)(count + 0);
        tess.pointIndices[indIdx++]=(short)(count + k);
        tess.pointIndices[indIdx++]=(short)(count + k + 1);
      }
      tess.pointIndices[indIdx++]=(short)(count + 0);
      tess.pointIndices[indIdx++]=(short)(count + 1);
      tess.pointIndices[indIdx++]=(short)(count + nvert - 1);
      cache.incCounts(index,3 * (nvert - 1),nvert);
    }
  }
}
