{
  copyInGeoToTessGeo();
  int nvertFill=inGeo.lastVertex - inGeo.firstVertex + 1;
  int quadCount=nvertFill / 2 - 1;
  tessGeo.addFillIndices(6 * quadCount);
  int idx=tessGeo.firstFillIndex;
  int vert0=inGeo.firstVertex;
  for (int qd=1; qd < nvertFill / 2; qd++) {
    int i0=vert0 + 2 * (qd - 1);
    int i1=vert0 + 2 * (qd - 1) + 1;
    int i2=vert0 + 2 * qd + 1;
    int i3=vert0 + 2 * qd;
    tessGeo.fillIndices[idx++]=i0;
    tessGeo.fillIndices[idx++]=i1;
    tessGeo.fillIndices[idx++]=i3;
    tessGeo.fillIndices[idx++]=i1;
    tessGeo.fillIndices[idx++]=i2;
    tessGeo.fillIndices[idx++]=i3;
  }
  int strokedCount=0;
  for (int qd=1; qd < nvertFill / 2; qd++) {
    int i0=vert0 + 2 * (qd - 1);
    int i1=vert0 + 2 * (qd - 1) + 1;
    int i2=vert0 + 2 * qd + 1;
    int i3=vert0 + 2 * qd;
    if (0 < inGeo.strokes[5 * i0 + 4] || 0 < inGeo.strokes[5 * i1 + 4] || 0 < inGeo.strokes[5 * i2 + 4] || 0 < inGeo.strokes[5 * i3 + 4]) {
      strokedCount++;
    }
  }
  if (0 < strokedCount) {
    int nvertLine=strokedCount * 4 * 4;
    tessGeo.addLineVertices(nvertLine);
    int nind=strokedCount * 4 * 2* 3;
    tessGeo.addLineIndices(nind);
    int vcount=tessGeo.firstLineVertex;
    int icount=tessGeo.firstLineIndex;
    for (int qd=1; qd < nvertFill / 2; qd++) {
      int i0=vert0 + 2 * (qd - 1);
      int i1=vert0 + 2 * (qd - 1) + 1;
      int i2=vert0 + 2 * qd + 1;
      int i3=vert0 + 2 * qd;
      if (0 < inGeo.strokes[5 * i0 + 4] || 0 < inGeo.strokes[5 * i1 + 4] || 0 < inGeo.strokes[5 * i2 + 4] || 0 < inGeo.strokes[5 * i3 + 4]) {
        addStrokeLine(i0,i1,vcount,icount);
        vcount+=4;
        icount+=6;
        addStrokeLine(i1,i2,vcount,icount);
        vcount+=4;
        icount+=6;
        addStrokeLine(i2,i3,vcount,icount);
        vcount+=4;
        icount+=6;
        addStrokeLine(i3,i0,vcount,icount);
        vcount+=4;
        icount+=6;
      }
    }
  }
}
