{
  copyInGeoToTessGeo();
  int nvertFill=inGeo.lastVertex - inGeo.firstVertex + 1;
  int triCount=nvertFill / 3;
  tessGeo.addFillIndices(nvertFill);
  int idx0=tessGeo.firstFillIndex;
  for (int i=inGeo.firstVertex; i <= inGeo.lastVertex; i++) {
    tessGeo.fillIndices[idx0 + i]=i;
  }
  int strokedCount=0;
  int vert0=inGeo.firstVertex;
  for (int tr=0; tr < triCount; tr++) {
    int i0=vert0 + 3 * tr + 0;
    int i1=vert0 + 3 * tr + 1;
    int i2=vert0 + 3 * tr + 2;
    if (0 < inGeo.strokes[5 * i0 + 4] || 0 < inGeo.strokes[5 * i1 + 4] || 0 < inGeo.strokes[5 * i2 + 4]) {
      strokedCount++;
    }
  }
  if (0 < strokedCount) {
    int nvertLine=strokedCount * 3 * 4;
    tessGeo.addLineVertices(nvertLine);
    int nind=strokedCount * 3 * 2* 3;
    tessGeo.addLineIndices(nind);
    int vcount=tessGeo.firstLineVertex;
    int icount=tessGeo.firstLineIndex;
    for (int tr=0; tr < triCount; tr++) {
      int i0=vert0 + 3 * tr + 0;
      int i1=vert0 + 3 * tr + 1;
      int i2=vert0 + 3 * tr + 2;
      if (0 < inGeo.strokes[5 * i0 + 4] || 0 < inGeo.strokes[5 * i1 + 4] || 0 < inGeo.strokes[5 * i2 + 4]) {
        addStrokeLine(i0,i1,vcount,icount);
        vcount+=4;
        icount+=6;
        addStrokeLine(i1,i2,vcount,icount);
        vcount+=4;
        icount+=6;
        addStrokeLine(i2,i0,vcount,icount);
        vcount+=4;
        icount+=6;
      }
    }
  }
}
