{
  int[] indices;
  float[] vertices;
  indices=pointIndices[inIdx];
  vertices=tess.pointVertices;
  for (int i=0; i < indices.length; i++) {
    int tessIdx=indices[i];
    vertices[3 * tessIdx + 0]=x;
    vertices[3 * tessIdx + 1]=y;
    vertices[3 * tessIdx + 2]=z;
  }
  indices=lineIndices[inIdx];
  vertices=tess.lineVertices;
  for (int i=0; i < indices.length; i++) {
    int tessIdx=indices[i];
    vertices[3 * tessIdx + 0]=x;
    vertices[3 * tessIdx + 1]=y;
    vertices[3 * tessIdx + 2]=z;
  }
  vertices=tess.fillVertices;
  if (-1 < firstFillIndex) {
    int tessIdx=firstFillIndex + inIdx;
    vertices[3 * tessIdx + 0]=x;
    vertices[3 * tessIdx + 1]=y;
    vertices[3 * tessIdx + 2]=z;
  }
 else {
    float x0=in.vertices[3 * inIdx + 0];
    float y0=in.vertices[3 * inIdx + 1];
    float z0=in.vertices[3 * inIdx + 2];
    indices=fillIndices[inIdx];
    float[] weights=fillWeights[inIdx];
    for (int i=0; i < indices.length; i++) {
      int tessIdx=indices[i];
      float weight=weights[i];
      float tx0=vertices[3 * tessIdx + 0];
      float ty0=vertices[3 * tessIdx + 1];
      float tz0=vertices[3 * tessIdx + 2];
      vertices[3 * tessIdx + 0]=tx0 + weight * (x - x0);
      vertices[3 * tessIdx + 1]=ty0 + weight * (y - y0);
      vertices[3 * tessIdx + 2]=tz0 + weight * (z - z0);
    }
  }
}
