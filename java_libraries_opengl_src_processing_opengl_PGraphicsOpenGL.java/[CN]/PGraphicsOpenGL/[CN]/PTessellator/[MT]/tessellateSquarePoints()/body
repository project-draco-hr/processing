{
  int quadCount=inGeo.lastVertex - inGeo.firstVertex + 1;
  int nvertTot=5 * quadCount;
  int nindTot=12 * quadCount;
  int vertIdx=3 * tessGeo.pointVertexCount;
  int attribIdx=2 * tessGeo.pointVertexCount;
  int indIdx=tessGeo.pointIndexCount;
  int vert0=tessGeo.pointVertexCount;
  tessGeo.addPointVertices(nvertTot);
  tessGeo.addPointIndices(nindTot);
  for (int i=inGeo.firstVertex; i <= inGeo.lastVertex; i++) {
    int nvert=5;
    for (int k=0; k < nvert; k++) {
      PApplet.arrayCopy(inGeo.vertices,3 * i,tessGeo.pointVertices,3 * vertIdx,3);
      PApplet.arrayCopy(inGeo.normals,3 * i,tessGeo.pointNormals,3 * vertIdx,3);
      PApplet.arrayCopy(inGeo.strokes,5 * i,tessGeo.pointColors,4 * vertIdx,4);
      vertIdx++;
    }
    tessGeo.pointAttributes[2 * attribIdx + 0]=0;
    tessGeo.pointAttributes[2 * attribIdx + 1]=0;
    attribIdx++;
    float w=inGeo.strokes[5 * i + 4];
    for (int k=0; k < 4; k++) {
      tessGeo.pointAttributes[2 * attribIdx + 0]=QUAD_SIGNS[k][0] * w / 2;
      tessGeo.pointAttributes[2 * attribIdx + 1]=QUAD_SIGNS[k][1] * w / 2;
      attribIdx++;
    }
    for (int k=1; k < nvert - 1; k++) {
      tessGeo.pointIndices[indIdx++]=vert0 + 0;
      tessGeo.pointIndices[indIdx++]=vert0 + k;
      tessGeo.pointIndices[indIdx++]=vert0 + k + 1;
    }
    tessGeo.pointIndices[indIdx++]=vert0 + 0;
    tessGeo.pointIndices[indIdx++]=vert0 + 1;
    tessGeo.pointIndices[indIdx++]=vert0 + nvert - 1;
    vert0=vertIdx;
  }
}
