{
  super.bind();
  if (-1 < inVertexLoc)   pgl.glEnableVertexAttribArray(inVertexLoc);
  if (-1 < inColorLoc)   pgl.glEnableVertexAttribArray(inColorLoc);
  if (-1 < inNormalLoc)   pgl.glEnableVertexAttribArray(inNormalLoc);
  if (-1 < inAmbientLoc)   pgl.glEnableVertexAttribArray(inAmbientLoc);
  if (-1 < inSpecularLoc)   pgl.glEnableVertexAttribArray(inSpecularLoc);
  if (-1 < inEmissiveLoc)   pgl.glEnableVertexAttribArray(inEmissiveLoc);
  if (-1 < inShineLoc)   pgl.glEnableVertexAttribArray(inShineLoc);
  if (pgCurrent != null) {
    if (-1 < projmodelviewMatrixLoc) {
      pgCurrent.updateGLProjmodelview();
      setUniformMatrix(projmodelviewMatrixLoc,pgCurrent.glProjmodelview);
    }
    if (-1 < modelviewMatrixLoc) {
      pgCurrent.updateGLModelview();
      setUniformMatrix(modelviewMatrixLoc,pgCurrent.glModelview);
    }
    if (-1 < projectionMatrixLoc) {
      pgCurrent.updateGLProjection();
      setUniformMatrix(projectionMatrixLoc,pgCurrent.glProjection);
    }
    if (-1 < normalMatrixLoc) {
      pgCurrent.updateGLNormal();
      setUniformMatrix(normalMatrixLoc,pgCurrent.glNormal);
    }
    setUniformValue(lightCountLoc,pgCurrent.lightCount);
    setUniformVector(lightPositionLoc,pgCurrent.lightPosition,4);
    setUniformVector(lightNormalLoc,pgCurrent.lightNormal,3);
    setUniformVector(lightAmbientLoc,pgCurrent.lightAmbient,3);
    setUniformVector(lightDiffuseLoc,pgCurrent.lightDiffuse,3);
    setUniformVector(lightSpecularLoc,pgCurrent.lightSpecular,3);
    setUniformVector(lightFalloffCoefficientsLoc,pgCurrent.lightFalloffCoefficients,3);
    setUniformVector(lightSpotParametersLoc,pgCurrent.lightSpotParameters,2);
  }
}
