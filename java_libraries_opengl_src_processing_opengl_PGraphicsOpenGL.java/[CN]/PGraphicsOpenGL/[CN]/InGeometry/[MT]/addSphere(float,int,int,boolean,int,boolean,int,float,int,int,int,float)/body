{
  if ((detU < 3) || (detV < 2)) {
    sphereDetail(30);
  }
  this.fillColor=fillColor;
  this.strokeColor=strokeColor;
  this.strokeWeight=strokeWeight;
  this.ambientColor=ambientColor;
  this.specularColor=specularColor;
  this.emissiveColor=emissiveColor;
  this.shininessFactor=shininessFactor;
  int nind=3 * sphereDetailU + (6 * sphereDetailU + 3) * (sphereDetailV - 2) + 3 * sphereDetailU;
  int[] indices=new int[nind];
  int vertCount=0;
  int indCount=0;
  int vert0, vert1;
  float u, v;
  float du=1.0f / (sphereDetailU);
  float dv=1.0f / (sphereDetailV);
  u=1;
  v=1;
  for (int i=0; i < sphereDetailU; i++) {
    addVertex(0,r,0,0,1,0,u,v,VERTEX);
    u-=du;
  }
  vertCount=sphereDetailU;
  vert0=vertCount;
  u=1;
  v-=dv;
  for (int i=0; i < sphereDetailU; i++) {
    addVertex(r * sphereX[i],r * sphereY[i],r * sphereZ[i],sphereX[i],sphereY[i],sphereZ[i],u,v,VERTEX);
    u-=du;
  }
  vertCount+=sphereDetailU;
  vert1=vertCount;
  addVertex(r * sphereX[0],r * sphereY[0],r * sphereZ[0],sphereX[0],sphereY[0],sphereZ[0],u,v,VERTEX);
  vertCount++;
  for (int i=0; i < sphereDetailU; i++) {
    int i1=vert0 + i;
    int i0=vert0 + i - sphereDetailU;
    indices[3 * i + 0]=i1;
    indices[3 * i + 1]=i0;
    indices[3 * i + 2]=i1 + 1;
    addEdge(i0,i1,i == 0,false);
    addEdge(i1,i1 + 1,false,false);
  }
  indCount+=3 * sphereDetailU;
  int offset=0;
  for (int j=2; j < sphereDetailV; j++) {
    offset+=sphereDetailU;
    vert0=vertCount;
    u=1;
    v-=dv;
    for (int i=0; i < sphereDetailU; i++) {
      int ioff=offset + i;
      addVertex(r * sphereX[ioff],r * sphereY[ioff],r * sphereZ[ioff],sphereX[ioff],sphereY[ioff],sphereZ[ioff],u,v,VERTEX);
      u-=du;
    }
    vertCount+=sphereDetailU;
    vert1=vertCount;
    addVertex(r * sphereX[offset],r * sphereY[offset],r * sphereZ[offset],sphereX[offset],sphereY[offset],sphereZ[offset],u,v,VERTEX);
    vertCount++;
    for (int i=0; i < sphereDetailU; i++) {
      int i1=vert0 + i;
      int i0=vert0 + i - sphereDetailU - 1;
      indices[indCount + 6 * i + 0]=i1;
      indices[indCount + 6 * i + 1]=i0;
      indices[indCount + 6 * i + 2]=i0 + 1;
      indices[indCount + 6 * i + 3]=i1;
      indices[indCount + 6 * i + 4]=i0 + 1;
      indices[indCount + 6 * i + 5]=i1 + 1;
      addEdge(i0,i1,false,false);
      addEdge(i1,i1 + 1,false,false);
      addEdge(i0 + 1,i1,false,false);
    }
    indCount+=6 * sphereDetailU;
    indices[indCount + 0]=vert1;
    indices[indCount + 1]=vert1 - sphereDetailU;
    indices[indCount + 2]=vert1 - 1;
    indCount+=3;
    addEdge(vert1 - sphereDetailU,vert1 - 1,false,false);
    addEdge(vert1 - 1,vert1,false,false);
  }
  u=1;
  v=0;
  for (int i=0; i < sphereDetailU; i++) {
    addVertex(0,-r,0,0,-1,0,u,v,VERTEX);
    u-=du;
  }
  vertCount+=sphereDetailU;
  for (int i=0; i < sphereDetailU; i++) {
    int i0=vert0 + i;
    int i1=vert0 + i + sphereDetailU+ 1;
    indices[indCount + 3 * i + 0]=i0;
    indices[indCount + 3 * i + 1]=i1;
    indices[indCount + 3 * i + 2]=i0 + 1;
    addEdge(i0,i0 + 1,false,false);
    addEdge(i0,i1,false,i == sphereDetailU - 1);
  }
  indCount+=3 * sphereDetailU;
  return indices;
}
