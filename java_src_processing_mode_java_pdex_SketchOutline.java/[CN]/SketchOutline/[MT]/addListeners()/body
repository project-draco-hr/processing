{
  searchField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent evt){
      if (soTree.getRowCount() == 0)       return;
      internalSelection=true;
      if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        close();
      }
 else       if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        if (soTree.getLastSelectedPathComponent() != null) {
          DefaultMutableTreeNode tnode=(DefaultMutableTreeNode)soTree.getLastSelectedPathComponent();
          if (tnode.getUserObject() instanceof ASTNodeWrapper) {
            ASTNodeWrapper awrap=(ASTNodeWrapper)tnode.getUserObject();
            awrap.highlightNode(editor);
            close();
          }
        }
      }
 else       if (evt.getKeyCode() == KeyEvent.VK_UP) {
        if (soTree.getLastSelectedPathComponent() == null) {
          soTree.setSelectionRow(0);
          return;
        }
        int x=soTree.getLeadSelectionRow() - 1;
        int step=jsp.getVerticalScrollBar().getMaximum() / soTree.getRowCount();
        if (x == -1) {
          x=soTree.getRowCount() - 1;
          jsp.getVerticalScrollBar().setValue(jsp.getVerticalScrollBar().getMaximum());
        }
 else {
          jsp.getVerticalScrollBar().setValue((jsp.getVerticalScrollBar().getValue() - step));
        }
        soTree.setSelectionRow(x);
      }
 else       if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
        if (soTree.getLastSelectedPathComponent() == null) {
          soTree.setSelectionRow(0);
          return;
        }
        int x=soTree.getLeadSelectionRow() + 1;
        int step=jsp.getVerticalScrollBar().getMaximum() / soTree.getRowCount();
        if (x == soTree.getRowCount()) {
          x=0;
          jsp.getVerticalScrollBar().setValue(jsp.getVerticalScrollBar().getMinimum());
        }
 else {
          jsp.getVerticalScrollBar().setValue((jsp.getVerticalScrollBar().getValue() + step));
        }
        soTree.setSelectionRow(x);
      }
    }
  }
);
  searchField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      updateSelection();
    }
    public void removeUpdate(    DocumentEvent e){
      updateSelection();
    }
    public void changedUpdate(    DocumentEvent e){
      updateSelection();
    }
    private void updateSelection(){
      SwingWorker<Object,Object> worker=new SwingWorker<Object,Object>(){
        protected Object doInBackground() throws Exception {
          String text=searchField.getText().toLowerCase();
          tempNode=new DefaultMutableTreeNode();
          filterTree(text,tempNode,soNode);
          return null;
        }
        protected void done(){
          soTree.setModel(new DefaultTreeModel(tempNode));
          ((DefaultTreeModel)soTree.getModel()).reload();
          for (int i=0; i < soTree.getRowCount(); i++) {
            soTree.expandRow(i);
          }
          internalSelection=true;
          soTree.setSelectionRow(0);
        }
      }
;
      worker.execute();
    }
  }
);
  frmOutlineView.addWindowFocusListener(new WindowFocusListener(){
    public void windowLostFocus(    WindowEvent e){
      close();
    }
    public void windowGainedFocus(    WindowEvent e){
    }
  }
);
  soTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      if (internalSelection) {
        internalSelection=(false);
        return;
      }
      scrollToNode();
    }
  }
);
  soTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent me){
      scrollToNode();
    }
  }
);
}
