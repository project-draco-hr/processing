{
  if (curveDrawMatrix == null) {
    curveBasisMatrix=new PMatrix3D();
    curveDrawMatrix=new PMatrix3D();
    curveInited=true;
  }
  float s=curveTightness;
  curveBasisMatrix.set((s - 1) / 2f,(s + 3) / 2f,(-3 - s) / 2f,(1 - s) / 2f,(1 - s),(-5 - s) / 2f,(s + 2),(s - 1) / 2f,(s - 1) / 2f,0,(1 - s) / 2f,0,0,1,0,0);
  pg.splineForward(curveDetail,curveDrawMatrix);
  if (bezierBasisInverse == null) {
    bezierBasisInverse=pg.bezierBasisMatrix.get();
    bezierBasisInverse.invert();
    curveToBezierMatrix=new PMatrix3D();
  }
  curveToBezierMatrix.set(curveBasisMatrix);
  curveToBezierMatrix.preApply(bezierBasisInverse);
  curveDrawMatrix.apply(curveBasisMatrix);
}
