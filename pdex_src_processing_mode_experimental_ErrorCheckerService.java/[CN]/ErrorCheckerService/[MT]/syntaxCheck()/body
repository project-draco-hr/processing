{
  syntaxErrors.set(true);
  containsErrors.set(true);
  parser.setSource(sourceCode.toCharArray());
  parser.setKind(ASTParser.K_COMPILATION_UNIT);
  Map<String,String> options=JavaCore.getOptions();
  JavaCore.setComplianceOptions(JavaCore.VERSION_1_6,options);
  options.put(JavaCore.COMPILER_SOURCE,JavaCore.VERSION_1_6);
  options.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT,JavaCore.ENABLED);
  parser.setCompilerOptions(options);
  if (cu == null)   cu=(CompilationUnit)parser.createAST(null);
 else {
synchronized (cu) {
      cu=(CompilationUnit)parser.createAST(null);
    }
  }
  compilationUnitState=1;
synchronized (problemsList) {
    problems=cu.getProblems();
    problemsList=new ArrayList<Problem>();
    for (int i=0; i < problems.length; i++) {
      int a[]=calculateTabIndexAndLineNumber(problems[i].getSourceLineNumber());
      Problem p=new Problem(problems[i],a[0],a[1] + 1);
      problemsList.add(p);
    }
    if (problems.length == 0) {
      syntaxErrors.set(false);
      containsErrors.set(false);
    }
 else {
      CompilationUnit cuTemp=null;
      syntaxErrors.set(true);
      containsErrors.set(true);
    }
  }
}
