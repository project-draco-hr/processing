{
  this.sketch=sketch;
  this.buildPath=buildPath;
  String baseCommand[]=new String[]{"-classpath",sketch.getClassPath(),"-nowarn","-d",buildPath};
  String[] preprocNames=new String[sketch.getCodeCount()];
  int preprocCount=0;
  for (int i=0; i < sketch.getCodeCount(); i++) {
    if (sketch.getCode(i).preprocName != null) {
      preprocNames[preprocCount++]=sketch.getCode(i).preprocName;
    }
  }
  String[] command=new String[baseCommand.length + preprocCount];
  System.arraycopy(baseCommand,0,command,0,baseCommand.length);
  for (int i=0; i < preprocCount; i++) {
    command[baseCommand.length + i]=buildPath + File.separator + preprocNames[i];
  }
  firstErrorFound=false;
  secondErrorFound=false;
  int result=-1;
  try {
    final StringBuffer errorBuffer=new StringBuffer();
    Writer internalWriter=new Writer(){
      public void write(      char[] buf,      int off,      int len){
        errorBuffer.append(buf,off,len);
      }
      public void flush(){
      }
      public void close(){
      }
    }
;
    PrintWriter writer=new PrintWriter(internalWriter);
    result=com.sun.tools.javac.Main.compile(command,writer);
    writer.flush();
    writer.close();
    BufferedReader reader=new BufferedReader(new StringReader(errorBuffer.toString()));
    String line=null;
    while ((line=reader.readLine()) != null) {
      String errorFormat="([\\w\\d_]+.java):(\\d+):\\s*(.*)\\s*";
      String[] pieces=PApplet.match(line,errorFormat);
      if (pieces == null) {
        exception=new RunnerException("Cannot parse error text: " + line);
        exception.hideStackTrace();
        System.err.println(line);
        while ((line=reader.readLine()) != null) {
          System.err.println(line);
        }
        break;
      }
      String dotJavaFilename=pieces[0];
      int dotJavaLineIndex=PApplet.parseInt(pieces[1]) - 1;
      String errorMessage=pieces[2];
      int codeIndex=-1;
      int codeLine=-1;
      for (int i=0; i < sketch.getCodeCount(); i++) {
        String name=sketch.getCode(i).preprocName;
        if ((name != null) && dotJavaFilename.equals(name)) {
          codeIndex=i;
        }
      }
      if (codeIndex == 0) {
        for (int i=1; i < sketch.getCodeCount(); i++) {
          SketchCode code=sketch.getCode(i);
          if (code.flavor == Sketch.PDE) {
            if (code.preprocOffset <= dotJavaLineIndex) {
              codeIndex=i;
            }
          }
        }
      }
      codeLine=dotJavaLineIndex - sketch.getCode(codeIndex).preprocOffset;
      exception=new RunnerException(errorMessage,codeIndex,codeLine,-1);
      exception.hideStackTrace();
      if (errorMessage.equals("cannot find symbol")) {
        handleCannotFindSymbol(reader,exception);
      }
 else       if (errorMessage.startsWith("package") && errorMessage.endsWith("does not exist")) {
        exception=new RunnerException("P" + errorMessage.substring(1) + ". You might be missing a library.");
        exception.hideStackTrace();
      }
 else {
        exception=new RunnerException(errorMessage);
      }
      if (exception != null)       throw exception;
    }
  }
 catch (  IOException e) {
    String bigSigh="Error while compiling. (" + e.getMessage() + ")";
    exception=new RunnerException(bigSigh);
    e.printStackTrace();
  }
  return (result == 0);
}
