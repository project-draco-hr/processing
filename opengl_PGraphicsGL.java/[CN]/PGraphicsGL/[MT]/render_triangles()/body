{
  report("into triangles");
  for (int i=0; i < triangleCount; i++) {
    float a[]=vertices[triangles[i][VERTEX1]];
    float b[]=vertices[triangles[i][VERTEX2]];
    float c[]=vertices[triangles[i][VERTEX3]];
    int textureIndex=triangles[i][TEXTURE_INDEX];
    if (textureIndex != -1) {
      PImage texture=textures[textureIndex];
      report("before enable");
      report("after enable");
      ImageCache cash=(ImageCache)texture.cache;
      if (cash == null) {
        cache(texture);
        cash=(ImageCache)texture.cache;
      }
 else       if (texture.modified) {
        cash.update(texture);
        gl.glTexImage2D(GL.GL_TEXTURE_2D,0,4,cash.twidth,cash.theight,0,GL.GL_RGBA,GL.GL_UNSIGNED_BYTE,cash.tpixels);
        report("re-binding " + cash.twidth + " "+ cash.theight+ " "+ cash.tpixels);
        gl.glTexParameterf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_WRAP_S,GL.GL_CLAMP);
        gl.glTexParameterf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_WRAP_T,GL.GL_CLAMP);
        gl.glTexParameterf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MAG_FILTER,GL.GL_LINEAR);
        gl.glTexParameterf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MIN_FILTER,GL.GL_LINEAR);
        report("re-binding 3");
        gl.glTexEnvf(GL.GL_TEXTURE_ENV,GL.GL_TEXTURE_ENV_MODE,GL.GL_MODULATE);
        texture.modified=false;
      }
      report("before bind");
      int tindex=((ImageCache)texture.cache).tindex;
      gl.glBindTexture(GL.GL_TEXTURE_2D,tindex);
      report("after bind");
      float uscale=(float)texture.width / (float)cash.twidth;
      float vscale=(float)texture.height / (float)cash.theight;
      gl.glEnable(GL.GL_TEXTURE_2D);
      gl.glBegin(GL.GL_TRIANGLES);
      gl.glColor4f(a[R],a[G],a[B],a[A]);
      gl.glTexCoord2f(a[U] * uscale,a[V] * vscale);
      gl.glVertex3f(a[VX],a[VY],a[VZ]);
      gl.glColor4f(b[R],b[G],b[B],b[A]);
      gl.glTexCoord2f(b[U] * uscale,b[V] * vscale);
      gl.glVertex3f(b[VX],b[VY],b[VZ]);
      gl.glColor4f(c[R],c[G],c[B],c[A]);
      gl.glTexCoord2f(c[U] * uscale,c[V] * vscale);
      gl.glVertex3f(c[VX],c[VY],c[VZ]);
      gl.glEnd();
      report("non-binding 6");
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
 else {
      gl.glBegin(GL.GL_TRIANGLES);
      gl.glColor4f(a[R],a[G],a[B],a[A]);
      gl.glVertex3f(a[VX],a[VY],a[VZ]);
      gl.glColor4f(b[R],b[G],b[B],b[A]);
      gl.glVertex3f(b[VX],b[VY],b[VZ]);
      gl.glColor4f(c[R],c[G],c[B],c[A]);
      gl.glVertex3f(c[VX],c[VY],c[VZ]);
      gl.glEnd();
    }
  }
  report("out of triangles");
}
