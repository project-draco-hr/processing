{
  if (canvas == null) {
    GLCapabilities capabilities=new GLCapabilities();
    if (hints[ENABLE_OPENGL_2X_SMOOTH]) {
      capabilities.setSampleBuffers(true);
      capabilities.setNumSamples(2);
    }
 else     if (hints[ENABLE_OPENGL_4X_SMOOTH]) {
      capabilities.setSampleBuffers(true);
      capabilities.setNumSamples(4);
    }
    canvas=new GLCanvas(capabilities);
    canvas.addGLEventListener(new GLEventListener(){
      public void display(      GLAutoDrawable drawable){
        gl=drawable.getGL();
        parent.handleDisplay();
      }
      public void init(      GLAutoDrawable drawable){
      }
      public void displayChanged(      GLAutoDrawable drawable,      boolean modeChanged,      boolean deviceChanged){
      }
      public void reshape(      GLAutoDrawable drawable,      int x,      int y,      int w,      int h){
      }
    }
);
    if ((parent != null) && mainDrawingSurface) {
      parent.setLayout(null);
      parent.add(canvas);
      canvas.setBounds(0,0,width,height);
      canvas.addMouseListener(parent);
      canvas.addMouseMotionListener(parent);
      canvas.addKeyListener(parent);
      canvas.addFocusListener(parent);
    }
    gl=canvas.getGL();
    glu=new GLU();
    tobj=glu.gluNewTess();
    tessCallback=new TessCallback();
    glu.gluTessCallback(tobj,GLU.GLU_TESS_BEGIN,tessCallback);
    glu.gluTessCallback(tobj,GLU.GLU_TESS_END,tessCallback);
    glu.gluTessCallback(tobj,GLU.GLU_TESS_VERTEX,tessCallback);
    glu.gluTessCallback(tobj,GLU.GLU_TESS_COMBINE,tessCallback);
    glu.gluTessCallback(tobj,GLU.GLU_TESS_ERROR,tessCallback);
    lightBuffer=BufferUtil.newFloatBuffer(4);
    lightBuffer.put(3,1.0f);
    lightBuffer.rewind();
  }
 else {
    canvas.setSize(width,height);
  }
  canvas.requestFocus();
  defaultsInited=false;
}
