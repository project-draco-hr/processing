{
  report("render_triangles in");
  for (int i=0; i < triangleCount; i++) {
    float a[]=vertices[triangles[i][VERTEX1]];
    float b[]=vertices[triangles[i][VERTEX2]];
    float c[]=vertices[triangles[i][VERTEX3]];
    float ar=min(1,triangleColors[i][0][TRI_DIFFUSE_R] + triangleColors[i][0][TRI_SPECULAR_R]);
    float ag=min(1,triangleColors[i][0][TRI_DIFFUSE_G] + triangleColors[i][0][TRI_SPECULAR_G]);
    float ab=min(1,triangleColors[i][0][TRI_DIFFUSE_B] + triangleColors[i][0][TRI_SPECULAR_B]);
    float br=min(1,triangleColors[i][1][TRI_DIFFUSE_R] + triangleColors[i][1][TRI_SPECULAR_R]);
    float bg=min(1,triangleColors[i][1][TRI_DIFFUSE_G] + triangleColors[i][1][TRI_SPECULAR_G]);
    float bb=min(1,triangleColors[i][1][TRI_DIFFUSE_B] + triangleColors[i][1][TRI_SPECULAR_B]);
    float cr=min(1,triangleColors[i][2][TRI_DIFFUSE_R] + triangleColors[i][2][TRI_SPECULAR_R]);
    float cg=min(1,triangleColors[i][2][TRI_DIFFUSE_G] + triangleColors[i][2][TRI_SPECULAR_G]);
    float cb=min(1,triangleColors[i][2][TRI_DIFFUSE_B] + triangleColors[i][2][TRI_SPECULAR_B]);
    if (raw != null) {
      raw.colorMode(RGB,1);
      raw.noStroke();
      raw.beginShape(TRIANGLES);
    }
    int textureIndex=triangles[i][TEXTURE_INDEX];
    if (textureIndex != -1) {
      PImage texture=textures[textureIndex];
      report("before enable");
      gl.glEnable(GL.GL_TEXTURE_2D);
      report("after enable");
      ImageCache cash=(ImageCache)texture.cache;
      if (cash == null) {
        cash=new ImageCache();
        texture.cache=cash;
        texture.modified=true;
      }
      if (texture.modified) {
        cash.rebind(texture);
        texture.modified=false;
      }
 else {
        gl.glBindTexture(GL.GL_TEXTURE_2D,cash.tindex);
      }
      report("before bind");
      report("after bind");
      float uscale=(float)texture.width / (float)cash.twidth;
      float vscale=(float)texture.height / (float)cash.theight;
      gl.glBegin(GL.GL_TRIANGLES);
      gl.glColor4f(ar,ag,ab,a[A]);
      gl.glTexCoord2f(a[U] * uscale,a[V] * vscale);
      gl.glNormal3f(a[NX],a[NY],a[NZ]);
      gl.glVertex3f(a[VX],a[VY],a[VZ]);
      gl.glColor4f(br,bg,bb,b[A]);
      gl.glTexCoord2f(b[U] * uscale,b[V] * vscale);
      gl.glNormal3f(b[NX],b[NY],b[NZ]);
      gl.glVertex3f(b[VX],b[VY],b[VZ]);
      gl.glColor4f(cr,cg,cb,c[A]);
      gl.glTexCoord2f(c[U] * uscale,c[V] * vscale);
      gl.glNormal3f(c[NX],c[NY],c[NZ]);
      gl.glVertex3f(c[VX],c[VY],c[VZ]);
      gl.glEnd();
      report("non-binding 6");
      gl.glDisable(GL.GL_TEXTURE_2D);
      if (raw != null) {
        if (raw instanceof PGraphics3D) {
          if ((a[VW] != 0) && (b[VW] != 0) && (c[VW] != 0)) {
            raw.texture(texture);
            raw.fill(ar,ag,ab,a[A]);
            raw.vertex(a[VX] / a[VW],a[VY] / a[VW],a[VZ] / a[VW],a[U] * uscale,a[V] * vscale);
            raw.fill(br,bg,bb,b[A]);
            raw.vertex(b[VX] / b[VW],b[VY] / b[VW],b[VZ] / b[VW],b[U] * uscale,b[V] * vscale);
            raw.fill(cr,cg,cb,c[A]);
            raw.vertex(c[VX] / c[VW],c[VY] / c[VW],c[VZ] / c[VW],c[U] * uscale,c[V] * vscale);
          }
 else {
            raw.fill(ar,ag,ab,a[A]);
            raw.vertex(a[X],a[Y],a[U] * uscale,a[V] * vscale);
            raw.fill(br,bg,bb,b[A]);
            raw.vertex(b[X],b[Y],b[U] * uscale,b[V] * vscale);
            raw.fill(cr,cg,cb,c[A]);
            raw.vertex(c[X],c[Y],c[U] * uscale,c[V] * vscale);
          }
        }
      }
    }
 else {
      gl.glBegin(GL.GL_TRIANGLES);
      gl.glColor4f(ar,ag,ab,a[A]);
      gl.glNormal3f(a[NX],a[NY],a[NZ]);
      gl.glVertex3f(a[VX],a[VY],a[VZ]);
      gl.glColor4f(br,bg,bb,b[A]);
      gl.glNormal3f(b[NX],b[NY],b[NZ]);
      gl.glVertex3f(b[VX],b[VY],b[VZ]);
      gl.glColor4f(cr,cg,cb,c[A]);
      gl.glNormal3f(c[NX],c[NY],c[NZ]);
      gl.glVertex3f(c[VX],c[VY],c[VZ]);
      if (raw != null) {
        if (raw instanceof PGraphics3D) {
          if ((a[VW] != 0) && (b[VW] != 0) && (c[VW] != 0)) {
            raw.fill(ar,ag,ab,a[A]);
            raw.vertex(a[VX] / a[VW],a[VY] / a[VW],a[VZ] / a[VW]);
            raw.fill(br,bg,bb,b[A]);
            raw.vertex(b[VX] / b[VW],b[VY] / b[VW],b[VZ] / b[VW]);
            raw.fill(cr,cg,cb,c[A]);
            raw.vertex(c[VX] / c[VW],c[VY] / c[VW],c[VZ] / c[VW]);
          }
        }
 else {
          raw.fill(ar,ag,ab,a[A]);
          raw.vertex(a[X],a[Y]);
          raw.fill(br,bg,bb,b[A]);
          raw.vertex(b[X],b[Y]);
          raw.fill(cr,cg,cb,c[A]);
          raw.vertex(c[X],c[Y]);
        }
      }
      gl.glEnd();
    }
  }
  if (raw != null) {
    raw.endShape();
  }
  report("render_triangles out");
}
