{
  super(textArea,defaults);
  new Exception().printStackTrace(System.out);
  addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent evt){
      if (!getEditor().hasJavaTabs()) {
        if (evt.getButton() == MouseEvent.BUTTON1) {
          if ((evt.isControlDown() && !Base.isMacOS()) || evt.isMetaDown()) {
            handleCtrlClick(evt);
          }
        }
      }
    }
  }
);
  addMouseListener(new MouseAdapter(){
    long lastTime;
    public void mousePressed(    MouseEvent event){
      long thisTime=event.getWhen();
      if (thisTime - lastTime > 100) {
        if (event.getX() < Editor.LEFT_GUTTER) {
          int offset=getTextArea().xyToOffset(event.getX(),event.getY());
          if (offset >= 0) {
            int lineIndex=getTextArea().getLineOfOffset(offset);
            getEditor().toggleBreakpoint(lineIndex);
          }
        }
        lastTime=thisTime;
      }
    }
  }
);
  addMouseMotionListener(new MouseMotionAdapter(){
    @Override public void mouseMoved(    final MouseEvent evt){
      for (      ErrorLineCoord coord : errorLineCoords) {
        if (evt.getX() >= coord.xStart && evt.getX() <= coord.xEnd && evt.getY() >= coord.yStart && evt.getY() <= coord.yEnd + 2) {
          setToolTipText(coord.problem.getMessage());
          break;
        }
      }
    }
  }
);
  interactiveMode=false;
  cursorType=Cursor.DEFAULT_CURSOR;
}
