{
  final Sketch sketch=editor.getSketch();
  try {
    tempBuildFolder=createTempBuildFolder(sketch);
  }
 catch (  final IOException e) {
    editor.statusError(e);
    return null;
  }
  final File srcFolder=new File(tempBuildFolder,"src");
  if (processing.app.Base.DEBUG) {
    Base.openFolder(tempBuildFolder);
  }
  try {
    manifest=new Manifest(editor);
    sketch.prepare();
    if (!calcSketchSize()) {
      editor.statusError("Could not parse the size() command.");
      return null;
    }
    className=sketch.preprocess(srcFolder.getAbsolutePath(),manifest.getPackageName(),new Preproc(sketch.getName()));
    if (className != null) {
      File tempManifest=new File(tempBuildFolder,"AndroidManifest.xml");
      manifest.writeBuild(tempManifest,className,target.equals("debug"));
      writeBuildProps(new File(tempBuildFolder,"build.properties"));
      buildFile=new File(tempBuildFolder,"build.xml");
      writeBuildXML(buildFile,sketch.getName());
      writeDefaultProps(new File(tempBuildFolder,"default.properties"));
      writeLocalProps(new File(tempBuildFolder,"local.properties"));
      writeRes(new File(tempBuildFolder,"res"),className);
      final File libsFolder=mkdirs(tempBuildFolder,"libs");
      final File assetsFolder=mkdirs(tempBuildFolder,"assets");
      final InputStream input=PApplet.createInput(AndroidMode.getCoreZipLocation());
      PApplet.saveStream(new File(libsFolder,"processing-core.jar"),input);
      try {
        writeLibraries(libsFolder,assetsFolder);
        final File sketchDataFolder=sketch.getDataFolder();
        if (sketchDataFolder.exists()) {
          Base.copyDir(sketchDataFolder,assetsFolder);
        }
      }
 catch (      final IOException e) {
        e.printStackTrace();
        throw new RunnerException(e.getMessage());
      }
    }
  }
 catch (  final RunnerException e) {
    editor.statusError(e);
    return null;
  }
catch (  final IOException e) {
    editor.statusError(e);
    return null;
  }
  return tempBuildFolder;
}
