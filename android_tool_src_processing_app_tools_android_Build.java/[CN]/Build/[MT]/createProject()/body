{
  final Sketch sketch=editor.getSketch();
  try {
    androidFolder=createAndroidBuildFolder(sketch);
  }
 catch (  final IOException e) {
    editor.statusError(e);
    return false;
  }
  if (androidFolder.exists()) {
    final Date mod=new Date(androidFolder.lastModified());
    final File dest=new File(sketch.getFolder(),"android." + dateFormat.format(mod));
    final boolean result=androidFolder.renameTo(dest);
    if (!result) {
      final int exitValue;
      final ProcessHelper mv;
      try {
        System.err.println("createProject renameTo() failed, resorting to mv/move instead.");
        mv=new ProcessHelper("mv",androidFolder.getAbsolutePath(),dest.getAbsolutePath());
        exitValue=mv.execute();
      }
 catch (      final IOException e) {
        editor.statusError(e);
        return false;
      }
catch (      final InterruptedException e) {
        e.printStackTrace();
        return false;
      }
      if (exitValue != 0) {
        mv.dump();
        Base.showWarning("Failed to rename","Could not rename the old ???android??? build folder.\n" + "Please delete, close, or rename the folder\n" + androidFolder.getAbsolutePath() + "\n"+ "and try again.",null);
        Base.openFolder(sketch.getFolder());
        return false;
      }
    }
  }
 else {
    final boolean result=androidFolder.mkdirs();
    if (!result) {
      Base.showWarning("Folders, folders, folders","Could not create the necessary folders to build.\n" + "Perhaps you have some file permissions to sort out?",null);
      return false;
    }
  }
  final File srcFolder=new File(androidFolder,"src");
  try {
    final File javaFolder=mkdirs(srcFolder,getPackageName().replace('.','/'));
    final String buildPath=javaFolder.getAbsolutePath();
    sketch.prepare();
    className=sketch.preprocess(buildPath,new Preproc());
    if (className != null) {
      final File androidXML=new File(androidFolder,"AndroidManifest.xml");
      writeAndroidManifest(androidXML,sketch.getName(),className);
      writeBuildProps(new File(androidFolder,"build.properties"));
      buildFile=new File(androidFolder,"build.xml");
      writeBuildXML(buildFile,sketch.getName());
      writeDefaultProps(new File(androidFolder,"default.properties"));
      writeLocalProps(new File(androidFolder,"local.properties"));
      writeRes(new File(androidFolder,"res"),className);
      final File libsFolder=mkdirs(androidFolder,"libs");
      final File assetsFolder=mkdirs(androidFolder,"assets");
      final InputStream input=PApplet.createInput(AndroidTool.getCoreZipFile());
      PApplet.saveStream(new File(libsFolder,"processing-core.jar"),input);
      try {
        writeLibraries(libsFolder,assetsFolder);
        final File sketchDataFolder=sketch.getDataFolder();
        if (sketchDataFolder.exists()) {
          Base.copyDir(sketchDataFolder,assetsFolder);
        }
      }
 catch (      final IOException e) {
        e.printStackTrace();
        throw new RunnerException(e.getMessage());
      }
    }
  }
 catch (  final RunnerException e) {
    editor.statusError(e);
    return false;
  }
  return true;
}
