{
  searchField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent evt){
      internalSelection.set(true);
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        if (soTree.getLastSelectedPathComponent() != null) {
          DefaultMutableTreeNode tnode=(DefaultMutableTreeNode)soTree.getLastSelectedPathComponent();
          if (tnode.getUserObject() != null) {
            if (tnode.getUserObject() instanceof ASTNodeWrapper) {
              ASTNodeWrapper awrap=(ASTNodeWrapper)tnode.getUserObject();
              errorCheckerService.highlightNode(awrap);
            }
          }
        }
        return;
      }
 else       if (evt.getKeyCode() == KeyEvent.VK_UP) {
        if (soTree.getLastSelectedPathComponent() == null) {
          internalSelection.set(true);
          soTree.setSelectionRow(0);
        }
        int x=soTree.getLeadSelectionRow() - 1;
        internalSelection.set(true);
        int step=jsp.getVerticalScrollBar().getMaximum() / soTree.getRowCount();
        log("ss " + step);
        if (x == -1) {
          x=tempNode.getChildCount() - 1;
          soTree.setSelectionRow(x);
          jsp.getVerticalScrollBar().setValue(step * soTree.getRowCount());
        }
 else {
          soTree.setSelectionRow(x);
          jsp.getVerticalScrollBar().setValue((jsp.getVerticalScrollBar().getValue() - step));
        }
        return;
      }
 else       if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
        if (soTree.getLastSelectedPathComponent() == null) {
          internalSelection.set(true);
          soTree.setSelectionRow(0);
        }
        int x=soTree.getLeadSelectionRow() + 1;
        internalSelection.set(true);
        int step=jsp.getVerticalScrollBar().getMaximum() / soTree.getRowCount();
        log("ss" + step);
        if (x == tempNode.getChildCount()) {
          x=0;
          jsp.getVerticalScrollBar().setValue(0);
        }
 else {
          jsp.getVerticalScrollBar().setValue((jsp.getVerticalScrollBar().getValue() + step));
        }
        soTree.setSelectionRow(x);
        return;
      }
      SwingWorker worker=new SwingWorker(){
        protected Object doInBackground() throws Exception {
          return null;
        }
        protected void done(){
          String text=searchField.getText().toLowerCase();
          tempNode=new DefaultMutableTreeNode();
          filterTree(text,tempNode,soNode);
          soTree.setModel(new DefaultTreeModel(tempNode));
          ((DefaultTreeModel)soTree.getModel()).reload();
          for (int i=0; i < soTree.getRowCount(); i++) {
            soTree.expandRow(i);
          }
          internalSelection.set(true);
          soTree.setSelectionRow(0);
        }
      }
;
      worker.execute();
    }
  }
);
  frmOutlineView.addWindowFocusListener(new WindowFocusListener(){
    public void windowLostFocus(    WindowEvent e){
      frmOutlineView.setVisible(false);
      frmOutlineView.dispose();
    }
    public void windowGainedFocus(    WindowEvent e){
    }
  }
);
  soTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      if (internalSelection.get()) {
        internalSelection.set(false);
        return;
      }
      log(e);
      SwingWorker worker=new SwingWorker(){
        protected Object doInBackground() throws Exception {
          return null;
        }
        protected void done(){
          if (soTree.getLastSelectedPathComponent() == null) {
            return;
          }
          DefaultMutableTreeNode tnode=(DefaultMutableTreeNode)soTree.getLastSelectedPathComponent();
          if (tnode.getUserObject() == null) {
            return;
          }
          if (tnode.getUserObject() instanceof ASTNodeWrapper) {
            ASTNodeWrapper awrap=(ASTNodeWrapper)tnode.getUserObject();
            errorCheckerService.highlightNode(awrap);
          }
        }
      }
;
      worker.execute();
    }
  }
);
  soTree.addMouseListener(new MouseAdapter(){
  }
);
}
