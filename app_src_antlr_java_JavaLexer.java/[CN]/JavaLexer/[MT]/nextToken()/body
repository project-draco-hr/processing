{
  tryAgain:   for (; ; ) {
    int _ttype=Token.INVALID_TYPE;
    resetText();
    try {
      try {
switch (LA(1)) {
case '?':
{
            mQUESTION(true);
            break;
          }
case '(':
{
          mLPAREN(true);
          break;
        }
case ')':
{
        mRPAREN(true);
        break;
      }
case '[':
{
      mLBRACK(true);
      break;
    }
case ']':
{
    mRBRACK(true);
    break;
  }
case '{':
{
  mLCURLY(true);
  break;
}
case '}':
{
mRCURLY(true);
break;
}
case ':':
{
mCOLON(true);
break;
}
case ',':
{
mCOMMA(true);
break;
}
case '~':
{
mBNOT(true);
break;
}
case ';':
{
mSEMI(true);
break;
}
case '\t':
case '\n':
case '\u000c':
case '\r':
case ' ':
{
mWS(true);
break;
}
case '\'':
{
mCHAR_LITERAL(true);
break;
}
case '"':
{
mSTRING_LITERAL(true);
break;
}
case '$':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
case 'G':
case 'H':
case 'I':
case 'J':
case 'K':
case 'L':
case 'M':
case 'N':
case 'O':
case 'P':
case 'Q':
case 'R':
case 'S':
case 'T':
case 'U':
case 'V':
case 'W':
case 'X':
case 'Y':
case 'Z':
case '_':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
{
mIDENT(true);
break;
}
case '.':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
mNUM_INT(true);
break;
}
default :
if ((LA(1) == '>') && (LA(2) == '>') && (LA(3) == '>')&& (LA(4) == '=')) {
mBSR_ASSIGN(true);
}
 else if ((LA(1) == '>') && (LA(2) == '>') && (LA(3) == '=')) {
mSR_ASSIGN(true);
}
 else if ((LA(1) == '>') && (LA(2) == '>') && (LA(3) == '>')&& (true)) {
mBSR(true);
}
 else if ((LA(1) == '<') && (LA(2) == '<') && (LA(3) == '=')) {
mSL_ASSIGN(true);
}
 else if ((LA(1) == '=') && (LA(2) == '=')) {
mEQUAL(true);
}
 else if ((LA(1) == '!') && (LA(2) == '=')) {
mNOT_EQUAL(true);
}
 else if ((LA(1) == '/') && (LA(2) == '=')) {
mDIV_ASSIGN(true);
}
 else if ((LA(1) == '+') && (LA(2) == '=')) {
mPLUS_ASSIGN(true);
}
 else if ((LA(1) == '+') && (LA(2) == '+')) {
mINC(true);
}
 else if ((LA(1) == '-') && (LA(2) == '=')) {
mMINUS_ASSIGN(true);
}
 else if ((LA(1) == '-') && (LA(2) == '-')) {
mDEC(true);
}
 else if ((LA(1) == '*') && (LA(2) == '=')) {
mSTAR_ASSIGN(true);
}
 else if ((LA(1) == '%') && (LA(2) == '=')) {
mMOD_ASSIGN(true);
}
 else if ((LA(1) == '>') && (LA(2) == '>') && (true)) {
mSR(true);
}
 else if ((LA(1) == '>') && (LA(2) == '=')) {
mGE(true);
}
 else if ((LA(1) == '<') && (LA(2) == '<') && (true)) {
mSL(true);
}
 else if ((LA(1) == '<') && (LA(2) == '=')) {
mLE(true);
}
 else if ((LA(1) == '^') && (LA(2) == '=')) {
mBXOR_ASSIGN(true);
}
 else if ((LA(1) == '|') && (LA(2) == '=')) {
mBOR_ASSIGN(true);
}
 else if ((LA(1) == '|') && (LA(2) == '|')) {
mLOR(true);
}
 else if ((LA(1) == '&') && (LA(2) == '=')) {
mBAND_ASSIGN(true);
}
 else if ((LA(1) == '&') && (LA(2) == '&')) {
mLAND(true);
}
 else if ((LA(1) == '/') && (LA(2) == '/')) {
mSL_COMMENT(true);
}
 else if ((LA(1) == '/') && (LA(2) == '*')) {
mML_COMMENT(true);
}
 else if ((LA(1) == '=') && (true)) {
mASSIGN(true);
}
 else if ((LA(1) == '!') && (true)) {
mLNOT(true);
}
 else if ((LA(1) == '/') && (true)) {
mDIV(true);
}
 else if ((LA(1) == '+') && (true)) {
mPLUS(true);
}
 else if ((LA(1) == '-') && (true)) {
mMINUS(true);
}
 else if ((LA(1) == '*') && (true)) {
mSTAR(true);
}
 else if ((LA(1) == '%') && (true)) {
mMOD(true);
}
 else if ((LA(1) == '>') && (true)) {
mGT(true);
}
 else if ((LA(1) == '<') && (true)) {
mLT(true);
}
 else if ((LA(1) == '^') && (true)) {
mBXOR(true);
}
 else if ((LA(1) == '|') && (true)) {
mBOR(true);
}
 else if ((LA(1) == '&') && (true)) {
mBAND(true);
}
 else {
if (LA(1) == EOF_CHAR) {
uponEOF();
_returnToken=makeToken(Token.EOF_TYPE);
}
 else {
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
if (_returnToken == null) continue tryAgain;
_ttype=_returnToken.getType();
_returnToken.setType(_ttype);
return _returnToken;
}
 catch (RecognitionException e) {
throw new TokenStreamRecognitionException(e);
}
}
 catch (CharStreamException cse) {
if (cse instanceof CharStreamIOException) {
throw new TokenStreamIOException(((CharStreamIOException)cse).io);
}
 else {
throw new TokenStreamException(cse.getMessage());
}
}
}
}
