{
  if (2 < num) {
    PGraphics.showWarning("A3D: multitexture blending currently supports only two textures.");
    return;
  }
  if (!texenvCrossbarSupported) {
    PGraphics.showWarning("A3D: Texture environment crossbar not supported, so the textures won't be affected by tint or light.");
    if (texBlendMode == REPLACE) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
      gl11.glActiveTexture(GL11.GL_TEXTURE1);
      gl11.glBindTexture(textures[1].glTarget,textures[1].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
    }
 else     if (texBlendMode == BLEND) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
      gl11.glActiveTexture(GL11.GL_TEXTURE1);
      gl11.glBindTexture(textures[1].glTarget,textures[1].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_INTERPOLATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC2_RGB,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND2_RGB,GL11.GL_ONE_MINUS_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_INTERPOLATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC2_ALPHA,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND2_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    }
 else     if (texBlendMode == MULTIPLY) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
      gl11.glActiveTexture(GL11.GL_TEXTURE1);
      gl11.glBindTexture(textures[1].glTarget,textures[1].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_MODULATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_MODULATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
    }
 else     if (texBlendMode == ADD) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
      gl11.glActiveTexture(GL11.GL_TEXTURE1);
      gl11.glBindTexture(textures[1].glTarget,textures[1].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_ADD);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_ADD);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
    }
 else     if (texBlendMode == SUBTRACT) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_REPLACE);
      gl11.glActiveTexture(GL11.GL_TEXTURE1);
      gl11.glBindTexture(textures[1].glTarget,textures[1].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_SUBTRACT);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_ADD);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_PREVIOUS);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
    }
 else {
      PGraphics.showWarning("A3D: This blend mode is currently unsupported in multitexture mode.");
    }
  }
 else {
    if (texBlendMode == REPLACE) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_REPLACE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_REPLACE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      modulateWithPrimaryColor(1,textures[1]);
    }
 else     if (texBlendMode == BLEND) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_INTERPOLATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC2_RGB,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND2_RGB,GL11.GL_ONE_MINUS_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_INTERPOLATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC2_ALPHA,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND2_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
      modulateWithPrimaryColor(1,textures[1]);
    }
 else     if (texBlendMode == MULTIPLY) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_MODULATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_MODULATE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
      modulateWithPrimaryColor(1,textures[1]);
    }
 else     if (texBlendMode == ADD) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_ADD);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_ADD);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
      modulateWithPrimaryColor(1,textures[1]);
    }
 else     if (texBlendMode == SUBTRACT) {
      gl11.glActiveTexture(GL11.GL_TEXTURE0);
      gl11.glBindTexture(textures[0].glTarget,textures[0].glID);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_TEXTURE_ENV_MODE,GL11.GL_COMBINE);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_RGB,GL11.GL_SUBTRACT);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_RGB,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_RGB,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_RGB,GL11.GL_SRC_COLOR);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_COMBINE_ALPHA,GL11.GL_SUBTRACT);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC0_ALPHA,GL11.GL_TEXTURE0);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_SRC1_ALPHA,GL11.GL_TEXTURE1);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND0_ALPHA,GL11.GL_SRC_ALPHA);
      gl11.glTexEnvi(GL11.GL_TEXTURE_ENV,GL11.GL_OPERAND1_ALPHA,GL11.GL_SRC_ALPHA);
      modulateWithPrimaryColor(1,textures[1]);
    }
 else {
      PGraphics.showWarning("A3D: This blend mode is currently unsupported in multitexture mode.");
    }
  }
  gl.glDisable(GL10.GL_BLEND);
}
