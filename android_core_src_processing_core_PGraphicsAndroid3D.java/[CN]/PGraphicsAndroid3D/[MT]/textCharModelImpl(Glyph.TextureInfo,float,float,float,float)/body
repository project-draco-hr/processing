{
  if (textFont.currentTexID != tex.glid) {
    if (0 < textVertexCount) {
      renderTextModel();
      textVertexCount=0;
    }
    gl.glBindTexture(GL10.GL_TEXTURE_2D,tex.glid);
    textFont.currentTexID=tex.glid;
  }
  if (textVertexBuffer.capacity() < textVertexCount + 6) {
    expandTextBuffers();
  }
  int n=textVertexCount;
  textVertexArray[3 * n + 0]=toFixed32(x1);
  textVertexArray[3 * n + 1]=toFixed32(y1);
  textVertexArray[3 * n + 2]=toFixed32(0);
  textTexCoordArray[2 * n + 0]=toFixed32(tex.u0);
  textTexCoordArray[2 * n + 1]=toFixed32(tex.v0);
  n++;
  textVertexArray[3 * n + 0]=toFixed32(x2);
  textVertexArray[3 * n + 1]=toFixed32(y2);
  textVertexArray[3 * n + 2]=toFixed32(0);
  textTexCoordArray[2 * n + 0]=toFixed32(tex.u1);
  textTexCoordArray[2 * n + 1]=toFixed32(tex.v1);
  n++;
  textVertexArray[3 * n + 0]=toFixed32(x1);
  textVertexArray[3 * n + 1]=toFixed32(y2);
  textVertexArray[3 * n + 2]=toFixed32(0);
  textTexCoordArray[2 * n + 0]=toFixed32(tex.u0);
  textTexCoordArray[2 * n + 1]=toFixed32(tex.v1);
  n++;
  textVertexArray[3 * n + 0]=toFixed32(x1);
  textVertexArray[3 * n + 1]=toFixed32(y1);
  textVertexArray[3 * n + 2]=toFixed32(0);
  textTexCoordArray[2 * n + 0]=toFixed32(tex.u0);
  textTexCoordArray[2 * n + 1]=toFixed32(tex.v0);
  n++;
  textVertexArray[3 * n + 0]=toFixed32(x2);
  textVertexArray[3 * n + 1]=toFixed32(y1);
  textVertexArray[3 * n + 2]=toFixed32(0);
  textTexCoordArray[2 * n + 0]=toFixed32(tex.u1);
  textTexCoordArray[2 * n + 1]=toFixed32(tex.v0);
  n++;
  textVertexArray[3 * n + 0]=toFixed32(x2);
  textVertexArray[3 * n + 1]=toFixed32(y2);
  textVertexArray[3 * n + 2]=toFixed32(0);
  textTexCoordArray[2 * n + 0]=toFixed32(tex.u1);
  textTexCoordArray[2 * n + 1]=toFixed32(tex.v1);
  n++;
  textVertexCount=n;
}
