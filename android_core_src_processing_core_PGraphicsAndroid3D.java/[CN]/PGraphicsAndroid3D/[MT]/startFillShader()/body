{
  if (fillShader == null) {
    fillShader=new PShader(parent);
    fillShader.loadVertexShader(PGraphicsAndroid3D.class.getResource("FillShaderVert.glsl"));
    fillShader.loadFragmentShader(PGraphicsAndroid3D.class.getResource("FillShaderFrag.glsl"));
    fillShader.setup();
    fillModelviewLoc=fillShader.getUniformLocation("modelviewMatrix");
    fillProjectionLoc=fillShader.getUniformLocation("projectionMatrix");
    fillProjmodelviewLoc=fillShader.getUniformLocation("projmodelviewMatrix");
    fillNormalLoc=fillShader.getUniformLocation("normalMatrix");
    fillTexturedLoc=fillShader.getUniformLocation("textured");
    fillLightCountLoc=fillShader.getUniformLocation("lightCount");
    fillLightPositionLoc=fillShader.getUniformLocation("lightPosition");
    fillLightNormalLoc=fillShader.getUniformLocation("lightNormal");
    fillLightAmbientLoc=fillShader.getUniformLocation("lightAmbient");
    fillLightDiffuseLoc=fillShader.getUniformLocation("lightDiffuse");
    fillLightSpecularLoc=fillShader.getUniformLocation("lightSpecular");
    fillLightFalloffConstantLoc=fillShader.getUniformLocation("lightFalloffConstant");
    fillLightFalloffLinearLoc=fillShader.getUniformLocation("lightFalloffLinear");
    fillLightFalloffQuadraticLoc=fillShader.getUniformLocation("lightFalloffQuadratic");
    fillLightSpotAngleCosLoc=fillShader.getUniformLocation("lightSpotAngleCos");
    fillLightSpotConcentrationLoc=fillShader.getUniformLocation("lightSpotConcentration");
    fillVertexAttribLoc=fillShader.getAttribLocation("inVertex");
    fillColorAttribLoc=fillShader.getAttribLocation("inColor");
    fillNormalAttribLoc=fillShader.getAttribLocation("inNormal");
    fillTexCoordAttribLoc=fillShader.getAttribLocation("inTexcoord");
  }
  fillShader.start();
  modelview.get(glModelview);
  fillShader.set4x4MatUniform(fillModelviewLoc,glModelview);
  projection.get(glProjection);
  fillShader.set4x4MatUniform(fillProjectionLoc,glProjection);
  projmodelview.set(projection);
  projmodelview.apply(modelview);
  projmodelview.get(glProjmodelview);
  fillShader.set4x4MatUniform(fillProjmodelviewLoc,glProjmodelview);
  glNormal[0]=modelviewInv.m00;
  glNormal[1]=modelviewInv.m10;
  glNormal[2]=modelviewInv.m20;
  glNormal[3]=modelviewInv.m01;
  glNormal[4]=modelviewInv.m11;
  glNormal[5]=modelviewInv.m21;
  glNormal[6]=modelviewInv.m02;
  glNormal[7]=modelviewInv.m12;
  glNormal[8]=modelviewInv.m22;
  fillShader.set3x3MatUniform(fillNormalLoc,glNormal);
  fillShader.setIntUniform(fillLightCountLoc,lightCount);
  fillShader.set4FloatVecUniform(fillLightPositionLoc,lightPosition);
  fillShader.set3FloatVecUniform(fillLightNormalLoc,lightNormal);
  fillShader.set4FloatVecUniform(fillLightAmbientLoc,lightAmbient);
  fillShader.set4FloatVecUniform(fillLightDiffuseLoc,lightDiffuse);
  fillShader.set4FloatVecUniform(fillLightSpecularLoc,lightSpecular);
  fillShader.set1FloatVecUniform(fillLightFalloffConstantLoc,lightFalloffConstant);
  fillShader.set1FloatVecUniform(fillLightFalloffLinearLoc,lightFalloffLinear);
  fillShader.set1FloatVecUniform(fillLightFalloffQuadraticLoc,lightFalloffQuadratic);
  fillShader.set1FloatVecUniform(fillLightSpotAngleCosLoc,lightSpotAngleCos);
  fillShader.set1FloatVecUniform(fillLightSpotConcentrationLoc,lightSpotConcentration);
}
