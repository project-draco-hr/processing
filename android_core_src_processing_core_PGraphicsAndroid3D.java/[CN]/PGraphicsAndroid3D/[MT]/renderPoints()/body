{
  if (!pointVBOsCreated) {
    createPointBuffers();
    pointVBOsCreated=true;
  }
  int size, sizef, sizex;
  startPointShader();
  enablePointVertex();
  enablePointColor();
  enablePointNormal();
  enablePointSize();
  size=tessGeo.pointVertexCount;
  sizef=size * PGL.SIZEOF_FLOAT;
  pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glPointVertexBufferID);
  pgl.glBufferData(PGL.GL_ARRAY_BUFFER,3 * sizef,FloatBuffer.wrap(tessGeo.pointVertices,0,3 * size),vboMode);
  setPointVertexFormat(3,0);
  pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glPointColorBufferID);
  pgl.glBufferData(PGL.GL_ARRAY_BUFFER,4 * sizef,FloatBuffer.wrap(tessGeo.pointColors,0,4 * size),vboMode);
  setPointColorFormat(4,0);
  pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glPointNormalBufferID);
  pgl.glBufferData(PGL.GL_ARRAY_BUFFER,3 * sizef,FloatBuffer.wrap(tessGeo.pointNormals,0,3 * size),vboMode);
  setPointNormalFormat(3,0);
  pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,glPointAttribBufferID);
  pgl.glBufferData(PGL.GL_ARRAY_BUFFER,2 * sizef,FloatBuffer.wrap(tessGeo.pointAttributes,0,2 * size),vboMode);
  setPointSizeFormat(2,0);
  size=tessGeo.pointIndexCount;
  sizex=size * PGL.SIZEOF_INDEX;
  pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,glPointIndexBufferID);
  pgl.glBufferData(PGL.GL_ARRAY_BUFFER,sizex,ShortBuffer.wrap(tessGeo.pointIndices,0,size),vboMode);
  pgl.glDrawElements(PGL.GL_TRIANGLES,size,PGL.GL_UNSIGNED_SHORT,0);
  pgl.glBindBuffer(PGL.GL_ELEMENT_ARRAY_BUFFER,0);
  pgl.glBindBuffer(PGL.GL_ARRAY_BUFFER,0);
  disablePointVertex();
  disablePointColor();
  disablePointNormal();
  disablePointSize();
  stopPointShader();
}
