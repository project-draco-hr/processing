{
  VERTEXCOUNT=0;
  TRIANGLECOUNT=0;
  FACECOUNT=0;
  if (!primarySurface) {
    PGraphicsAndroid3D a3d=(PGraphicsAndroid3D)parent.g;
    a3d.saveGLState();
    for (int i=0; i < a3d.lightCount; i++) {
      a3d.glLightDisable(i);
    }
  }
  if (!settingsInited)   defaultSettings();
  resetMatrix();
  report("top beginDraw()");
  vertexBuffer.rewind();
  colorBuffer.rewind();
  texCoordBuffer.rewind();
  normalBuffer.rewind();
  textureImage=null;
  textureImagePrev=null;
  blend(BLEND);
  if (hints[DISABLE_DEPTH_TEST]) {
    gl.glDisable(GL10.GL_DEPTH_TEST);
  }
 else {
    gl.glEnable(GL10.GL_DEPTH_TEST);
  }
  gl.glDepthFunc(GL10.GL_LEQUAL);
  gl.glFrontFace(GL10.GL_CW);
  gl.glViewport(0,0,width,height);
  camera();
  perspective();
  lightCount=0;
  lightFalloff(1,0,0);
  lightSpecular(0,0,0);
  gl.glEnable(GL10.GL_COLOR_MATERIAL);
  gl.glEnable(GL10.GL_NORMALIZE);
  gl.glEnable(GL10.GL_RESCALE_NORMAL);
  shapeFirst=0;
  if (fbStack == null) {
    fbStack=new Stack<PFramebuffer>();
    screenFramebuffer=new PFramebuffer(parent,width,height,true);
    setFramebuffer(screenFramebuffer);
  }
  if (clear) {
    gl.glClearColor(0,0,0,0);
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  }
 else {
    if (fboSupported) {
      if (drawFramebuffer == null) {
        drawTexCrop=new int[4];
        drawTexCrop[0]=0;
        drawTexCrop[1]=0;
        drawTexCrop[2]=width;
        drawTexCrop[3]=height;
        drawImages=new PImage[2];
        drawImages[0]=parent.createImage(width,height,ARGB,NEAREST);
        drawImages[1]=parent.createImage(width,height,ARGB,NEAREST);
        drawTextures=new PTexture[2];
        drawTextures[0]=drawImages[0].getTexture();
        drawTextures[1]=drawImages[1].getTexture();
        drawIndex=0;
        drawFramebuffer=new PFramebuffer(parent,drawTextures[0].getGLWidth(),drawTextures[0].getGLHeight(),false);
        drawFramebuffer.addDepthBuffer(DEPTH_BITS);
        if (0 < STENCIL_BITS) {
          drawFramebuffer.addStencilBuffer(STENCIL_BITS);
        }
      }
      pushFramebuffer();
      setFramebuffer(drawFramebuffer);
      drawFramebuffer.addColorBuffer(drawTextures[drawIndex]);
      gl.glClearColor(0,0,0,0);
      gl.glClear(GL10.GL_DEPTH_BUFFER_BIT);
      renderDrawTexture((drawIndex + 1) % 2);
    }
 else {
      if (screenTexID[0] == 0) {
        createScreenTexture();
      }
      gl.glClearColor(0,0,0,0);
      gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
      drawScreenTexture();
    }
  }
  report("bot beginDraw()");
}
