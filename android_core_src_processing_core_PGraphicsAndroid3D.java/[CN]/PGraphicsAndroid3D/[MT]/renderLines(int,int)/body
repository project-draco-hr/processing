{
  report("render_lines in");
  float sw0=0;
  gl.glPushMatrix();
  gl.glScalef(1,-1,1);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
  for (int j=start; j < stop; j++) {
    int i=pathOffset[j];
    float sw=vertices[lines[i][VERTEX1]][SW];
    if (sw > 0) {
      gl.glLineWidth(sw);
      if (sw0 != sw && recordingModel) {
        int n0=recordedVertices.size();
        int n1=n0 + pathLength[j] - 1;
        for (int k=j + 1; k < stop; k++) {
          int i1=pathOffset[k];
          float sw1=vertices[lines[i1][VERTEX1]][SW];
          if (sw0 != sw1) {
            break;
          }
          n1=n0 + pathLength[k] - 1;
        }
        VertexGroup group=PShape3D.newVertexGroup(n0,n1,LINE_STRIP,sw,null);
        recordedGroups.add(group);
      }
      if (vertexBuffer.capacity() / 3 <= 3 * (pathLength[j] + 1)) {
        expandBuffers();
      }
      vertexBuffer.position(0);
      colorBuffer.position(0);
      float a[]=vertices[lines[i][VERTEX1]];
      if (recordingModel) {
        recordedVertices.add(new PVector(a[X],a[Y],a[Z]));
        recordedColors.add(new float[]{a[SR],a[SG],a[SB],a[SA]});
        recordedNormals.add(new PVector(0,0,0));
        recordedTexCoords.add(new PVector(0,0,0));
      }
 else {
        colorBuffer.put(toFixed32(a[SR]));
        colorBuffer.put(toFixed32(a[SG]));
        colorBuffer.put(toFixed32(a[SB]));
        colorBuffer.put(toFixed32(a[SA]));
        vertexBuffer.put(toFixed32(a[X]));
        vertexBuffer.put(toFixed32(a[Y]));
        vertexBuffer.put(toFixed32(a[Z]));
      }
      for (int k=0; k < pathLength[j]; k++) {
        float b[]=vertices[lines[i][VERTEX2]];
        if (recordingModel) {
          recordedVertices.add(new PVector(b[X],b[Y],b[Z]));
          recordedColors.add(new float[]{b[SR],b[SG],b[SB],b[SA]});
          recordedNormals.add(new PVector(0,0,0));
          recordedTexCoords.add(new PVector(0,0,0));
        }
 else {
          colorBuffer.put(toFixed32(b[SR]));
          colorBuffer.put(toFixed32(b[SG]));
          colorBuffer.put(toFixed32(b[SB]));
          colorBuffer.put(toFixed32(b[SA]));
          vertexBuffer.put(toFixed32(b[X]));
          vertexBuffer.put(toFixed32(b[Y]));
          vertexBuffer.put(toFixed32(b[Z]));
        }
        i++;
      }
      if (!recordingModel) {
        vertexBuffer.position(0);
        colorBuffer.position(0);
        gl.glVertexPointer(3,GL10.GL_FIXED,0,vertexBuffer);
        gl.glColorPointer(4,GL10.GL_FIXED,0,colorBuffer);
        gl.glDrawArrays(GL10.GL_LINE_STRIP,0,pathLength[j] + 1);
      }
    }
    sw0=sw;
  }
  gl.glPopMatrix();
  report("render_lines out");
}
