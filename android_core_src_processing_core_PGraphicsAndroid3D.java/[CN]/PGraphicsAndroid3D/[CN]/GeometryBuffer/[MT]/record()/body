{
  indicesBuffer.position(0);
  verticesBuffer.position(0);
  colorsBuffer.position(0);
  normalsBuffer.position(0);
  for (int t=0; t < texCount; t++) {
    texcoordsBuffer[t].position(0);
  }
  int v0=recordedVertices.size();
  Short idx;
  for (int i=0; i < idxCount; i++) {
    idx=new Short((short)(v0 + indicesBuffer.get()));
    recordedIndices.add(idx);
  }
  float[] c;
  float x, y, z;
  float nx, ny, nz;
  float u, v;
  for (int i=0; i < vertCount; i++) {
    x=toFloat32(verticesBuffer.get());
    y=toFloat32(verticesBuffer.get());
    z=toFloat32(verticesBuffer.get());
    recordedVertices.add(new PVector(x,y,z));
    nx=toFloat32(normalsBuffer.get());
    ny=toFloat32(normalsBuffer.get());
    nz=toFloat32(normalsBuffer.get());
    recordedNormals.add(new PVector(nx,ny,nz));
    c=new float[4];
    c[0]=toFloat32(colorsBuffer.get());
    c[1]=toFloat32(colorsBuffer.get());
    c[2]=toFloat32(colorsBuffer.get());
    c[3]=toFloat32(colorsBuffer.get());
    recordedColors.add(c);
    for (int t=0; t < texCount; t++) {
      u=toFloat32(texcoordsBuffer[t].get());
      v=toFloat32(texcoordsBuffer[t].get());
      recordedTexCoords[t].add(new PVector(u,v));
    }
  }
}
