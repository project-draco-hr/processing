{
  gl=igl;
  try {
    gl11=(GL11)gl;
  }
 catch (  ClassCastException cce) {
    gl11=null;
  }
  try {
    gl11x=(GL11Ext)gl;
  }
 catch (  ClassCastException cce) {
    gl11x=null;
  }
  try {
    gl11xp=(GL11ExtensionPack)gl;
  }
 catch (  ClassCastException cce) {
    gl11xp=null;
  }
  OPENGL_VENDOR=gl.glGetString(GL10.GL_VENDOR);
  OPENGL_RENDERER=gl.glGetString(GL10.GL_RENDERER);
  OPENGL_VERSION=gl.glGetString(GL10.GL_VERSION);
  npotTexSupported=false;
  mipmapSupported=false;
  matrixGetSupported=false;
  vboSupported=false;
  fboSupported=false;
  String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
  if (-1 < extensions.indexOf("texture_non_power_of_two")) {
    npotTexSupported=true;
  }
  if (-1 < extensions.indexOf("generate_mipmap")) {
    mipmapSupported=true;
  }
  if (-1 < extensions.indexOf("matrix_get")) {
    matrixGetSupported=true;
  }
  if (-1 < extensions.indexOf("vertex_buffer_object") || -1 < OPENGL_VERSION.indexOf("1.1") || -1 < OPENGL_VERSION.indexOf("2.")) {
    vboSupported=true;
  }
  if (-1 < extensions.indexOf("framebuffer_object") && gl11xp != null) {
    try {
      gl11xp.glCheckFramebufferStatusOES(GL11ExtensionPack.GL_FRAMEBUFFER_OES);
      fboSupported=true;
    }
 catch (    UnsupportedOperationException e) {
      fboSupported=false;
    }
  }
  if (gl11xp != null) {
    try {
      gl11xp.glBlendEquation(GL11ExtensionPack.GL_FUNC_ADD);
      blendEqSupported=true;
    }
 catch (    UnsupportedOperationException e) {
      blendEqSupported=false;
    }
  }
 else {
    blendEqSupported=false;
  }
  usingModelviewStack=gl11 == null || !matrixGetSupported;
  int temp[]=new int[2];
  gl.glGetIntegerv(GL10.GL_MAX_TEXTURE_SIZE,temp,0);
  maxTextureSize=temp[0];
  gl.glGetIntegerv(GL10.GL_ALIASED_LINE_WIDTH_RANGE,temp,0);
  maxLineWidth=temp[1];
  gl.glGetIntegerv(GL10.GL_ALIASED_POINT_SIZE_RANGE,temp,0);
  maxPointSize=temp[1];
  recreateResources();
  gl=null;
  gl11=null;
  gl11x=null;
  gl11xp=null;
}
