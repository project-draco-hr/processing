{
  this.contributionTab=contributionTab;
  this.filter=filter;
  setLayout(new GridBagLayout());
  setOpaque(true);
  setBackground(Color.WHITE);
  panelByContribution=new TreeMap<Contribution,ContributionPanel>(ContributionListing.COMPARATOR);
  model=new ContribTableModel();
  table=new JTable(model){
    @Override public Component prepareRenderer(    TableCellRenderer renderer,    int row,    int column){
      Component c=super.prepareRenderer(renderer,row,column);
      if (isRowSelected(row)) {
        c.setBackground(new Color(0xe0fffd));
      }
 else {
        c.setBackground(Color.white);
      }
      return c;
    }
  }
;
  String[] colName={" Status","Name","Author"};
  model.setColumnIdentifiers(colName);
  scrollPane=new JScrollPane(table);
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  table.setFillsViewportHeight(true);
  table.setDefaultRenderer(Contribution.class,new ContribStatusRenderer());
  table.setFont(Toolkit.getSansFont(14,Font.PLAIN));
  table.setRowHeight(28);
  table.setRowMargin(6);
  table.getColumnModel().setColumnMargin(0);
  table.getColumnModel().getColumn(0).setMaxWidth(ContributionManagerDialog.STATUS_WIDTH);
  table.getColumnModel().getColumn(2).setMinWidth(ContributionManagerDialog.AUTHOR_WIDTH);
  table.getColumnModel().getColumn(2).setMaxWidth(ContributionManagerDialog.AUTHOR_WIDTH);
  table.setShowGrid(false);
  table.setColumnSelectionAllowed(false);
  table.setCellSelectionEnabled(false);
  table.setAutoCreateColumnsFromModel(true);
  table.setAutoCreateRowSorter(false);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (table.getSelectedRow() != -1) {
        setSelectedPanel(panelByContribution.get(table.getValueAt(table.getSelectedRow(),0)));
        if (!contributionTab.filterField.hasFocus()) {
          table.requestFocusInWindow();
        }
      }
    }
  }
);
  TableRowSorter<TableModel> sorter=new TableRowSorter<TableModel>(table.getModel());
  table.setRowSorter(sorter);
  sorter.setComparator(1,ContributionListing.COMPARATOR);
  sorter.setComparator(2,new Comparator<Contribution>(){
    @Override public int compare(    Contribution o1,    Contribution o2){
      return getAuthorNameWithoutMarkup(o1.getAuthorList()).compareTo(getAuthorNameWithoutMarkup(o2.getAuthorList()));
    }
  }
);
  sorter.setComparator(0,new Comparator<Contribution>(){
    @Override public int compare(    Contribution o1,    Contribution o2){
      int pos1=0;
      if (o1.isInstalled()) {
        pos1=1;
        if (contribListing.hasUpdates(o1)) {
          pos1=2;
        }
        if (!o1.isCompatible(Base.getRevision())) {
          pos1=3;
        }
      }
 else {
        pos1=4;
      }
      int pos2=0;
      if (o2.isInstalled()) {
        pos2=1;
        if (contribListing.hasUpdates(o2)) {
          pos2=2;
        }
        if (!o2.isCompatible(Base.getRevision())) {
          pos2=3;
        }
      }
 else {
        pos2=4;
      }
      return pos1 - pos2;
    }
  }
);
  table.getTableHeader().setDefaultRenderer(new ContribHeaderRenderer());
  GroupLayout layout=new GroupLayout(this);
  layout.setHorizontalGroup(layout.createParallelGroup().addComponent(scrollPane));
  layout.setVerticalGroup(layout.createSequentialGroup().addComponent(scrollPane));
  this.setLayout(layout);
  table.setVisible(true);
}
