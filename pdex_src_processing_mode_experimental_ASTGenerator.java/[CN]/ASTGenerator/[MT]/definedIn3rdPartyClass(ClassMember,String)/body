{
  if (tehClass == null)   return null;
  System.out.println("definedIn3rdPartyClass-> Looking for " + memberName + " in "+ tehClass);
  if (tehClass.getASTNode() instanceof TypeDeclaration) {
    TypeDeclaration td=(TypeDeclaration)tehClass.getASTNode();
    for (int i=0; i < td.getFields().length; i++) {
      List<VariableDeclarationFragment> vdfs=td.getFields()[i].fragments();
      for (      VariableDeclarationFragment vdf : vdfs) {
        if (vdf.getName().toString().startsWith(memberName))         return new ClassMember(vdf);
      }
    }
    for (int i=0; i < td.getMethods().length; i++) {
      if (td.getMethods()[i].getName().toString().startsWith(memberName))       return new ClassMember(td.getMethods()[i]);
    }
    return null;
  }
  Class probableClass=null;
  if (tehClass.getClass_() != null) {
    probableClass=tehClass.getClass_();
  }
 else {
    probableClass=findClassIfExists(tehClass.getTypeAsString());
    System.out.println("Loaded " + probableClass.toString());
  }
  for (  Method method : probableClass.getMethods()) {
    if (method.getName().equals(memberName)) {
      return new ClassMember(method);
    }
  }
  for (  Field field : probableClass.getFields()) {
    if (field.getName().equals(memberName)) {
      return new ClassMember(field);
    }
  }
  return null;
}
