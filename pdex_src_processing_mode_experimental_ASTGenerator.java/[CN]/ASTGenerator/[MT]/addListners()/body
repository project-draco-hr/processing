{
  jtree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      System.out.println(e);
      SwingWorker worker=new SwingWorker(){
        @Override protected Object doInBackground() throws Exception {
          return null;
        }
        protected void done(){
          if (jtree.getLastSelectedPathComponent() == null) {
            return;
          }
          DefaultMutableTreeNode tnode=(DefaultMutableTreeNode)jtree.getLastSelectedPathComponent();
          if (tnode.getUserObject() == null) {
            return;
          }
          if (tnode.getUserObject() instanceof ASTNodeWrapper) {
            ASTNodeWrapper awrap=(ASTNodeWrapper)tnode.getUserObject();
            errorCheckerService.highlightNode(awrap);
          }
        }
      }
;
      worker.execute();
    }
  }
);
  renameButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      SwingWorker worker=new SwingWorker(){
        @Override protected Object doInBackground() throws Exception {
          return null;
        }
        protected void done(){
          if (editor.ta.getSelectedText() == null)           return;
          String selText=editor.ta.getSelectedText();
          int line=editor.ta.getSelectionStartLine();
          System.out.println(editor.ta.getSelectedText() + "<- offsets " + (line)+ ", "+ (editor.ta.getSelectionStart() - editor.ta.getLineStartOffset(line))+ ", "+ (editor.ta.getSelectionStop() - editor.ta.getLineStartOffset(line)));
          ASTNodeWrapper wnode=getASTNodeAt(line + errorCheckerService.mainClassOffset,selText,editor.ta.getSelectionStart() - editor.ta.getLineStartOffset(line),false);
          DefaultMutableTreeNode defCU=new DefaultMutableTreeNode(wnode);
          visitRecurNameOnly(defCU,wnode.getNode(),selText);
          System.out.println(wnode);
          renameTree.setModel(new DefaultTreeModel(defCU));
          ((DefaultTreeModel)renameTree.getModel()).reload();
        }
      }
;
      worker.execute();
    }
  }
);
  renameTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      System.out.println(e);
      SwingWorker worker=new SwingWorker(){
        @Override protected Object doInBackground() throws Exception {
          return null;
        }
        protected void done(){
          if (renameTree.getLastSelectedPathComponent() == null) {
            return;
          }
          DefaultMutableTreeNode tnode=(DefaultMutableTreeNode)renameTree.getLastSelectedPathComponent();
          if (tnode.getUserObject() == null) {
            return;
          }
          if (tnode.getUserObject() instanceof ASTNodeWrapper) {
            ASTNodeWrapper awrap=(ASTNodeWrapper)tnode.getUserObject();
            errorCheckerService.highlightNode(awrap);
          }
        }
      }
;
      worker.execute();
    }
  }
);
}
