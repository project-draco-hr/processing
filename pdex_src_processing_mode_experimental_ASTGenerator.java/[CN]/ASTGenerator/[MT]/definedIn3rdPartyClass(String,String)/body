{
  RegExpResourceFilter regExpResourceFilter;
  regExpResourceFilter=new RegExpResourceFilter(".*",className + ".class");
  String[] resources=classPath.findResources("",regExpResourceFilter);
  for (  String cn : resources) {
    System.out.println("-> " + cn);
  }
  if (resources.length == 0) {
    System.out.println("In GMFT(), couldn't find class: " + className);
    return null;
  }
  String matchedClass=resources[0];
  matchedClass=matchedClass.substring(0,matchedClass.length() - 6);
  matchedClass=matchedClass.replace('/','.');
  System.out.println("In GMFT(), Matched class: " + matchedClass);
  System.out.println("Looking for match " + memberName.toString());
  try {
    Class<?> probableClass=Class.forName(matchedClass,false,errorCheckerService.classLoader);
    for (    Method method : probableClass.getMethods()) {
      StringBuffer label=new StringBuffer(method.getName() + "(");
      for (int i=0; i < method.getParameterTypes().length; i++) {
        label.append(method.getParameterTypes()[i].getSimpleName());
        if (i < method.getParameterTypes().length - 1)         label.append(",");
      }
      label.append(")");
      if (label.toString().startsWith(memberName)) {
        return new ClassMember(method);
      }
    }
    for (    Field field : probableClass.getFields()) {
      if (field.getName().startsWith(memberName)) {
        return new ClassMember(field);
      }
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    System.out.println("Couldn't load " + matchedClass);
  }
  return null;
}
