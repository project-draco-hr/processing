{
  ASTParser parser=ASTParser.newParser(AST.JLS4);
  String source=readFile("/media/quarkninja/Work/TestStuff/low.java");
  parser.setSource(source.toCharArray());
  parser.setKind(ASTParser.K_COMPILATION_UNIT);
  Map<String,String> options=JavaCore.getOptions();
  JavaCore.setComplianceOptions(JavaCore.VERSION_1_6,options);
  options.put(JavaCore.COMPILER_SOURCE,JavaCore.VERSION_1_6);
  parser.setCompilerOptions(options);
  CompilationUnit cu=(CompilationUnit)parser.createAST(null);
  System.out.println(CompilationUnit.propertyDescriptors(AST.JLS4).size());
  DefaultMutableTreeNode astTree=new DefaultMutableTreeNode("CompilationUnit");
  System.err.println("Errors: " + cu.getProblems().length);
  visitRecur(cu,astTree);
  System.out.println(astTree.getChildCount());
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    JFrame frame2=new JFrame();
    JTree jtree=new JTree(astTree);
    frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame2.setBounds(new Rectangle(100,100,460,620));
    JScrollPane sp=new JScrollPane();
    sp.setViewportView(jtree);
    frame2.add(sp);
    frame2.setVisible(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  ASTNode found=NodeFinder.perform(cu,468,5);
  if (found != null) {
    System.out.println(found);
  }
}
