{
  SwingWorker worker=new SwingWorker(){
    @Override protected Object doInBackground() throws Exception {
      return null;
    }
    protected void done(){
      int lineNumber=line;
      if (errorCheckerService != null) {
        editor=errorCheckerService.getEditor();
        int codeIndex=editor.getSketch().getCodeIndex(editor.getCurrentTab());
        if (codeIndex > 0)         for (int i=0; i < codeIndex; i++) {
          SketchCode sc=editor.getSketch().getCode(i);
          int len=Base.countLines(sc.getProgram()) + 1;
          lineNumber+=len;
        }
      }
      ASTNode anode=null;
      ASTParser parser=ASTParser.newParser(AST.JLS4);
      parser.setKind(ASTParser.K_EXPRESSION);
      parser.setSource(word.toCharArray());
      ASTNode testnode=parser.createAST(null);
      System.out.print("Typed: " + word + "|");
      anode=findClosestNode(lineNumber,(ASTNode)compilationUnit.types().get(0));
      System.out.println(lineNumber + " Nearest ASTNode to PRED " + getNodeAsString(anode));
      ArrayList<String> candidates=new ArrayList<String>();
      if (testnode instanceof SimpleName) {
        anode=anode.getParent();
        while (anode != null) {
          List<StructuralPropertyDescriptor> sprops=anode.structuralPropertiesForType();
          for (          StructuralPropertyDescriptor sprop : sprops) {
            ASTNode cnode=null;
            if (!sprop.isChildListProperty()) {
              if (anode.getStructuralProperty(sprop) instanceof ASTNode) {
                cnode=(ASTNode)anode.getStructuralProperty(sprop);
                String[] types=checkForTypes(cnode);
                if (types != null) {
                  for (int i=0; i < types.length; i++) {
                    if (types[i].startsWith(word))                     candidates.add(types[i]);
                  }
                }
              }
            }
 else {
              List<ASTNode> nodelist=(List<ASTNode>)anode.getStructuralProperty(sprop);
              for (              ASTNode clnode : nodelist) {
                String[] types=checkForTypes(clnode);
                if (types != null) {
                  for (int i=0; i < types.length; i++) {
                    if (types[i].startsWith(word))                     candidates.add(types[i]);
                  }
                }
              }
            }
          }
          anode=anode.getParent();
        }
      }
 else {
        System.out.println("Not a SN " + getNodeAsString(testnode));
        ASTNode det=resolveExpression(anode,testnode);
        if (det != null) {
          TypeDeclaration td=null;
          if (det instanceof MethodDeclaration) {
            if (((MethodDeclaration)det).getReturnType2() instanceof SimpleType) {
              SimpleType stp=(SimpleType)(((MethodDeclaration)det).getReturnType2());
              td=(TypeDeclaration)findDeclaration(stp.getName());
            }
          }
 else           if (det instanceof FieldDeclaration) {
            if (((FieldDeclaration)det).getType() instanceof SimpleType) {
              SimpleType stp=(SimpleType)(((FieldDeclaration)det).getType());
              td=(TypeDeclaration)findDeclaration(stp.getName());
            }
          }
          System.out.println(getNodeAsString(det) + " defined in " + getNodeAsString(td));
          if (td != null) {
            for (int i=0; i < td.getFields().length; i++) {
              candidates.add(getNodeAsString(td.getFields()[i]));
            }
            for (int i=0; i < td.getMethods().length; i++) {
              candidates.add(getNodeAsString(td.getMethods()[i]));
            }
          }
        }
      }
      String[][] candi=new String[candidates.size()][1];
      for (int i=0; i < candi.length; i++) {
        candi[i][0]=candidates.get(i);
      }
      System.out.println("K = " + candidates.size());
      DefaultTableModel tm=new DefaultTableModel(candi,new String[]{"Suggestions"});
      tableAuto.setModel(tm);
      tableAuto.validate();
      tableAuto.repaint();
    }
  }
;
  worker.execute();
}
