{
  SwingWorker worker=new SwingWorker(){
    @Override protected Object doInBackground() throws Exception {
      return null;
    }
    protected void done(){
      String word2=word;
      boolean noCompare=false;
      if (word2.endsWith(".")) {
        word2=word2.substring(0,word.length() - 1);
        noCompare=true;
      }
      int lineNumber=line;
      if (errorCheckerService != null) {
        editor=errorCheckerService.getEditor();
        int codeIndex=editor.getSketch().getCodeIndex(editor.getCurrentTab());
        if (codeIndex > 0)         for (int i=0; i < codeIndex; i++) {
          SketchCode sc=editor.getSketch().getCode(i);
          int len=Base.countLines(sc.getProgram()) + 1;
          lineNumber+=len;
        }
      }
      ASTNode nearestNode=null;
      ASTParser parser=ASTParser.newParser(AST.JLS4);
      parser.setKind(ASTParser.K_EXPRESSION);
      parser.setSource(word2.toCharArray());
      ASTNode testnode=parser.createAST(null);
      System.err.print("Typed: " + word2 + "|");
      nearestNode=findClosestNode(lineNumber,(ASTNode)compilationUnit.types().get(0));
      if (nearestNode == null)       nearestNode=(ASTNode)compilationUnit.types().get(0);
      System.err.println(lineNumber + " Nearest ASTNode to PRED " + getNodeAsString(nearestNode));
      ArrayList<CompletionCandidate> candidates=new ArrayList<CompletionCandidate>();
      if (testnode instanceof SimpleName && !noCompare) {
        System.err.println("One word expression " + getNodeAsString(testnode));
        nearestNode=nearestNode.getParent();
        while (nearestNode != null) {
          if (nearestNode instanceof TypeDeclaration) {
            TypeDeclaration td=(TypeDeclaration)nearestNode;
            if (td.getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY) != null) {
              SimpleType st=(SimpleType)td.getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY);
              System.out.println("Superclass " + st.getName());
              for (              CompletionCandidate can : getMembersForType(st.getName().toString(),word2,noCompare,false)) {
                candidates.add(can);
              }
            }
          }
          List<StructuralPropertyDescriptor> sprops=nearestNode.structuralPropertiesForType();
          for (          StructuralPropertyDescriptor sprop : sprops) {
            ASTNode cnode=null;
            if (!sprop.isChildListProperty()) {
              if (nearestNode.getStructuralProperty(sprop) instanceof ASTNode) {
                cnode=(ASTNode)nearestNode.getStructuralProperty(sprop);
                CompletionCandidate[] types=checkForTypes(cnode);
                if (types != null) {
                  for (int i=0; i < types.length; i++) {
                    if (types[i].getElementName().startsWith(word2))                     candidates.add(types[i]);
                  }
                }
              }
            }
 else {
              List<ASTNode> nodelist=(List<ASTNode>)nearestNode.getStructuralProperty(sprop);
              for (              ASTNode clnode : nodelist) {
                CompletionCandidate[] types=checkForTypes(clnode);
                if (types != null) {
                  for (int i=0; i < types.length; i++) {
                    if (types[i].getElementName().startsWith(word2))                     candidates.add(types[i]);
                  }
                }
              }
            }
          }
          nearestNode=nearestNode.getParent();
        }
        if (candidates.isEmpty()) {
          System.out.println("Empty can. " + word2);
          RegExpResourceFilter regExpResourceFilter;
          regExpResourceFilter=new RegExpResourceFilter(".*",word2 + "[a-zA-Z_0-9]*.class");
          String[] resources=classPath.findResources("",regExpResourceFilter);
          for (          String matchedClass : resources) {
            matchedClass=matchedClass.substring(0,matchedClass.length() - 6);
            matchedClass=matchedClass.replace('/','.');
            int d=matchedClass.lastIndexOf('.');
            matchedClass=matchedClass.substring(d + 1);
            candidates.add(new CompletionCandidate(matchedClass));
          }
        }
      }
 else {
        System.err.println("Complex expression " + getNodeAsString(testnode));
        ASTNode det=resolveExpression(nearestNode,testnode,noCompare);
        System.err.println("DET " + getNodeAsString(det));
        if (det != null) {
          TypeDeclaration td=null;
          SimpleType stp=null;
          if (det instanceof MethodDeclaration) {
            if (((MethodDeclaration)det).getReturnType2() instanceof SimpleType) {
              stp=(SimpleType)(((MethodDeclaration)det).getReturnType2());
              td=(TypeDeclaration)findDeclaration(stp.getName());
            }
          }
 else           if (det instanceof FieldDeclaration) {
            if (((FieldDeclaration)det).getType() instanceof SimpleType) {
              stp=(SimpleType)(((FieldDeclaration)det).getType());
              td=(TypeDeclaration)findDeclaration(stp.getName());
            }
          }
 else           if (det instanceof VariableDeclarationStatement) {
            stp=(SimpleType)(((VariableDeclarationStatement)det).getType());
            td=(TypeDeclaration)findDeclaration(stp.getName());
          }
          System.out.println("ST is " + stp.getName());
          System.err.println(getNodeAsString(det) + " defined in " + getNodeAsString(td));
          ASTNode child=resolveChildExpression(testnode);
          if (td != null) {
            System.out.println("Completion candidate: " + getNodeAsString(child));
            for (int i=0; i < td.getFields().length; i++) {
              List<VariableDeclarationFragment> vdfs=td.getFields()[i].fragments();
              for (              VariableDeclarationFragment vdf : vdfs) {
                if (noCompare) {
                  candidates.add(new CompletionCandidate(getNodeAsString2(vdf)));
                }
 else                 if (vdf.getName().toString().startsWith(child.toString()))                 candidates.add(new CompletionCandidate(getNodeAsString2(vdf)));
              }
            }
            for (int i=0; i < td.getMethods().length; i++) {
              if (noCompare) {
                candidates.add(new CompletionCandidate(getNodeAsString2(td.getMethods()[i]),td.getName().toString(),"",CompletionCandidate.METHOD));
              }
 else               if (td.getMethods()[i].getName().toString().startsWith(child.toString()))               candidates.add(new CompletionCandidate(getNodeAsString2(td.getMethods()[i]),td.getName().toString(),"",CompletionCandidate.METHOD));
            }
          }
 else {
            if (stp != null) {
              candidates=getMembersForType(stp.getName().toString(),child.toString(),noCompare,false);
            }
          }
        }
 else         if (word.length() - word2.length() == 1) {
          System.out.println(word + " w2 " + word2);
          System.out.println("All members of " + word2);
          candidates=getMembersForType(word2,"",true,true);
        }
 else {
          System.out.println("Some members of " + word2);
          int x=word2.indexOf('.');
          if (x != -1) {
            candidates=getMembersForType(word2.substring(0,x),word2.substring(x + 1),false,true);
          }
        }
      }
      Collections.sort(candidates);
      CompletionCandidate[][] candi=new CompletionCandidate[candidates.size()][1];
      DefaultListModel defListModel=new DefaultListModel();
      for (int i=0; i < candi.length; i++) {
        candi[i][0]=candidates.get(i);
        defListModel.addElement(candidates.get(i));
      }
      System.out.println("K = " + candidates.size());
      DefaultTableModel tm=new DefaultTableModel(candi,new String[]{"Suggestions"});
      tableAuto.setModel(tm);
      tableAuto.validate();
      tableAuto.repaint();
      errorCheckerService.getEditor().textArea().showSuggestion(defListModel,word);
    }
  }
;
  worker.execute();
}
