{
  log("----getASTNodeAt----");
  if (errorCheckerService != null) {
    editor=errorCheckerService.getEditor();
    int codeIndex=editor.getSketch().getCodeIndex(editor.getCurrentTab());
    if (codeIndex > 0) {
      for (int i=0; i < codeIndex; i++) {
        SketchCode sc=editor.getSketch().getCode(i);
        int len=Base.countLines(sc.getProgram()) + 1;
        lineNumber+=len;
      }
    }
  }
  log("FLON: " + lineNumber);
  ASTNode lineNode=findLineOfNode(compilationUnit,lineNumber,offset,name);
  log("+> " + lineNode);
  ASTNode decl=null;
  String nodeLabel=null;
  String nameOfNode=null;
  if (lineNode != null) {
    ASTNodeWrapper lineNodeWrap=new ASTNodeWrapper(lineNode);
    int altOff=offset;
    int ret[][]=lineNodeWrap.getOffsetMapping(errorCheckerService);
    if (ret != null) {
      altOff=0;
      int javaCodeMap[]=ret[0], pdeCodeMap[]=ret[1];
      for (; altOff < javaCodeMap.length; altOff++) {
        if (javaCodeMap[altOff] == pdeCodeMap[offset]) {
          break;
        }
      }
    }
    log("FLON2: " + lineNumber + " LN spos "+ lineNode.getStartPosition()+ " off "+ offset+ " alt off"+ altOff);
    ASTNode parLineNode=lineNode.getParent();
    Iterator<StructuralPropertyDescriptor> it=parLineNode.structuralPropertiesForType().iterator();
    boolean flag=true;
    int offAdjust=0;
    while (it.hasNext() && flag) {
      StructuralPropertyDescriptor prop=(StructuralPropertyDescriptor)it.next();
      if (prop.isChildListProperty()) {
        List<ASTNode> nodelist=(List<ASTNode>)parLineNode.getStructuralProperty(prop);
        for (        ASTNode cnode : nodelist) {
          if (getLineNumber(cnode) == lineNumber) {
            if (cnode.getStartPosition() <= lineNode.getStartPosition() + altOff && cnode.getStartPosition() + cnode.getLength() > lineNode.getStartPosition() + altOff) {
              log(cnode);
              offAdjust=cnode.getStartPosition() - lineNode.getStartPosition();
              lineNode=cnode;
              altOff-=offAdjust;
              flag=false;
              break;
            }
          }
        }
      }
    }
    log("FLON3 " + lineNode.getStartPosition() + " off "+ offset+ " alt off"+ altOff);
    ASTNode simpName=pinpointOnLine(lineNode,altOff,lineNode.getStartPosition(),name);
    if (simpName == null) {
      log("1+++> " + simpName);
      simpName=pinpointOnLine(lineNode.getParent(),altOff,lineNode.getStartPosition(),name);
    }
    log("2+++> " + simpName);
    if (simpName == null && lineNode instanceof SimpleName) {
switch (lineNode.getParent().getNodeType()) {
case ASTNode.TYPE_DECLARATION:
case ASTNode.METHOD_DECLARATION:
case ASTNode.FIELD_DECLARATION:
case ASTNode.VARIABLE_DECLARATION_FRAGMENT:
        decl=lineNode.getParent();
      return new ASTNodeWrapper(decl,"");
default :
    break;
}
}
if (simpName instanceof SimpleName) {
nameOfNode=simpName.toString();
log(getNodeAsString(simpName));
decl=findDeclaration((SimpleName)simpName);
if (decl != null) {
  logE("DECLA: " + decl.getClass().getName());
  nodeLabel=getLabelIfType(new ASTNodeWrapper(decl),(SimpleName)simpName);
}
 else logE("null");
log(getNodeAsString(decl));
ASTNode nearestNode=findClosestNode(lineNumber,(ASTNode)compilationUnit.types().get(0));
ClassMember cmem=resolveExpression3rdParty(nearestNode,(SimpleName)simpName,false);
if (cmem != null) {
  log("CMEM-> " + cmem);
}
 else log("CMEM-> null");
}
}
if (decl != null && scrollOnly) {
ASTNode simpName2=getNodeName(decl,nameOfNode);
logE("FINAL String decl: " + getNodeAsString(decl));
logE("FINAL String label: " + getNodeAsString(simpName2));
ASTNodeWrapper declWrap=new ASTNodeWrapper(simpName2,nodeLabel);
if (!declWrap.highlightNode(this)) {
logE("Highlighting failed.");
}
}
return new ASTNodeWrapper(decl,nodeLabel);
}
