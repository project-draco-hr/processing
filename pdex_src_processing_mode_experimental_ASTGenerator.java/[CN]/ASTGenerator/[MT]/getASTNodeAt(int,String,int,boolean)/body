{
  System.out.println("----getASTNodeAt----");
  if (errorCheckerService != null) {
    editor=errorCheckerService.getEditor();
    int codeIndex=editor.getSketch().getCodeIndex(editor.getCurrentTab());
    if (codeIndex > 0) {
      for (int i=0; i < codeIndex; i++) {
        SketchCode sc=editor.getSketch().getCode(i);
        int len=Base.countLines(sc.getProgram()) + 1;
        lineNumber+=len;
      }
    }
  }
  System.out.println("FLON: " + lineNumber);
  ASTNode lineNode=findLineOfNode(compilationUnit,lineNumber,offset,name);
  System.out.println("+> " + lineNode);
  ASTNode decl=null;
  String nodeLabel=null;
  String nameOfNode=null;
  if (lineNode != null) {
    ASTNodeWrapper lineNodeWrap=new ASTNodeWrapper(lineNode);
    int altOff=offset;
    int ret[][]=lineNodeWrap.getOffsetMapping(errorCheckerService);
    if (ret != null) {
      altOff=0;
      int javaCodeMap[]=ret[0], pdeCodeMap[]=ret[1];
      for (; altOff < javaCodeMap.length; altOff++) {
        if (javaCodeMap[altOff] == pdeCodeMap[offset]) {
          break;
        }
      }
    }
    System.out.println("FLON2: " + lineNumber + " LN spos "+ lineNode.getStartPosition()+ " off "+ offset+ " alt off"+ altOff);
    ASTNode parLineNode=lineNode.getParent();
    Iterator<StructuralPropertyDescriptor> it=parLineNode.structuralPropertiesForType().iterator();
    boolean flag=true;
    int offAdjust=0;
    while (it.hasNext() && flag) {
      StructuralPropertyDescriptor prop=(StructuralPropertyDescriptor)it.next();
      if (prop.isChildListProperty()) {
        List<ASTNode> nodelist=(List<ASTNode>)parLineNode.getStructuralProperty(prop);
        for (        ASTNode cnode : nodelist) {
          if (getLineNumber(cnode) == lineNumber) {
            if (cnode.getStartPosition() <= lineNode.getStartPosition() + altOff && cnode.getStartPosition() + cnode.getLength() > lineNode.getStartPosition() + altOff) {
              System.out.println(cnode);
              offAdjust=cnode.getStartPosition() - lineNode.getStartPosition();
              lineNode=cnode;
              altOff-=offAdjust;
              flag=false;
              break;
            }
          }
        }
      }
    }
    System.out.println("FLON3 " + lineNode.getStartPosition() + " off "+ offset+ " alt off"+ altOff);
    ASTNode simpName=pinpointOnLine(lineNode,altOff,lineNode.getStartPosition(),name);
    System.out.println("+++> " + simpName);
    if (simpName instanceof SimpleName) {
      nameOfNode=simpName.toString();
      System.out.println(getNodeAsString(simpName));
      decl=findDeclaration((SimpleName)simpName);
      if (decl != null) {
        System.err.println("DECLA: " + decl.getClass().getName());
        nodeLabel=getLabelIfType(new ASTNodeWrapper(decl),(SimpleName)simpName);
      }
 else       System.err.println("null");
      System.out.println(getNodeAsString(decl));
      ASTNode nearestNode=findClosestNode(lineNumber,(ASTNode)compilationUnit.types().get(0));
      ClassMember cmem=resolveExpression3rdParty(nearestNode,(SimpleName)simpName,false);
      if (cmem != null) {
        System.out.println("CMEM-> " + cmem);
      }
 else       System.out.println("CMEM-> null");
    }
  }
  if (decl != null && scrollOnly) {
    ASTNode simpName2=getNodeName(decl,nameOfNode);
    System.err.println("FINAL String decl: " + getNodeAsString(decl));
    System.err.println("FINAL String label: " + getNodeAsString(simpName2));
    errorCheckerService.highlightNode(simpName2);
  }
  return new ASTNodeWrapper(decl,nodeLabel);
}
