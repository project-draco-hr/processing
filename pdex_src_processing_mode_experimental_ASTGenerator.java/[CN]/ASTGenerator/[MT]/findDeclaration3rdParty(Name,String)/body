{
  System.out.println("--findDec 3rd-- " + findMe + " , "+ parentClass);
  ClassMember declaringClass=null;
  ASTNode parent=findMe.getParent();
  ArrayList<Integer> constrains=new ArrayList<Integer>();
  if (parent.getNodeType() == ASTNode.METHOD_INVOCATION) {
    Expression exp=(Expression)((MethodInvocation)parent).getStructuralProperty(MethodInvocation.EXPRESSION_PROPERTY);
    if (((MethodInvocation)parent).getName().toString().equals(findMe.toString())) {
      constrains.add(ASTNode.METHOD_DECLARATION);
      if (exp != null) {
        constrains.add(ASTNode.TYPE_DECLARATION);
        System.out.println("MI EXP: " + exp.toString() + " of type "+ exp.getClass().getName()+ " parent: "+ exp.getParent());
        if (exp instanceof MethodInvocation) {
          declaringClass=findDeclaration3rdParty(((MethodInvocation)exp).getName(),parentClass);
          return definedIn3rdPartyClass(declaringClass,((MethodInvocation)parent).getName().toString());
        }
 else         if (exp instanceof FieldAccess) {
          declaringClass=findDeclaration3rdParty(((FieldAccess)exp).getName(),parentClass);
          return definedIn3rdPartyClass(declaringClass,((MethodInvocation)parent).getName().toString());
        }
        if (exp instanceof SimpleName) {
          SimpleType stp=extracTypeInfo(findDeclaration(((SimpleName)exp)));
          if (stp == null)           return null;
          System.out.println("3rdPa " + stp.getName());
          declaringClass=definedIn3rdPartyClass(stp.getName().toString(),"THIS");
          constrains.add(ASTNode.METHOD_DECLARATION);
          return definedIn3rdPartyClass(declaringClass,((MethodInvocation)parent).getName().toString());
        }
      }
    }
 else {
      parent=parent.getParent();
    }
  }
 else   if (parent.getNodeType() == ASTNode.FIELD_ACCESS) {
    FieldAccess fa=(FieldAccess)parent;
    Expression exp=fa.getExpression();
    if (fa.getName().toString().equals(findMe.toString())) {
      constrains.add(ASTNode.FIELD_DECLARATION);
      if (exp != null) {
        constrains.add(ASTNode.TYPE_DECLARATION);
        System.out.println("FA EXP: " + exp.toString() + " of type "+ exp.getClass().getName()+ " parent: "+ exp.getParent());
        if (exp instanceof MethodInvocation) {
          declaringClass=findDeclaration3rdParty(((MethodInvocation)exp).getName(),parentClass);
          return definedIn3rdPartyClass(declaringClass,fa.getName().toString());
        }
 else         if (exp instanceof FieldAccess) {
          declaringClass=findDeclaration3rdParty(((FieldAccess)exp).getName(),parentClass);
          constrains.add(ASTNode.TYPE_DECLARATION);
          return definedIn3rdPartyClass(declaringClass,fa.getName().toString());
        }
        if (exp instanceof SimpleName) {
          SimpleType stp=extracTypeInfo(findDeclaration(((SimpleName)exp)));
          if (stp == null)           return null;
          System.out.println("3rdPa " + stp.getName());
          declaringClass=definedIn3rdPartyClass(stp.getName().toString(),"THIS");
          constrains.add(ASTNode.METHOD_DECLARATION);
          return definedIn3rdPartyClass(declaringClass,fa.getName().toString());
        }
      }
    }
 else {
      parent=parent.getParent();
    }
  }
 else   if (parent.getNodeType() == ASTNode.QUALIFIED_NAME) {
    QualifiedName qn=(QualifiedName)parent;
    if (!findMe.toString().equals(qn.getQualifier().toString())) {
      SimpleType stp=extracTypeInfo(findDeclaration((qn.getQualifier())));
      System.out.println(qn.getQualifier() + "->" + qn.getName());
      constrains.clear();
      constrains.add(ASTNode.TYPE_DECLARATION);
      constrains.add(ASTNode.FIELD_DECLARATION);
      declaringClass=definedIn3rdPartyClass(stp.getName().toString(),"THIS");
      return definedIn3rdPartyClass(declaringClass,qn.getName().toString());
    }
 else {
      if (findMe instanceof QualifiedName) {
        QualifiedName qnn=(QualifiedName)findMe;
        System.out.println("findMe is a QN, " + (qnn.getQualifier().toString() + " other " + qnn.getName().toString()));
        SimpleType stp=extracTypeInfo(findDeclaration((qnn.getQualifier())));
        System.out.println(qnn.getQualifier() + "->" + qnn.getName());
        declaringClass=definedIn3rdPartyClass(stp.getName().toString(),"THIS");
        constrains.clear();
        constrains.add(ASTNode.TYPE_DECLARATION);
        constrains.add(ASTNode.FIELD_DECLARATION);
        return definedIn3rdPartyClass(declaringClass,qnn.getName().toString());
      }
    }
  }
 else   if (parent.getNodeType() == ASTNode.SIMPLE_TYPE) {
    return definedIn3rdPartyClass(findMe.toString(),"THIS");
  }
 else   if (parent.getNodeType() == ASTNode.TYPE_DECLARATION) {
  }
  return null;
}
