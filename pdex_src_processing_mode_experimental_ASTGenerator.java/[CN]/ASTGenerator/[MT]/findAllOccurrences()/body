{
  String selText=editor.ta.getSelectedText();
  int line=editor.ta.getSelectionStartLine();
  System.out.println(editor.ta.getSelectedText() + "<- offsets " + (line)+ ", "+ (editor.ta.getSelectionStart() - editor.ta.getLineStartOffset(line))+ ", "+ (editor.ta.getSelectionStop() - editor.ta.getLineStartOffset(line)));
  int offwhitespace=editor.ta.getLineStartNonWhiteSpaceOffset(line);
  ASTNodeWrapper wnode=getASTNodeAt(line + errorCheckerService.mainClassOffset,selText,editor.ta.getSelectionStart() - offwhitespace,false);
  System.err.println("Gonna find all occurrences of " + getNodeAsString(wnode.getNode()));
  if (wnode.getNodeType() == ASTNode.METHOD_DECLARATION) {
    MethodDeclaration md=(MethodDeclaration)wnode.getNode();
    ASTNode node=md.getParent();
    while (node != null) {
      if (node instanceof TypeDeclaration) {
        break;
      }
      node=node.getParent();
    }
    if (node != null && node instanceof TypeDeclaration) {
      TypeDeclaration td=(TypeDeclaration)node;
      if (td.getName().toString().equals(md.getName().toString())) {
        System.err.println("Renaming constructor of " + getNodeAsString(td));
        wnode=new ASTNodeWrapper(td);
      }
    }
  }
  DefaultMutableTreeNode defCU=new DefaultMutableTreeNode(wnode);
  dfsNameOnly(defCU,wnode.getNode(),selText);
  System.out.println(wnode);
  return defCU;
}
