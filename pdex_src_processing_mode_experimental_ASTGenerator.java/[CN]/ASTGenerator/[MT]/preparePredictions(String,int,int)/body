{
  if (caretWithinLineComment()) {
    System.out.println("No predictions.");
    return;
  }
  SwingWorker worker=new SwingWorker(){
    @Override protected Object doInBackground() throws Exception {
      return null;
    }
    protected void done(){
      String word2=ASTNodeWrapper.getJavaCode(word);
      boolean noCompare=false;
      if (word2.endsWith(".")) {
        word2=word2.substring(0,word2.length() - 1);
        noCompare=true;
      }
      if (word2.length() > 2 && !noCompare && word2.length() > lastPredictedWord.length()) {
        if (word2.startsWith(lastPredictedWord)) {
          System.out.println(word + " starts with " + lastPredictedWord);
          System.out.println("Don't recalc");
          if (word2.contains(".")) {
            int x=word2.lastIndexOf('.');
            trimCandidates(word2.substring(x + 1));
          }
 else {
            trimCandidates(word2);
          }
          showPredictions(word);
          lastPredictedWord=word2;
          return;
        }
      }
      int lineNumber=line;
      if (errorCheckerService != null) {
        editor=errorCheckerService.getEditor();
        int codeIndex=editor.getSketch().getCodeIndex(editor.getCurrentTab());
        if (codeIndex > 0)         for (int i=0; i < codeIndex; i++) {
          SketchCode sc=editor.getSketch().getCode(i);
          int len=Base.countLines(sc.getProgram()) + 1;
          lineNumber+=len;
        }
      }
      ASTNode nearestNode=null;
      ASTParser parser=ASTParser.newParser(AST.JLS4);
      parser.setKind(ASTParser.K_EXPRESSION);
      parser.setSource(word2.toCharArray());
      ASTNode testnode=parser.createAST(null);
      System.err.print("Typed: " + word2 + "|");
      nearestNode=findClosestNode(lineNumber,(ASTNode)compilationUnit.types().get(0));
      if (nearestNode == null)       nearestNode=(ASTNode)compilationUnit.types().get(0);
      System.err.println(lineNumber + " Nearest ASTNode to PRED " + getNodeAsString(nearestNode));
      candidates=new ArrayList<CompletionCandidate>();
      lastPredictedWord=word2;
      if (testnode instanceof SimpleName && !noCompare) {
        System.err.println("One word expression " + getNodeAsString(testnode));
        while (nearestNode != null) {
          if (nearestNode instanceof TypeDeclaration) {
            TypeDeclaration td=(TypeDeclaration)nearestNode;
            if (td.getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY) != null) {
              SimpleType st=(SimpleType)td.getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY);
              System.out.println("Superclass " + st.getName());
              for (              CompletionCandidate can : getMembersForType(st.getName().toString(),word2,noCompare,false)) {
                candidates.add(can);
              }
            }
          }
          List<StructuralPropertyDescriptor> sprops=nearestNode.structuralPropertiesForType();
          for (          StructuralPropertyDescriptor sprop : sprops) {
            ASTNode cnode=null;
            if (!sprop.isChildListProperty()) {
              if (nearestNode.getStructuralProperty(sprop) instanceof ASTNode) {
                cnode=(ASTNode)nearestNode.getStructuralProperty(sprop);
                CompletionCandidate[] types=checkForTypes(cnode);
                if (types != null) {
                  for (int i=0; i < types.length; i++) {
                    if (types[i].getElementName().toLowerCase().startsWith(word2.toLowerCase()))                     candidates.add(types[i]);
                  }
                }
              }
            }
 else {
              List<ASTNode> nodelist=(List<ASTNode>)nearestNode.getStructuralProperty(sprop);
              for (              ASTNode clnode : nodelist) {
                CompletionCandidate[] types=checkForTypes(clnode);
                if (types != null) {
                  for (int i=0; i < types.length; i++) {
                    if (types[i].getElementName().toLowerCase().startsWith(word2.toLowerCase()))                     candidates.add(types[i]);
                  }
                }
              }
            }
          }
          nearestNode=nearestNode.getParent();
        }
        System.out.println("Empty can. " + word2);
        RegExpResourceFilter regExpResourceFilter;
        regExpResourceFilter=new RegExpResourceFilter(Pattern.compile(".*"),Pattern.compile(word2 + "[a-zA-Z_0-9]*.class",Pattern.CASE_INSENSITIVE));
        String[] resources=classPath.findResources("",regExpResourceFilter);
        for (        String matchedClass2 : resources) {
          matchedClass2=matchedClass2.replace('/','.');
          String matchedClass=matchedClass2.substring(0,matchedClass2.length() - 6);
          if (ignorableImport(matchedClass2))           continue;
          int d=matchedClass.lastIndexOf('.');
          matchedClass=matchedClass.substring(d + 1);
          candidates.add(new CompletionCandidate(matchedClass,matchedClass + " : " + matchedClass2.substring(0,d),matchedClass,CompletionCandidate.PREDEF_CLASS));
        }
      }
 else {
        System.err.println("Complex expression " + getNodeAsString(testnode));
        System.out.println("candidates empty");
        ASTNode childExpr=getChildExpression(testnode);
        System.out.println("Parent expression : " + getParentExpression(testnode));
        System.out.println("Child expression : " + childExpr);
        if (childExpr instanceof ASTNode) {
          if (!noCompare) {
            System.out.println("Original testnode " + getNodeAsString(testnode));
            testnode=getParentExpression(testnode);
            System.out.println("Corrected testnode " + getNodeAsString(testnode));
          }
          ClassMember expr=resolveExpression3rdParty(nearestNode,testnode,noCompare);
          if (expr == null) {
            System.out.println("Expr is null");
          }
 else {
            System.out.println("Expr is " + expr.toString());
            candidates=getMembersForType(expr,childExpr.toString(),noCompare,false);
          }
        }
 else {
          System.out.println("ChildExpr is null");
        }
      }
      showPredictions(word);
    }
  }
;
  worker.execute();
}
