{
  String child=childToLookFor.toLowerCase();
  ArrayList<CompletionCandidate> candidates=new ArrayList<CompletionCandidate>();
  System.out.println("getMemFoType-> Looking for match " + child.toString() + " inside "+ tehClass+ " noCompare "+ noCompare+ " staticOnly "+ staticOnly);
  if (tehClass == null) {
    return candidates;
  }
  if (tehClass.getDeclaringNode() instanceof TypeDeclaration) {
    TypeDeclaration td=(TypeDeclaration)tehClass.getDeclaringNode();
    for (int i=0; i < td.getFields().length; i++) {
      List<VariableDeclarationFragment> vdfs=td.getFields()[i].fragments();
      for (      VariableDeclarationFragment vdf : vdfs) {
        if (noCompare) {
          candidates.add(new CompletionCandidate(vdf));
        }
 else         if (vdf.getName().toString().toLowerCase().startsWith(child))         candidates.add(new CompletionCandidate(vdf));
      }
    }
    for (int i=0; i < td.getMethods().length; i++) {
      if (noCompare) {
        candidates.add(new CompletionCandidate(td.getMethods()[i]));
      }
 else       if (td.getMethods()[i].getName().toString().toLowerCase().startsWith(child))       candidates.add(new CompletionCandidate(td.getMethods()[i]));
    }
    ArrayList<CompletionCandidate> superClassCandidates=new ArrayList<CompletionCandidate>();
    if (td.getSuperclassType() instanceof Type) {
      System.out.println(getNodeAsString(td.getSuperclassType()) + " <-Looking into superclass of " + tehClass);
      superClassCandidates=getMembersForType(new ClassMember(td.getSuperclassType()),childToLookFor,noCompare,staticOnly);
    }
 else {
      superClassCandidates=getMembersForType(new ClassMember(Object.class),childToLookFor,noCompare,staticOnly);
    }
    for (    CompletionCandidate cc : superClassCandidates) {
      candidates.add(cc);
    }
    return candidates;
  }
  Class<?> probableClass;
  if (tehClass.getClass_() != null) {
    probableClass=tehClass.getClass_();
  }
 else {
    probableClass=findClassIfExists(tehClass.getTypeAsString());
    if (probableClass == null) {
      System.out.println("Couldn't find class " + tehClass.getTypeAsString());
      return candidates;
    }
    System.out.println("Loaded " + probableClass.toString());
  }
  for (  Method method : probableClass.getMethods()) {
    if (!Modifier.isStatic(method.getModifiers()) && staticOnly) {
      continue;
    }
    StringBuffer label=new StringBuffer(method.getName() + "(");
    for (int i=0; i < method.getParameterTypes().length; i++) {
      label.append(method.getParameterTypes()[i].getSimpleName());
      if (i < method.getParameterTypes().length - 1)       label.append(",");
    }
    label.append(")");
    if (noCompare) {
      candidates.add(new CompletionCandidate(method));
    }
 else     if (label.toString().toLowerCase().startsWith(child)) {
      candidates.add(new CompletionCandidate(method));
    }
  }
  for (  Field field : probableClass.getFields()) {
    if (!Modifier.isStatic(field.getModifiers()) && staticOnly) {
      continue;
    }
    if (noCompare) {
      candidates.add(new CompletionCandidate(field));
    }
 else     if (field.getName().toLowerCase().startsWith(child)) {
      candidates.add(new CompletionCandidate(field));
    }
  }
  return candidates;
}
