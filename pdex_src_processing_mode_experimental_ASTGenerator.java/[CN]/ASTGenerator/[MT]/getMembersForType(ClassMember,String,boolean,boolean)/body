{
  ArrayList<CompletionCandidate> candidates=new ArrayList<CompletionCandidate>();
  System.out.println("getMemFoType-> Looking for match " + child.toString() + " inside "+ tehClass+ " noCompare "+ noCompare+ " staticOnly "+ staticOnly);
  if (tehClass.getDeclaringNode() instanceof TypeDeclaration) {
    TypeDeclaration td=(TypeDeclaration)tehClass.getDeclaringNode();
    for (int i=0; i < td.getFields().length; i++) {
      List<VariableDeclarationFragment> vdfs=td.getFields()[i].fragments();
      for (      VariableDeclarationFragment vdf : vdfs) {
        if (noCompare) {
          candidates.add(new CompletionCandidate(getNodeAsString2(vdf)));
        }
 else         if (vdf.getName().toString().startsWith(child.toString()))         candidates.add(new CompletionCandidate(getNodeAsString2(vdf)));
      }
    }
    for (int i=0; i < td.getMethods().length; i++) {
      if (noCompare) {
        candidates.add(new CompletionCandidate(getNodeAsString2(td.getMethods()[i]),td.getName().toString(),"",CompletionCandidate.METHOD));
      }
 else       if (td.getMethods()[i].getName().toString().startsWith(child.toString()))       candidates.add(new CompletionCandidate(getNodeAsString2(td.getMethods()[i]),td.getName().toString(),"",CompletionCandidate.METHOD));
    }
    return candidates;
  }
  try {
    Class<?> probableClass;
    if (tehClass.getClass_() != null) {
      probableClass=tehClass.getClass_();
    }
 else {
      probableClass=findClassIfExists(tehClass.getTypeAsString());
      System.out.println("Loaded " + probableClass.toString());
    }
    for (    Method method : probableClass.getMethods()) {
      if (!Modifier.isStatic(method.getModifiers()) && staticOnly) {
        continue;
      }
      StringBuffer label=new StringBuffer(method.getName() + "(");
      for (int i=0; i < method.getParameterTypes().length; i++) {
        label.append(method.getParameterTypes()[i].getSimpleName());
        if (i < method.getParameterTypes().length - 1)         label.append(",");
      }
      label.append(")");
      if (noCompare) {
        candidates.add(new CompletionCandidate(method));
      }
 else       if (label.toString().startsWith(child.toString())) {
        candidates.add(new CompletionCandidate(method));
      }
    }
    for (    Field field : probableClass.getFields()) {
      if (!Modifier.isStatic(field.getModifiers()) && staticOnly) {
        continue;
      }
      if (noCompare) {
        candidates.add(new CompletionCandidate(field));
      }
 else       if (field.getName().startsWith(child.toString())) {
        candidates.add(new CompletionCandidate(field));
      }
    }
    return candidates;
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println("Couldn't load " + tehClass);
  }
  return null;
}
