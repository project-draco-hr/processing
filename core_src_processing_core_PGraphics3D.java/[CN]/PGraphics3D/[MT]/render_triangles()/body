{
  if (raw != null) {
    raw.colorMode(RGB,1);
    raw.noStroke();
    raw.beginShape(TRIANGLES);
  }
  for (int i=0; i < triangleCount; i++) {
    float a[]=vertices[triangles[i][VERTEX1]];
    float b[]=vertices[triangles[i][VERTEX2]];
    float c[]=vertices[triangles[i][VERTEX3]];
    int tex=triangles[i][TEXTURE_INDEX];
    int index=triangles[i][INDEX];
    float shift=0.15f;
    boolean shifted=false;
    if (drawing2D() && (a[Z] == 0)) {
      shifted=true;
      a[TX]+=shift;
      a[TY]+=shift;
      a[VX]+=shift * a[VW];
      a[VY]+=shift * a[VW];
      b[TX]+=shift;
      b[TY]+=shift;
      b[VX]+=shift * b[VW];
      b[VY]+=shift * b[VW];
      c[TX]+=shift;
      c[TY]+=shift;
      c[VX]+=shift * c[VW];
      c[VY]+=shift * c[VW];
    }
    triangle.reset();
    float ar=clamp(triangleColors[i][0][TRI_DIFFUSE_R] + triangleColors[i][0][TRI_SPECULAR_R]);
    float ag=clamp(triangleColors[i][0][TRI_DIFFUSE_G] + triangleColors[i][0][TRI_SPECULAR_G]);
    float ab=clamp(triangleColors[i][0][TRI_DIFFUSE_B] + triangleColors[i][0][TRI_SPECULAR_B]);
    float br=clamp(triangleColors[i][1][TRI_DIFFUSE_R] + triangleColors[i][1][TRI_SPECULAR_R]);
    float bg=clamp(triangleColors[i][1][TRI_DIFFUSE_G] + triangleColors[i][1][TRI_SPECULAR_G]);
    float bb=clamp(triangleColors[i][1][TRI_DIFFUSE_B] + triangleColors[i][1][TRI_SPECULAR_B]);
    float cr=clamp(triangleColors[i][2][TRI_DIFFUSE_R] + triangleColors[i][2][TRI_SPECULAR_R]);
    float cg=clamp(triangleColors[i][2][TRI_DIFFUSE_G] + triangleColors[i][2][TRI_SPECULAR_G]);
    float cb=clamp(triangleColors[i][2][TRI_DIFFUSE_B] + triangleColors[i][2][TRI_SPECULAR_B]);
    if (tex > -1 && textures[tex] != null) {
      triangle.setTexture(textures[tex]);
      triangle.setUV(a[U],a[V],b[U],b[V],c[U],c[V]);
    }
    triangle.setIntensities(ar,ag,ab,a[A],br,bg,bb,b[A],cr,cg,cb,c[A]);
    triangle.setVertices(a[TX],a[TY],a[TZ],b[TX],b[TY],b[TZ],c[TX],c[TY],c[TZ]);
    if (hints[ENABLE_ACCURATE_TEXTURES]) {
      triangle.setCamVertices(a[VX],a[VY],a[VZ],b[VX],b[VY],b[VZ],c[VX],c[VY],c[VZ]);
    }
    triangle.setIndex(index);
    triangle.render();
    if (raw != null) {
      if (raw instanceof PGraphics3D) {
        if ((a[VW] != 0) && (b[VW] != 0) && (c[VW] != 0)) {
          raw.fill(ar,ag,ab,a[A]);
          raw.vertex(a[VX] / a[VW],a[VY] / a[VW],a[VZ] / a[VW]);
          raw.fill(br,bg,bb,b[A]);
          raw.vertex(b[VX] / b[VW],b[VY] / b[VW],b[VZ] / b[VW]);
          raw.fill(cr,cg,cb,c[A]);
          raw.vertex(c[VX] / c[VW],c[VY] / c[VW],c[VZ] / c[VW]);
        }
      }
 else {
        raw.fill(ar,ag,ab,a[A]);
        raw.vertex(a[TX],a[TY]);
        raw.fill(br,bg,bb,b[A]);
        raw.vertex(b[TX],b[TY]);
        raw.fill(cr,cg,cb,c[A]);
        raw.vertex(c[TX],c[TY]);
      }
    }
    if (drawing2D() && shifted) {
      a[TX]-=shift;
      a[TY]-=shift;
      a[VX]-=shift * a[VW];
      a[VY]-=shift * a[VW];
      b[TX]-=shift;
      b[TY]-=shift;
      b[VX]-=shift * b[VW];
      b[VY]-=shift * b[VW];
      c[TX]-=shift;
      c[TY]-=shift;
      c[VX]-=shift * c[VW];
      c[VY]-=shift * c[VW];
    }
  }
  triangleCount=0;
  if (raw != null) {
    raw.endShape();
  }
}
