{
  float radiusH=w / 2;
  float radiusV=h / 2;
  float centerX=x + radiusH;
  float centerY=y + radiusV;
  int rough=(int)(4 + Math.sqrt(w + h) * 3);
  int accuracy=PApplet.constrain(rough,6,100);
  if (fill) {
    float inc=(float)SINCOS_LENGTH / accuracy;
    float val=0;
    boolean strokeSaved=stroke;
    stroke=false;
    boolean smoothSaved=smooth;
    if (smooth && stroke) {
      smooth=false;
    }
    beginShape(TRIANGLE_FAN);
    normal(0,0,1);
    vertex(centerX,centerY);
    for (int i=0; i < accuracy; i++) {
      vertex(centerX + cosLUT[(int)val] * radiusH,centerY + sinLUT[(int)val] * radiusV);
      val=(val + inc) % SINCOS_LENGTH;
    }
    vertex(centerX + cosLUT[0] * radiusH,centerY + sinLUT[0] * radiusV);
    endShape();
    stroke=strokeSaved;
    smooth=smoothSaved;
  }
  if (stroke) {
    float inc=(float)SINCOS_LENGTH / accuracy;
    float val=0;
    boolean savedFill=fill;
    fill=false;
    val=0;
    beginShape();
    for (int i=0; i < accuracy; i++) {
      vertex(centerX + cosLUT[(int)val] * radiusH,centerY + sinLUT[(int)val] * radiusV);
      val=(val + inc) % SINCOS_LENGTH;
    }
    endShape(CLOSE);
    fill=savedFill;
  }
}
