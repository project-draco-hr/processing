{
  int vIndex;
  if (normalMode == NORMAL_MODE_VERTEX) {
    vIndex=triangles[triIndex][VERTEX1];
    lightUnlitVertex(vIndex,tempLightingContribution);
    copyPrelitVertexColor(triIndex,vIndex,0);
    vIndex=triangles[triIndex][VERTEX2];
    lightUnlitVertex(vIndex,tempLightingContribution);
    copyPrelitVertexColor(triIndex,vIndex,1);
    vIndex=triangles[triIndex][VERTEX3];
    lightUnlitVertex(vIndex,tempLightingContribution);
    copyPrelitVertexColor(triIndex,vIndex,2);
  }
 else   if (!lightingDependsOnVertexPosition) {
    vIndex=triangles[triIndex][VERTEX1];
    int vIndex2=triangles[triIndex][VERTEX2];
    int vIndex3=triangles[triIndex][VERTEX3];
    cross(vertices[vIndex2][VX] - vertices[vIndex][VX],vertices[vIndex2][VY] - vertices[vIndex][VY],vertices[vIndex2][VZ] - vertices[vIndex][VZ],vertices[vIndex3][VX] - vertices[vIndex][VX],vertices[vIndex3][VY] - vertices[vIndex][VY],vertices[vIndex3][VZ] - vertices[vIndex][VZ],lightTriangleNorm);
    lightTriangleNorm.normalize();
    vertices[vIndex][NX]=lightTriangleNorm.x;
    vertices[vIndex][NY]=lightTriangleNorm.y;
    vertices[vIndex][NZ]=lightTriangleNorm.z;
    calcLightingContribution(vIndex,tempLightingContribution,true);
    copyVertexColor(triIndex,vIndex,0,tempLightingContribution);
    copyVertexColor(triIndex,vIndex2,1,tempLightingContribution);
    copyVertexColor(triIndex,vIndex3,2,tempLightingContribution);
  }
 else {
    if (normalMode == NORMAL_MODE_SHAPE) {
      vIndex=triangles[triIndex][VERTEX1];
      vertices[vIndex][NX]=vertices[shapeFirst][NX];
      vertices[vIndex][NY]=vertices[shapeFirst][NY];
      vertices[vIndex][NZ]=vertices[shapeFirst][NZ];
      calcLightingContribution(vIndex,tempLightingContribution);
      copyVertexColor(triIndex,vIndex,0,tempLightingContribution);
      vIndex=triangles[triIndex][VERTEX2];
      vertices[vIndex][NX]=vertices[shapeFirst][NX];
      vertices[vIndex][NY]=vertices[shapeFirst][NY];
      vertices[vIndex][NZ]=vertices[shapeFirst][NZ];
      calcLightingContribution(vIndex,tempLightingContribution);
      copyVertexColor(triIndex,vIndex,1,tempLightingContribution);
      vIndex=triangles[triIndex][VERTEX3];
      vertices[vIndex][NX]=vertices[shapeFirst][NX];
      vertices[vIndex][NY]=vertices[shapeFirst][NY];
      vertices[vIndex][NZ]=vertices[shapeFirst][NZ];
      calcLightingContribution(vIndex,tempLightingContribution);
      copyVertexColor(triIndex,vIndex,2,tempLightingContribution);
    }
 else {
      vIndex=triangles[triIndex][VERTEX1];
      int vIndex2=triangles[triIndex][VERTEX2];
      int vIndex3=triangles[triIndex][VERTEX3];
      cross(vertices[vIndex2][VX] - vertices[vIndex][VX],vertices[vIndex2][VY] - vertices[vIndex][VY],vertices[vIndex2][VZ] - vertices[vIndex][VZ],vertices[vIndex3][VX] - vertices[vIndex][VX],vertices[vIndex3][VY] - vertices[vIndex][VY],vertices[vIndex3][VZ] - vertices[vIndex][VZ],lightTriangleNorm);
      lightTriangleNorm.normalize();
      vertices[vIndex][NX]=lightTriangleNorm.x;
      vertices[vIndex][NY]=lightTriangleNorm.y;
      vertices[vIndex][NZ]=lightTriangleNorm.z;
      calcLightingContribution(vIndex,tempLightingContribution,true);
      copyVertexColor(triIndex,vIndex,0,tempLightingContribution);
      vertices[vIndex2][NX]=lightTriangleNorm.x;
      vertices[vIndex2][NY]=lightTriangleNorm.y;
      vertices[vIndex2][NZ]=lightTriangleNorm.z;
      calcLightingContribution(vIndex2,tempLightingContribution,true);
      copyVertexColor(triIndex,vIndex2,1,tempLightingContribution);
      vertices[vIndex3][NX]=lightTriangleNorm.x;
      vertices[vIndex3][NY]=lightTriangleNorm.y;
      vertices[vIndex3][NZ]=lightTriangleNorm.z;
      calcLightingContribution(vIndex3,tempLightingContribution,true);
      copyVertexColor(triIndex,vIndex3,2,tempLightingContribution);
    }
  }
}
