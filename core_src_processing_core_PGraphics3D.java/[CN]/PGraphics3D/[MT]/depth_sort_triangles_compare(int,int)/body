{
  if (Float.isNaN(vertices[triangles[a][VERTEX1]][Z]) || Float.isNaN(vertices[triangles[a][VERTEX2]][Z]) || Float.isNaN(vertices[triangles[a][VERTEX3]][Z])|| Float.isNaN(vertices[triangles[b][VERTEX1]][Z])|| Float.isNaN(vertices[triangles[b][VERTEX2]][Z])|| Float.isNaN(vertices[triangles[b][VERTEX3]][Z])) {
    throw new RuntimeException("nan triangle");
  }
  return (vertices[triangles[b][VERTEX1]][Z] + vertices[triangles[b][VERTEX2]][Z] + vertices[triangles[b][VERTEX3]][Z]) - (vertices[triangles[a][VERTEX1]][Z] + vertices[triangles[a][VERTEX2]][Z] + vertices[triangles[a][VERTEX3]][Z]);
}
