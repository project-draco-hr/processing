{
  GLUhalfEdge e, eTopLeft, eTopRight, eLast;
  ActiveRegion reg;
  e=regUp.eUp;
  if (Geom.VertEq(e.Org,vEvent)) {
    assert(TOLERANCE_NONZERO);
    SpliceMergeVertices(tess,e,vEvent.anEdge);
    return;
  }
  if (!Geom.VertEq(e.Sym.Org,vEvent)) {
    if (Mesh.__gl_meshSplitEdge(e.Sym) == null)     throw new RuntimeException();
    if (regUp.fixUpperEdge) {
      if (!Mesh.__gl_meshDelete(e.Onext))       throw new RuntimeException();
      regUp.fixUpperEdge=false;
    }
    if (!Mesh.__gl_meshSplice(vEvent.anEdge,e))     throw new RuntimeException();
    SweepEvent(tess,vEvent);
    return;
  }
  assert(TOLERANCE_NONZERO);
  regUp=TopRightRegion(regUp);
  reg=RegionBelow(regUp);
  eTopRight=reg.eUp.Sym;
  eTopLeft=eLast=eTopRight.Onext;
  if (reg.fixUpperEdge) {
    assert(eTopLeft != eTopRight);
    DeleteRegion(tess,reg);
    if (!Mesh.__gl_meshDelete(eTopRight))     throw new RuntimeException();
    eTopRight=eTopLeft.Sym.Lnext;
  }
  if (!Mesh.__gl_meshSplice(vEvent.anEdge,eTopRight))   throw new RuntimeException();
  if (!Geom.EdgeGoesLeft(eTopLeft)) {
    eTopLeft=null;
  }
  AddRightEdges(tess,regUp,eTopRight.Onext,eLast,eTopLeft,true);
}
