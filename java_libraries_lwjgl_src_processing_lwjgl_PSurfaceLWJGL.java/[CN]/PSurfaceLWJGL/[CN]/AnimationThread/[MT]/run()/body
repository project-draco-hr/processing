{
  try {
    Display.setDisplayMode(new DisplayMode(sketchWidth,sketchHeight));
    System.err.println(sketchWidth + " " + sketchHeight);
    if (fullScreenRequested) {
      Display.setFullscreen(true);
    }
    Display.create();
  }
 catch (  LWJGLException e) {
    e.printStackTrace();
    System.exit(0);
  }
  keyPoller=new KeyPoller(sketch);
  keyPoller.start();
  mousePoller=new MousePoller(sketch);
  mousePoller.start();
  long beforeTime=System.nanoTime();
  long overSleepTime=0L;
  int noDelays=0;
  final int NO_DELAYS_PER_YIELD=15;
  setSize(sketchWidth,sketchHeight);
  sketch.start();
  while ((Thread.currentThread() == thread) && !sketch.finished) {
    if (Display.wasResized()) {
      setSize(Display.getWidth(),Display.getHeight());
    }
    pgl.setThread(thread);
    checkPause();
    sketch.handleDraw();
    Display.update();
    if (sketch.frameCount == 1) {
      requestFocus();
    }
    long afterTime=System.nanoTime();
    long timeDiff=afterTime - beforeTime;
    long sleepTime=(frameRatePeriod - timeDiff) - overSleepTime;
    if (sleepTime > 0) {
      try {
        Thread.sleep(sleepTime / 1000000L,(int)(sleepTime % 1000000L));
        noDelays=0;
      }
 catch (      InterruptedException ex) {
      }
      overSleepTime=(System.nanoTime() - afterTime) - sleepTime;
    }
 else {
      overSleepTime=0L;
      noDelays++;
      if (noDelays > NO_DELAYS_PER_YIELD) {
        Thread.yield();
        noDelays=0;
      }
    }
    beforeTime=System.nanoTime();
    if (Display.isCloseRequested())     break;
  }
  keyPoller.requestStop();
  mousePoller.requestStop();
  sketch.dispose();
  Display.destroy();
  if (sketch.exitCalled()) {
    sketch.exitActual();
  }
}
